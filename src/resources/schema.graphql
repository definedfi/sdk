directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

input AddEventsInput {
  address: String!
  networkId: Int!
  id: String!
  quoteToken: QuoteToken
  events: [EventInputUnion]!
}

"""Response returned by `onEventsCreated`."""
type AddEventsOutput {
  """The contract address of the pair."""
  address: String!

  """The network ID that the token is deployed on."""
  networkId: Int!

  """
  The ID of the event (`address`:`networkId`). For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1`.
  """
  id: String!

  """The token of interest within the pair. Can be `token0` or `token1`."""
  quoteToken: QuoteToken

  """A list of transactions for the token."""
  events: [Event]!
}

input AddNftEventsInput {
  address: String!
  networkId: Int!
  id: String!
  events: [NftEventInput!]!
}

"""Response returned by `onNftEventsCreated`."""
type AddNftEventsOutput {
  """The contract address of the NFT collection."""
  address: String!

  """The network ID the collection is deployed on."""
  networkId: Int!

  """The id of the collection (`address`:`networkId`)."""
  id: String!

  """A list of NFT transactions streaming real-time."""
  events: [NftEvent]!
}

type AddNftPoolEventsOutput {
  collectionAddress: String!
  exchangeAddress: String!
  poolAddress: String!
  networkId: Int!
  id: String!
  events: [NftPoolEvent]!
}

enum AlertRecurrence {
  INDEFINITE
  ONCE
}

"""Wallet balance of a token."""
type Balance {
  """The ID of the wallet (`walletAddress:networkId`)."""
  walletId: String!

  """The ID of the token (`tokenAddress:networkId`)."""
  tokenId: String!

  """The balance held by the wallet."""
  balance: String!

  """
  The balance held by the wallet, adjusted by the number of decimals in the token.
  """
  shiftedBalance: Float!
}

"""Optional way to provide current balance to the PnL calculator"""
input BalanceInput {
  walletId: String!
  tokenId: String!
  balance: String!
}

input BalancesInput {
  walletId: String!
  cursor: String

  """Optional token specifically request the balance for"""
  filterToken: String
}

type BalancesResponse {
  items: [Balance!]!
  cursor: String
}

"""Bar chart data to track price changes over time."""
type BarsResponse {
  """The opening price."""
  o: [Float]!

  """The high price."""
  h: [Float]!

  """The low price."""
  l: [Float]!

  """The closing price."""
  c: [Float]!

  """The volume."""
  v: [Int]!

  """The timestamp for the bar."""
  t: [Int!]!

  """The status code for the bar. `200` responses are `ok`."""
  s: String!

  """The volume with higher precision."""
  volume: [String]

  """The volume in the native token for the network"""
  volumeNativeToken: [String]
}

"""
The mathematical formula that defines how the prices of NFTs change after each buy or sell within a pool.
"""
enum BondingCurveType {
  EXPONENTIAL
  LINEAR
  XYK
  GDA
}

"""Event data for a token burn event."""
type BurnEventData {
  """The amount of `token0` removed from the pair."""
  amount0: String

  """The amount of `token1` removed from the pair."""
  amount1: String

  """
  The amount of `token0` removed from the pair, adjusted by the number of decimals in the token. For example, if `amount0` is in WEI, `amount0Shifted` will be in ETH.
  """
  amount0Shifted: String

  """
  The amount of `token1` removed from the pair, adjusted by the number of decimals in the token. For example, USDC `amount1Shifted` will be by 6 decimals.
  """
  amount1Shifted: String

  """
  The lower tick boundary of the position. Only applicable for UniswapV3 events.
  """
  tickLower: String

  """
  The upper tick boundary of the position. Only applicable for UniswapV3 events.
  """
  tickUpper: String

  """The type of token event, `Burn`."""
  type: EventType!
}

input BurnEventDataInput {
  amount0: String
  amount1: String
  amount0Shifted: String
  amount1Shifted: String
  tickLower: String
  tickUpper: String
  type: EventType!
}

input BurnEventInput {
  address: String!
  baseTokenPrice: String
  blockHash: String!
  blockNumber: Int!
  data: BurnEventDataInput
  id: String!
  liquidityToken: String
  logIndex: Int!
  maker: String
  networkId: Int!
  quoteToken: QuoteToken
  timestamp: Int!
  token0ValueBase: String
  token1ValueBase: String
  token0SwapValueUsd: String
  token1SwapValueUsd: String
  token0PoolValueUsd: String
  token1PoolValueUsd: String
  transactionHash: String!
  transactionIndex: Int!
  eventDisplayType: EventDisplayType
}

"""Input options for the chart image."""
input ChartImageOptions {
  """
  The expiry time of the image in seconds. Max: 172800 (2 days). Default: 900 (15 minutes).
  """
  expirationSeconds: Int

  """The width of the image in pixels. Max: 1200. Default: 800."""
  width: Int

  """The height of the image in pixels. Max: 1200. Default: 450."""
  height: Int
}

"""Input type of `chartUrls`."""
input ChartInput {
  """The input required to fetch a pair chart."""
  pair: PairChartInput
}

"""The color theme of the chart."""
enum ChartTheme {
  LIGHT
  DARK
}

"""The chart url."""
type ChartUrl {
  """The chart url."""
  url: String!
}

"""The response type for a chart url query."""
type ChartUrlsResponse {
  """The pair chart url."""
  pair: ChartUrl!
}

"""Community gathered proposals for an asset."""
type CommunityNote {
  """The contract address of the contract."""
  address: String!
  contractType: ContractType!
  currentContract: EnhancedContract

  """The contract after the community note was applied."""
  currentData: JSON

  """The ID of the contract (`address:id`)."""
  id: String!

  """The unix timestamp of when the community note was moderated."""
  moderatedAt: Int

  """The network ID the contract is deployed on."""
  networkId: Int!

  """The contract before the community note was applied."""
  previousData: JSON

  """The data of the community note."""
  proposalData: JSON!

  """The ordinal number of the community note."""
  proposalNum: Int!

  """The type of the community note."""
  proposalType: CommunityNoteType!

  """The unix timestamp of when the community note was created."""
  proposedAt: Int!
  sortKey: String!
}

"""Filters for community notes."""
input CommunityNotesFilter {
  """The contract address of the contract."""
  address: String
  contractType: ContractType

  """The network ID the contract is deployed on."""
  networkId: [Int]

  """The type of the proposal."""
  proposalType: CommunityNoteType
}

"""Input type of `getCommunityNotes`."""
input CommunityNotesInput {
  """A set of filters to apply"""
  filter: CommunityNotesFilter

  """The maximum number of community notes to return."""
  limit: Int

  """The cursor to use for pagination."""
  cursor: String
}

"""Community notes data"""
type CommunityNotesResponse {
  """The list of community notes matching the filter parameters."""
  items: [CommunityNote!]!

  """The number of community notes returned."""
  count: Int!

  """A cursor for use in pagination."""
  cursor: String
}

"""Type of the community gathered note."""
enum CommunityNoteType {
  """An contract attribute change."""
  ATTRIBUTE

  """A scam report."""
  SCAM

  """A logo change."""
  LOGO
}

type ComparisonOperator {
  gt: String
  gte: String
  lt: String
  lte: String
  eq: String
}

input ComparisonOperatorInput {
  gt: String
  gte: String
  lt: String
  lte: String
  eq: String
}

"""Metadata for a contract label."""
type ContractLabel {
  """The unix timestamp for when the contract label was created."""
  createdAt: Int!

  """
  The contract label sub-type. Can be `Generic`, `HighTax`, `HoneyPot` or `Imitator`.
  """
  subType: ContractLabelSubType!

  """The contract label type. Can be `Scam`."""
  type: ContractLabelType!
}

"""The contract label sub-type."""
enum ContractLabelSubType {
  Generic
  HighTax
  HoneyPot
  Imitator
}

"""The contract label type."""
enum ContractLabelType {
  Scam
}

enum ContractType {
  TOKEN
  NFT
}

enum CostBasisMethod {
  FIFO
}

input CreateDecodedCallWebhookArgs {
  name: String!
  callbackUrl: String!
  securityToken: String!
  alertRecurrence: AlertRecurrence!
  groupId: String
  conditions: DecodedCallWebhookConditionInput!
  retrySettings: RetrySettingsInput
  bucketId: String
  bucketSortkey: String
}

input CreateDecodedCallWebhooksInput {
  webhooks: [CreateDecodedCallWebhookArgs!]!
}

input CreateDecodedLogWebhookArgs {
  name: String!
  callbackUrl: String!
  securityToken: String!
  alertRecurrence: AlertRecurrence!
  groupId: String
  conditions: DecodedLogWebhookConditionInput!
  retrySettings: RetrySettingsInput
  bucketId: String
  bucketSortkey: String
}

input CreateDecodedLogWebhooksInput {
  webhooks: [CreateDecodedLogWebhookArgs!]!
}

input CreateNftEventWebhookArgs {
  name: String!
  callbackUrl: String!
  securityToken: String!
  alertRecurrence: AlertRecurrence!
  groupId: String
  conditions: NftEventWebhookConditionInput!
  retrySettings: RetrySettingsInput
  bucketId: String
  bucketSortkey: String
}

input CreateNftEventWebhooksInput {
  webhooks: [CreateNftEventWebhookArgs!]!
}

input CreatePriceWebhookArgs {
  name: String!
  callbackUrl: String!
  securityToken: String!
  alertRecurrence: AlertRecurrence!
  groupId: String
  conditions: PriceEventWebhookConditionInput!
  retrySettings: RetrySettingsInput
  bucketId: String
  bucketSortkey: String
}

input CreatePriceWebhooksInput {
  webhooks: [CreatePriceWebhookArgs!]!
}

input CreateRawCallTraceWebhookArgs {
  name: String!
  callbackUrl: String!
  securityToken: String!
  alertRecurrence: AlertRecurrence!
  groupId: String
  conditions: RawCallTraceWebhookConditionInput!
  retrySettings: RetrySettingsInput
  bucketId: String
  bucketSortkey: String
}

input CreateRawCallTraceWebhooksInput {
  webhooks: [CreateRawCallTraceWebhookArgs!]!
}

input CreateRawTransactionWebhookArgs {
  name: String!
  callbackUrl: String!
  securityToken: String!
  alertRecurrence: AlertRecurrence!
  groupId: String
  conditions: RawTransactionWebhookConditionInput!
  retrySettings: RetrySettingsInput
  bucketId: String
  bucketSortkey: String
}

input CreateRawTransactionWebhooksInput {
  webhooks: [CreateRawTransactionWebhookArgs!]!
}

input CreateTokenPairEventWebhookArgs {
  name: String!
  callbackUrl: String!
  securityToken: String!
  alertRecurrence: AlertRecurrence!
  groupId: String
  conditions: TokenPairEventWebhookConditionInput!
  retrySettings: RetrySettingsInput
  bucketId: String
  bucketSortkey: String
}

input CreateTokenPairEventWebhooksInput {
  webhooks: [CreateTokenPairEventWebhookArgs!]!
}

input CreateWebhooksInput {
  priceWebhooksInput: CreatePriceWebhooksInput
  decodedLogWebhooksInput: CreateDecodedLogWebhooksInput
  decodedCallWebhooksInput: CreateDecodedCallWebhooksInput
  rawCallTraceWebhooksInput: CreateRawCallTraceWebhooksInput
  tokenPairEventWebhooksInput: CreateTokenPairEventWebhooksInput
  nftEventWebhooksInput: CreateNftEventWebhooksInput
  rawTransactionWebhooksInput: CreateRawTransactionWebhooksInput
}

type CreateWebhooksOutput {
  priceWebhooks: [Webhook]!
  decodedLogWebhooks: [Webhook]!
  decodedCallWebhooks: [Webhook]!
  rawCallTraceWebhooks: [Webhook]!
  tokenPairEventWebhooks: [Webhook]!
  nftEventWebhooks: [Webhook]!
  rawTransactionWebhooks: [Webhook]!
}

"""Price data for a bar at a specific resolution."""
type CurrencyBarData {
  """The timestamp for the bar."""
  t: Int!

  """Bar chart data in USD."""
  usd: IndividualBarData!

  """Bar chart data in the network's base token."""
  token: IndividualBarData!
}

input CurrencyBarInput {
  t: Int!
  usd: IndividualBarInput!
  token: IndividualBarInput!
}

type DecodedCallWebhookCondition {
  decodingId: StringEqualsCondition!
  methodName: StringEqualsCondition
  address: StringEqualsCondition
  from: StringEqualsCondition
  to: StringEqualsCondition
  methodId: StringEqualsCondition
  input: JSON
  output: JSON
}

input DecodedCallWebhookConditionInput {
  decodingId: StringEqualsConditionInput!
  methodName: StringEqualsConditionInput
  address: StringEqualsConditionInput
  from: StringEqualsConditionInput
  to: StringEqualsConditionInput
  methodId: StringEqualsConditionInput
  input: JSON
  output: JSON
}

type DecodedLogWebhookCondition {
  decodingId: StringEqualsCondition!
  eventName: StringEqualsCondition
  address: StringEqualsCondition
  event: JSON
}

input DecodedLogWebhookConditionInput {
  decodingId: StringEqualsConditionInput!
  eventName: StringEqualsConditionInput
  address: StringEqualsConditionInput
  event: JSON
}

input DeleteWebhooksInput {
  webhookIds: [String!]!
}

type DeleteWebhooksOutput {
  deletedIds: [String]
}

"""Detailed stats for an NFT collection."""
type DetailedNftStats {
  """The contract address of the NFT collection."""
  collectionAddress: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """
  The marketplace address or `all`. Can be used to get marketplace-specific metrics.
  """
  grouping: String

  """The breakdown of stats over an hour window."""
  stats_hour1: WindowedDetailedNftStats

  """The breakdown of stats over a 4 hour window."""
  stats_hour4: WindowedDetailedNftStats

  """The breakdown of stats over a 12 hour window."""
  stats_hour12: WindowedDetailedNftStats

  """The breakdown of stats over a 24 hour window."""
  stats_day1: WindowedDetailedNftStats

  """The breakdown of stats over a 7 day window."""
  stats_week1: WindowedDetailedNftStats

  """The breakdown of stats over a 30 day window."""
  stats_day30: WindowedDetailedNftStats
}

"""The start/end timestamp for a given bucket within the window."""
type DetailedNftStatsBucketTimestamp {
  """The unix timestamp for the start of the window."""
  start: Int!

  """The unix timestamp for the end of the window."""
  end: Int!
}

"""The duration used to request detailed NFT stats."""
enum DetailedNftStatsDuration {
  day30
  week1
  day1
  hour12
  hour4
  hour1
}

input DetailedNftStatsInput {
  """The contract address of the NFT collection."""
  collectionAddress: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """
  The marketplace address to filter by. Can be used to get marketplace-specific metrics, otherwise uses all.
  """
  grouping: String

  """The unix timestamp for the stats. Defaults to current."""
  timestamp: Int

  """The list of durations to get detailed pair stats for."""
  durations: [DetailedNftStatsDuration]

  """
  The number of aggregated values to receive.
  Note: Each duration has predetermined bucket sizes.
  The first n-1 buckets are historical. The last bucket is a snapshot of current data.
  duration `day1`: 6 buckets (4 hours each) plus 1 partial bucket
  duration `hour12`: 12 buckets (1 hour each) plus 1 partial bucket
  duration `hour4`: 8 buckets (30 min each) plus 1 partial bucket
  duration `hour1`: 12 buckets (5 min each) plus 1 partial bucket
  duration `min5`: 5 buckets (1 min each) plus 1 partial bucket
  For example, requesting 11 buckets for a `min5` duration will return the last 10 minutes worth of data plus a snapshot for the current minute.
  """
  bucketCount: Int
}

"""Number metrics for detailed NFT stats."""
type DetailedNftStatsNumberMetrics {
  """The percent change between the `currentValue` and `previousValue`."""
  change: Float

  """The total value for the most recent duration."""
  currentValue: Int

  """The total value for the previous duration."""
  previousValue: Int

  """The list of aggregated values for each bucket."""
  buckets: [Int]!
}

"""String metrics for detailed NFT stats."""
type DetailedNftStatsStringMetrics {
  """The percent change between the `currentValue` and `previousValue`."""
  change: Float

  """The total value for the most recent duration."""
  currentValue: String

  """The total value for the previous duration."""
  previousValue: String

  """The list of aggregated values for each bucket."""
  buckets: [String]!
}

"""Detailed stats for a token within a pair."""
type DetailedPairStats {
  """The contract address of the pair."""
  pairAddress: String!

  """The network ID the pair is deployed on."""
  networkId: Int!

  """The token of interest used to calculate token-specific stats."""
  tokenOfInterest: TokenOfInterest

  """The unix timestamp for the last transaction to happen on the pair."""
  lastTransaction: Int

  """The breakdown of stats over a 5 minute window."""
  stats_min5: WindowedDetailedPairStats

  """The breakdown of stats over a 15 minute window."""
  stats_min15: WindowedDetailedPairStats

  """The breakdown of stats over an hour window."""
  stats_hour1: WindowedDetailedPairStats

  """The breakdown of stats over a 4 hour window."""
  stats_hour4: WindowedDetailedPairStats

  """The breakdown of stats over a 12 hour window."""
  stats_hour12: WindowedDetailedPairStats

  """The breakdown of stats over a 24 hour window."""
  stats_day1: WindowedDetailedPairStats

  """The breakdown of stats over a 7 day window."""
  stats_week1: WindowedDetailedPairStats

  """The breakdown of stats over a 30 day window."""
  stats_day30: WindowedDetailedPairStats

  """Number of aggregated buckets specified in input"""
  bucketCount: Int

  """The timestamp specified as input to the query"""
  queryTimestamp: Int
  pair: Pair
}

"""The start/end timestamp for a given bucket within the window."""
type DetailedPairStatsBucketTimestamp {
  """The unix timestamp for the start of the bucket."""
  start: Int!

  """The unix timestamp for the start of the bucket."""
  end: Int!
}

"""The duration used to request detailed pair stats."""
enum DetailedPairStatsDuration {
  day30
  week1
  day1
  hour12
  hour4
  hour1
  min15
  min5
}

"""Number metrics for detailed pair stats."""
type DetailedPairStatsNumberMetrics {
  """
  The percent change between the `currentValue` and `previousValue`. Decimal format.
  """
  change: Float

  """The total value for the most recent duration."""
  currentValue: Int

  """The total value for the previous duration."""
  previousValue: Int

  """The list of aggregated values for each bucket."""
  buckets: [Int]!
}

"""String metrics for detailed pair stats."""
type DetailedPairStatsStringMetrics {
  """
  The percent change between the `currentValue` and `previousValue`. Decimal format.
  """
  change: Float

  """The total value for the most recent duration."""
  currentValue: String

  """The total value for the previous duration."""
  previousValue: String

  """The list of aggregated values for each bucket."""
  buckets: [String]!
}

"""Detailed stats for a token."""
type DetailedStats {
  """The ID of the pair (`address`:`networkId`)."""
  pairId: String!

  """The token of interest within the pair. Can be `token0` or `token1`."""
  tokenOfInterest: TokenOfInterest!

  """The type of statistics used. Can be `Filtered` or `Unfiltered`."""
  statsType: TokenPairStatisticsType!

  """The breakdown of stats over a 5 minute window."""
  stats_min5: WindowedDetailedStats

  """The breakdown of stats over a 1 hour window."""
  stats_hour1: WindowedDetailedStats

  """The breakdown of stats over a 4 hour window."""
  stats_hour4: WindowedDetailedStats

  """The breakdown of stats over a 12 hour window."""
  stats_hour12: WindowedDetailedStats

  """The breakdown of stats over a 24 hour window."""
  stats_day1: WindowedDetailedStats

  """Number of aggregated buckets specified in input"""
  bucketCount: Int

  """The timestamp specified as input to the query"""
  queryTimestamp: Int
}

"""The start/end timestamp for a given bucket within the window."""
type DetailedStatsBucketTimestamp {
  """The unix timestamp for the start of the window."""
  start: Int!

  """The unix timestamp for the end of the window."""
  end: Int!
}

"""Number metrics for detailed token stats."""
type DetailedStatsNumberMetrics {
  """The percent change between the `currentValue` and `previousValue`."""
  change: Float!

  """The total value for the most recent duration."""
  currentValue: Int!

  """The total value for the previous duration."""
  previousValue: Int!

  """The list of aggregated values for each bucket."""
  buckets: [Int]!
}

"""String metrics for detailed token stats."""
type DetailedStatsStringMetrics {
  """The percent change between the `currentValue` and `previousValue`."""
  change: Float!

  """The total value for the most recent duration."""
  currentValue: String!

  """The total value for the previous duration."""
  previousValue: String!

  """The list of aggregated values for each bucket."""
  buckets: [String]!
}

"""Window sizes for detailed token stats."""
enum DetailedStatsWindowSize {
  day1
  hour12
  hour4
  hour1
  min5
}

"""Metadata for a contract."""
union EnhancedContract = EnhancedToken | EnhancedNftContract

"""Metadata for an NFT collection."""
type EnhancedNftContract {
  """The ID of the NFT collection (`address`:`networkId`)."""
  id: String!

  """The contract address of the NFT collection."""
  address: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The token standard. Can be a variation of `ERC-721` or `ERC-1155`."""
  ercType: String!

  """The name of the NFT collection."""
  name: String

  """The description of the NFT collection."""
  description: String

  """The symbol of the NFT collection."""
  symbol: String

  """The total supply of the NFT collection."""
  totalSupply: String

  """Community gathered links for the socials of this NFT collection."""
  socialLinks: SocialLinks

  """The URL for an image of the NFT collection."""
  image: String

  """A list of labels for the NFT collection."""
  labels: [ContractLabel]
}

"""Metadata for a token."""
type EnhancedToken {
  """The contract address of the token."""
  address: String!

  """The token ID on CoinMarketCap."""
  cmcId: Int

  """
  The precision to which the token can be divided. For example, the smallest unit for USDC is 0.000001 (6 decimals).
  """
  decimals: Int!

  """The ID of the token (`address:networkId`)."""
  id: String!

  """Whether the token has been flagged as a scam."""
  isScam: Boolean

  """The token name. For example, `ApeCoin`."""
  name: String

  """The network ID the token is deployed on."""
  networkId: Int!

  """The token symbol. For example, `APE`."""
  symbol: String

  """The total supply of the token."""
  totalSupply: String @deprecated(reason: "Use the TokenInfo type")

  """Community gathered links for the socials of this token."""
  socialLinks: SocialLinks

  """More metadata about the token."""
  info: TokenInfo

  """Information about the token from 3rd party sources."""
  explorerData: ExplorerTokenData

  """A list of exchanges where the token has been traded."""
  exchanges: [Exchange!]

  """The thumbnail token logo URL."""
  imageThumbUrl: String @deprecated(reason: "Use the TokenInfo type")

  """The small token logo URL."""
  imageSmallUrl: String @deprecated(reason: "Use the TokenInfo type")

  """The large token logo URL."""
  imageLargeUrl: String @deprecated(reason: "Use the TokenInfo type")

  """The circulating supply of the token."""
  circulatingSupply: String @deprecated(reason: "Use the TokenInfo type")

  """The amount of this token in the pair."""
  pooled: String @deprecated(reason: "Pooled can be found on the pair instead")
}

"""A token transaction."""
type Event {
  """The contract address of the token's top pair."""
  address: String!

  """The price of the network's base token."""
  baseTokenPrice: String

  """The hash of the block where the transaction occurred."""
  blockHash: String!

  """The block number for the transaction."""
  blockNumber: Int!

  """
  The event-specific data for the transaction. Can be `BurnEventData` or `MintEventData` or `SwapEventData`.
  """
  data: EventData

  """
  The type of transaction event. Can be `Burn`, `Mint`, `Swap`, `Sync`, `Collect`, or `CollectProtocol`.
  """
  eventType: EventType!

  """
  The ID of the event (`address`:`networkId`). For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1`.
  """
  id: String!

  """
  The contract address of the token with higher liquidity in the token's top pair.
  """
  liquidityToken: String

  """The index of the log in the block."""
  logIndex: Int!

  """The wallet address that performed the transaction."""
  maker: String

  """The network ID that the token is deployed on."""
  networkId: Int!

  """
  The token of interest within the token's top pair. Can be `token0` or `token1`.
  """
  quoteToken: QuoteToken

  """The unix timestamp for when the transaction occurred."""
  timestamp: Int!

  """The price of `token0` paid/received in USD, including any fees."""
  token0SwapValueUsd: String

  """The price of `token1` paid/received in USD, including any fees."""
  token1SwapValueUsd: String

  """
  The price of `token0` paid/received in the network's base token, including fees.
  """
  token0ValueBase: String

  """
  The price of `token1` paid/received in the network's base token, including fees.
  """
  token1ValueBase: String

  """
  The updated price of `token0` in USD, calculated after the transaction.
  """
  token0PoolValueUsd: String

  """
  The updated price of `token1` in USD, calculated after the transaction.
  """
  token1PoolValueUsd: String

  """The unique hash for the transaction."""
  transactionHash: String!

  """The index of the transaction within the block."""
  transactionIndex: Int!

  """
  A more specific breakdown of `eventType`. Splits `Swap` into `Buy` or `Sell`.
  """
  eventDisplayType: EventDisplayType

  """Labels attributed to the Event"""
  labels: LabelsForEvent
}

"""Response returned by `getTokenEvents`."""
type EventConnection {
  """A list of transactions for a token's top pair."""
  items: [Event]

  """A cursor for use in pagination."""
  cursor: String
}

"""Event-specific data for a token transaction."""
union EventData = BurnEventData | MintEventData | SwapEventData

"""
A more specific breakdown of `EventType`. Splits `Swap` into `Buy` and `Sell`.
"""
enum EventDisplayType {
  Burn
  Mint
  Buy
  Sell
  Sync
  Collect
  CollectProtocol
}

input EventInputUnion {
  swapEventInput: SwapEventInput
  mintEventInput: MintEventInput
  burnEventInput: BurnEventInput
}

"""Metadata for an event label."""
type EventLabel {
  """Specific data for the event label type."""
  data: EventLabelData!

  """The ID of the pair (`address`:`networkId`)."""
  id: String!

  """The event label type."""
  label: EventLabelType!

  """The index of the log in the block."""
  logIndex: Int!

  """The network ID the pair is deployed on."""
  networkId: Int!

  """The unix timestamp for the transaction."""
  timestamp: Int!

  """The index of the transaction within the block."""
  transactionIndex: Int!

  """The unique hash for the transaction."""
  transactionHash: String!
}

"""Response returned by `getEventLabels`."""
type EventLabelConnection {
  """A list of event labels for a pair."""
  items: [EventLabel]

  """The cursor to use for pagination."""
  cursor: String
}

"""Specific data for an event label."""
union EventLabelData = FrontRunLabelData | SandwichedLabelData

"""The event label type."""
enum EventLabelType {
  FrontRun
  Sandwiched
}

"""Input type of `EventQueryTimestamp`."""
input EventQueryTimestampInput {
  """The unix timestamp for the start of the requested range."""
  from: Int!

  """The unix timestamp for the end of the requested range."""
  to: Int!
}

"""Input type of `EventsQuery`."""
input EventsQueryInput {
  """The pair contract address to filter by."""
  address: String!

  """The token of interest. Can be `token0` or `token1`."""
  quoteToken: QuoteToken

  """The amount of `quoteToken` involved in the swap."""
  amountNonLiquidityToken: NumberFilter

  """The list of event display types to filter by."""
  eventDisplayType: [EventDisplayType]

  """The specific event type to filter by."""
  eventType: EventType

  """The specific wallet address to filter by."""
  maker: String

  """The network ID to filter by."""
  networkId: Int!

  """The time range to filter by."""
  timestamp: EventQueryTimestampInput

  """
  The price per `quoteToken` at the time of the swap in the network's base token.
  """
  priceBaseToken: NumberFilter

  """
  The total amount of `quoteToken` involved in the swap in the network's base token (`amountNonLiquidityToken` x `priceBaseToken`).
  """
  priceBaseTokenTotal: NumberFilter

  """The price per `quoteToken` at the time of the swap in USD."""
  priceUsd: NumberFilter

  """
  The total amount of `quoteToken` involved in the swap in USD (`amountNonLiquidityToken` x `priceUsd`).
  """
  priceUsdTotal: NumberFilter
}

"""The event type for a token transaction."""
enum EventType {
  Burn
  Mint
  Swap
  Sync
  Collect
  CollectProtocol
}

"""Metadata for a decentralized exchange."""
type Exchange {
  """The contract address of the exchange."""
  address: String!

  """The hex string for the exchange color."""
  color: String

  """The ID of the exchange (`address:id`)."""
  id: String!

  """The name of the exchange."""
  name: String

  """The version of the exchange, if applicable."""
  exchangeVersion: String

  """The exchange logo URL."""
  iconUrl: String

  """The network ID the exchange is deployed on."""
  networkId: Int!

  """The URL for the exchange."""
  tradeUrl: String
}

"""Response returned by `filterExchanges`."""
type ExchangeFilterConnection {
  """The list of exchanges matching the filter parameters."""
  results: [ExchangeFilterResult]

  """The number of exchanges returned."""
  count: Int

  """Where in the list the server started when returning items."""
  offset: Int
}

"""An exchange matching a set of filter parameters."""
type ExchangeFilterResult {
  """Exchange metadata."""
  exchange: FilterExchange

  """The number of transactions on the exchange in the past hour."""
  txnCount1: String

  """The number of transactions on the exchange in the past 4 hours."""
  txnCount4: String

  """The number of transactions on the exchange in the past 12 hours."""
  txnCount12: String

  """The number of transactions on the exchange in the past 24 hours."""
  txnCount24: String

  """The trade volume in USD in the past hour."""
  volumeUSD1: String

  """The trade volume in USD in the past 4 hours."""
  volumeUSD4: String

  """The trade volume in USD in the past 12 hours."""
  volumeUSD12: String

  """The trade volume in USD in the past 24 hours."""
  volumeUSD24: String

  """The trade volume in the network's base token in the past hour."""
  volumeNBT1: String

  """The trade volume in the network's base token in the past 4 hours."""
  volumeNBT4: String

  """The trade volume in the network's base token in the past 12 hours."""
  volumeNBT12: String

  """The trade volume in the network's base token in the past 24 hours."""
  volumeNBT24: String

  """The total unique daily active users."""
  dailyActiveUsers: Int

  """The total unique monthly active users (30 days)."""
  monthlyActiveUsers: Int
}

"""Input type of `ExchangeFilters`."""
input ExchangeFilters {
  """The number of transactions on the exchange in the past hour."""
  txnCount1: StringFilter

  """The number of transactions on the exchange in the past 4 hours."""
  txnCount4: StringFilter

  """The number of transactions on the exchange in the past 12 hours."""
  txnCount12: StringFilter

  """The number of transactions on the exchange in the past 24 hours."""
  txnCount24: StringFilter

  """The trade volume in USD in the past hour."""
  volumeUSD1: StringFilter

  """The trade volume in USD in the past 4 hours."""
  volumeUSD4: StringFilter

  """The trade volume in USD in the past 12 hours."""
  volumeUSD12: StringFilter

  """The trade volume in USD in the past 24 hours."""
  volumeUSD24: StringFilter

  """The trade volume in the network's base token in the past hour."""
  volumeNBT1: StringFilter

  """The trade volume in the network's base token in the past 4 hours."""
  volumeNBT4: StringFilter

  """The trade volume in the network's base token in the past 12 hours."""
  volumeNBT12: StringFilter

  """The trade volume in the network's base token in the past 24 hours."""
  volumeNBT24: StringFilter

  """The total unique daily active users."""
  dailyActiveUsers: NumberFilter

  """The total unique monthly active users (30 days)."""
  monthlyActiveUsers: NumberFilter

  """The list of exchange contract addresses to filter by."""
  address: [String]

  """The list of network IDs to filter by."""
  network: [Int]
}

"""Input type of `ExchangeRanking`."""
input ExchangeRanking {
  """The attribute to rank exchanges by."""
  attribute: ExchangeRankingAttribute

  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank exchanges."""
enum ExchangeRankingAttribute {
  txnCount1
  txnCount4
  txnCount12
  txnCount24
  volumeUSD1
  volumeUSD4
  volumeUSD12
  volumeUSD24
  volumeNBT1
  volumeNBT4
  volumeNBT12
  volumeNBT24
  dailyActiveUsers
  monthlyActiveUsers
}

"""Third party token data sourced from off chain."""
type ExplorerTokenData {
  """The ID of the token (`address:networkId`)."""
  id: String!

  """Whether the token has been verified on CoinGecko."""
  blueCheckmark: Boolean

  """A description of the token."""
  description: String

  """The precision to which the token can be divided."""
  divisor: String

  """The token price in USD."""
  tokenPriceUSD: String

  """The token type."""
  tokenType: String
}

"""Filter for fillsource based NFT stats."""
input FillsourceStatsFilter {
  """The fillsource to target for the current window."""
  fillsource: String!

  """The total value for the current window."""
  current: NumberFilter

  """The total value for the previous window."""
  previous: NumberFilter

  """The percent change between the `current` and `previous`."""
  change: NumberFilter
}

"""Metadata for an exchange."""
type FilterExchange {
  """The address for the exchange factory contract."""
  address: String!

  """The ID of the exchange (`address:networkId`)."""
  id: String!

  """The name of the exchange."""
  name: String

  """The version of the exchange. For example, `3` for UniswapV3."""
  exchangeVersion: String

  """The URL for the exchange's icon."""
  iconUrl: String

  """The network ID the factory is deployed on."""
  networkId: Int!

  """The URL for the exchange's trading platform."""
  tradeUrl: String
}

"""Metadata for a front-run label"""
type FrontRunLabelData {
  """The index of the front-run label. Can be 0 or 1."""
  index: Int

  """The amount of `token0` drained in the attack."""
  token0DrainedAmount: String!

  """The amount of `token1` drained in the attack."""
  token1DrainedAmount: String!
}

"""Input type of `getDetailedPairsStats`."""
input GetDetailedPairsStatsInput {
  """The contract address of the pair."""
  pairAddress: String!

  """The network ID the pair is deployed on."""
  networkId: Int!

  """
  The token of interest used to calculate token-specific stats for the pair. Can be `token0` or `token1`.
  """
  tokenOfInterest: TokenOfInterest

  """The unix timestamp for the stats. Defaults to current."""
  timestamp: Int

  """The list of durations to get detailed pair stats for."""
  durations: [DetailedPairStatsDuration]

  """
  The number of aggregated values to receive. Note: Each duration has predetermined bucket sizes.<br>  The first n-1 buckets are historical. The last bucket is a snapshot of current data.<br> duration `day1`: 6 buckets (4 hours each) plus 1 partial bucket<br> duration `hour12`: 12 buckets (1 hour each) plus 1 partial bucket<br> duration `hour4`: 8 buckets (30 min each) plus 1 partial bucket<br> duration `hour1`: 12 buckets (5 min each) plus 1 partial bucket<br> duration `min5`: 5 buckets (1 min each) plus 1 partial bucket<br> For example, requesting 11 buckets for a `min5` duration will return the last 10 minutes worth of data plus a snapshot for the current minute.
  """
  bucketCount: Int

  """docs: hide"""
  statsType: TokenPairStatisticsType
}

"""Response returned by `getNftPoolCollectionsByExchange`."""
type GetNftPoolCollectionsResponse {
  """A list of NFT collections."""
  items: [NftPoolCollectionResponse]

  """A cursor for use in pagination."""
  cursor: String
}

"""
Response returned by `getNftPoolsByCollectionAndExchange` and `getNftPoolsByOwner`.
"""
type GetNftPoolsResponse {
  """A list of NFT pools."""
  items: [NftPoolResponse]!

  """A cursor for use in pagination."""
  cursor: String
}

"""Input type of `getTokenPrices`."""
input GetPriceInput {
  """The contract address of the token."""
  address: String!

  """The network ID the token is deployed on."""
  networkId: Int!

  """
  The unix timestamp for the price. Lookup is limited to the last three months.
  """
  timestamp: Int

  """
  The maximum number of deviations from the token's Liquidity-Weighted Mean Price. This is used to mitigate low liquidity pairs producing prices that are not representative of reality. Default is `1`.
  """
  maxDeviations: Float @deprecated(reason: "This isn't taken into account anymore.")
}

"""Input type of `getTokensInfo`."""
input GetTokensInfoInput {
  """The contract address of the token."""
  address: String!

  """The network ID the token is deployed on."""
  networkId: Int!
}

type GetWebhooksResponse {
  items: [Webhook]
  cursor: String
}

"""The pool variant."""
enum GraphQlNftPoolVariant {
  ERC20
  NATIVE
}

input HoldersInput {
  tokenId: String!
  cursor: String
}

type HoldersResponse {
  items: [Balance!]!
  count: Int!
  cursor: String
  status: HoldersStatus!
}

enum HoldersStatus {
  ENABLED
  DISABLED
}

"""Bar chart data."""
type IndividualBarData {
  """The opening price."""
  o: Float!

  """The high price."""
  h: Float!

  """The low price."""
  l: Float!

  """The closing price."""
  c: Float!

  """The volume."""
  v: Int

  """The timestamp for the bar."""
  t: Int!

  """The volume with higher precision."""
  volume: String!

  """The volume in the network's base token"""
  volumeNativeToken: String!
}

input IndividualBarInput {
  o: Float!
  h: Float!
  l: Float!
  c: Float!
  v: Int
  t: Int!
  volume: String!
  volumeNativeToken: String
}

type IntEqualsCondition {
  eq: Int!
}

input IntEqualsConditionInput {
  eq: Int!
}

scalar join__FieldSet

enum join__Graph {
  DECODINGS
  META
  NFTS
  SUBSCRIPTIONS
  TOKENS
  USERS
}

scalar JSON

"""Event labels. Can be `sandwich` or `washtrade`."""
type LabelsForEvent {
  sandwich: SandwichLabelForEvent
  washtrade: WashtradeLabelForEvent
}

"""Metadata for a newly listed pair."""
type LatestPair {
  """The contract address for the pair."""
  address: String!

  """The contract address for the exchange."""
  exchangeHash: String!

  """The ID of the pair (`address`:`networkId`)."""
  id: String!

  """The listing price, or first known price for the pair, in USD."""
  initialPriceUsd: String!

  """The unix timestamp for when liquidity was added to the pair."""
  liquidAt: Int

  """The total liquidity in the pair."""
  liquidity: String!

  """
  The token with higher liquidity within the pair. Can be `token0` or `token1`.
  """
  liquidityToken: String

  """The network ID the pair is deployed on."""
  networkId: Int!

  """The newly added token within the pair. Can be `token0` or `token1`."""
  newToken: String!

  """
  The token with lower liquidity within the pair. Can be `token0` or `token1`.
  """
  nonLiquidityToken: String

  """The pre-existing token within the pair. Can be `token0` or `token1`."""
  oldToken: String!

  """
  The percent price change between the listing price and the current price.
  """
  priceChange: Float!

  """The newly added token price in USD."""
  priceUsd: String!

  """Metadata for `token0`."""
  token0: LatestPairToken!

  """Metadata for `token1`."""
  token1: LatestPairToken!

  """
  The unique hash for the transaction that added liquidity, if applicable, otherwise the transaction that added the pair.
  """
  transactionHash: String!
}

"""Response returned by `getLatestPairs`."""
type LatestPairConnection {
  """A list of newly listed pairs."""
  items: [LatestPair!]!

  """A cursor for use in pagination."""
  cursor: String
}

"""Metadata for a token within a newly listed pair."""
type LatestPairToken {
  """The contract address for the token."""
  address: String!

  """The amount of `token` currently in the pair."""
  currentPoolAmount: String!

  """
  The precision to which the token can be divided. For example, the smallest unit for USDC is 0.000001 (6 decimals).
  """
  decimals: Int!

  """The ID of the token (`address`:`networkId`)."""
  id: String!

  """The initial amount of `token` added to the pair."""
  initialPoolAmount: String!

  """The name of the token."""
  name: String!

  """The network ID the token is deployed on."""
  networkId: Int!

  """The ID of the pair (`pairAddress`:`networkId`)."""
  pairId: String!

  """
  The percent change `token` remaining in the pair since the initial add.
  """
  poolVariation: Float!

  """The symbol for the token."""
  symbol: String!
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

"""Response returned by `listPairsWithMetadataForToken`."""
type ListPairsForTokenResponse {
  """A list of pairs containing a given token."""
  results: [ListPairsForTokenValue]!
}

"""Metadata for a pair containing a given token."""
type ListPairsForTokenValue {
  """The volume for the pair in USD."""
  volume: String!

  """The total liquidity in the pair."""
  liquidity: String!

  """Metadata for token with higher liquidity within the pair."""
  token: EnhancedToken!

  """Metadata for token with lower liquidity within the pair."""
  backingToken: EnhancedToken!

  """Metadata for the pair."""
  pair: Pair!

  """Exchange metadata for the pair."""
  exchange: Exchange!

  """The token of interest within the pair. Can be `token0` or `token1`."""
  quoteToken: QuoteToken
}

"""The status for a network supported on Defined."""
type MetadataResponse {
  """The last processed block on the network."""
  lastProcessedBlock: Int

  """The unix timestamp for the last processed block on the network."""
  lastProcessedTimestamp: Int

  """The network ID."""
  networkId: Int!

  """The name of the network."""
  networkName: String!
}

"""Event data for a token mint event."""
type MintEventData {
  """The amount of `token0` added to the pair."""
  amount0: String

  """The amount of `token1` added to the pair."""
  amount1: String

  """
  The amount of `token0` added to the pair, adjusted by the number of decimals in the token. For example, if `amount0` is in WEI, `amount0Shifted` will be in ETH.
  """
  amount0Shifted: String

  """
  The amount of `token1` added to the pair, adjusted by the number of decimals in the token. For example, USDC `amount1Shifted` will be by 6 decimals.
  """
  amount1Shifted: String

  """
  The lower tick boundary of the position. Only applicable for UniswapV3 events.
  """
  tickLower: String

  """
  The upper tick boundary of the position. Only applicable for UniswapV3 events.
  """
  tickUpper: String

  """The type of token event, `Mint`."""
  type: EventType!
}

input MintEventDataInput {
  amount0: String
  amount1: String
  amount0Shifted: String
  amount1Shifted: String
  tickLower: String
  tickUpper: String
  type: EventType!
}

input MintEventInput {
  address: String!
  baseTokenPrice: String
  blockHash: String!
  blockNumber: Int!
  data: MintEventDataInput
  id: String!
  liquidityToken: String
  logIndex: Int!
  maker: String
  networkId: Int!
  quoteToken: QuoteToken
  timestamp: Int!
  token0ValueBase: String
  token1ValueBase: String
  token0SwapValueUsd: String
  token1SwapValueUsd: String
  token0PoolValueUsd: String
  token1PoolValueUsd: String
  transactionHash: String!
  transactionIndex: Int!
  eventDisplayType: EventDisplayType
}

type Mutation {
  createWebhooks(input: CreateWebhooksInput!): CreateWebhooksOutput!
  deleteWebhooks(input: DeleteWebhooksInput!): DeleteWebhooksOutput
}

"""A network supported on Defined."""
type Network {
  """The name of the network. For example, `arbitrum`."""
  name: String!

  """The network ID. For example, `42161` for `arbitrum`."""
  id: Int!
}

"""Event data for creating a new NFT pool."""
type NewPoolEventData {
  """The type of NFT pool event, `NEW_POOL`."""
  type: NftPoolEventType!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The contract address of the NFT pool."""
  poolAddress: String!

  """The contract address of the NFT collection."""
  collectionAddress: String!

  """
  The contract address of the liquidity token of the pool (usually WETH).
  """
  tokenAddress: String!

  """The wallet address of the pool owner."""
  ownerAddress: String!

  """
  The wallet address that will receive the tokens or NFT sent to the pair during swaps.
  """
  assetRecipientAddress: String!

  """The contract address of the bonding curve."""
  bondingCurveAddress: String!

  """
  The bonding curve type that defines how the prices of NFTs change after each buy or sell within a pool.
  """
  bondingCurveType: BondingCurveType!

  """The initial delta used in the bonding curve."""
  delta: String!

  """The pool fee amount in the pool's liquidity token."""
  feeAmountT: String!

  """The initial spot price in the pool's liquidity token."""
  startPriceT: String!

  """
  The initial price at which the pool is willing to buy an NFT in the pool's liquidity token.
  """
  buyPriceT: String!

  """
  The initial price at which the pool is willing to sell an NFT in the pool's liquidity token.
  """
  sellPriceT: String!

  """The unix timestamp for the time the pool was created."""
  createdAt: Int!

  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for creating a new NFT pool."""
type NewPoolEventDataV2 {
  """The type of NFT pool event, `NEW_POOL`."""
  type: NftPoolEventType!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The contract address of the NFT pool."""
  poolAddress: String!

  """The contract address of the NFT collection."""
  collectionAddress: String!

  """
  The contract address of the liquidity token of the pool (usually WETH).
  """
  tokenAddress: String!

  """The wallet address of the pool owner."""
  ownerAddress: String!

  """
  The wallet address that will receive the tokens or NFT sent to the pair during swaps.
  """
  assetRecipientAddress: String!

  """The contract address of the bonding curve."""
  bondingCurveAddress: String!

  """
  The bonding curve type that defines how the prices of NFTs change after each buy or sell within a pool.
  """
  bondingCurveType: BondingCurveType!

  """The initial delta used in the bonding curve."""
  delta: String!

  """The pool fee amount in the pool's liquidity token."""
  feeAmountT: String!

  """The initial spot price in the pool's liquidity token."""
  startPriceT: String!

  """
  The initial price at which the pool is willing to buy an NFT in the pool's liquidity token.
  """
  buyPriceT: String!

  """
  The initial price at which the pool is willing to sell an NFT in the pool's liquidity token.
  """
  sellPriceT: String!

  """The unix timestamp for the time the pool was created."""
  createdAt: Int!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!

  """The list of NFT token IDs initially deposited."""
  nftTokenIds: [String!]!

  """The amount of each NFT token initially deposited."""
  nftTokenQuantities: [String]!

  """The type of NFT in the pool."""
  poolNftType: PoolNftType!

  """
  The list of royalties for the pool. Only applicable for `SUDOSWAP_V2` pools.
  """
  royalties: [NftPoolRoyalty]

  """The property checker contract address for the pool."""
  propertyChecker: String
}

"""An NFT asset."""
type NftAsset {
  """The ID of the NFT asset (`address`:`tokenId`)."""
  id: String!

  """The contract address of the NFT collection."""
  address: String!

  """The token ID of the NFT asset."""
  tokenId: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The NFT asset media."""
  media: NftAssetMedia

  """The name of the NFT asset."""
  name: String

  """The description of the NFT asset."""
  description: String

  """The source image URI linked by smart contract metadata."""
  originalImage: String

  """
  The URI provided by the smart contract. Typically JSON that contains metadata.
  """
  uri: String

  """The attributes for the NFT asset."""
  attributes: [NftAssetAttribute!]

  """
  The number of NFT assets with the same NFT token ID. Only applicable for ERC1155 tokens.
  """
  quantity: String
}

"""Attributes for an NFT asset."""
type NftAssetAttribute {
  """
  Suggested class name to use for css styling. An optional attribute of ERC-1155 assets.
  """
  class: String

  """Suggested CSS styling. An optional attribute of ERC-1155 assets."""
  css: String

  """
  The attribute display type. Can be `Trait`, `Stat`, `Ranking`, `BoostNumber`, `BoostPercentage` or `Date`.
  """
  displayType: NftAssetAttributeDisplayType!

  """The max value, if applicable."""
  maxValue: String

  """The name of the attribute."""
  name: String!

  """The value of the attribute."""
  value: String!

  """The type for the `value` field. Can be `String`, `Number` or `Array`."""
  valueType: NftAssetAttributeType!
}

"""The display type for the NFT asset attribute."""
enum NftAssetAttributeDisplayType {
  Trait
  Stat
  Ranking
  BoostNumber
  BoostPercentage
  Date
}

"""The type for the NFT asset attribute `value` field."""
enum NftAssetAttributeType {
  String
  Number
  Array
}

"""NFT asset media."""
type NftAssetMedia {
  """The URL for a full size image of the NFT asset."""
  image: String!

  """The URL for small generated thumbnail of the NFT asset."""
  thumbSm: String!

  """The URL for large generated thumbnail of the NFT asset."""
  thumbLg: String!

  """Whether the NFT asset media has finished processing."""
  processed: Boolean
}

input NftAssetMediaInput {
  """The URL for a full size image of the NFT asset."""
  image: String

  """The URL for small generated thumbnail of the NFT asset."""
  thumbSm: String

  """The URL for large generated thumbnail of the NFT asset."""
  thumbLg: String

  """Whether the NFT asset media has finished processing."""
  processed: Boolean
}

"""Response returned by `getNftAssets`."""
type NftAssetsConnection {
  """A list of NFT assets."""
  items: [NftAsset]

  """A cursor for use in pagination."""
  cursor: String
}

"""
Price stats for an NFT collection over a time frame. Either in USD or the network's base token.
"""
type NftCollectionCurrencyStats {
  """The volume over the time frame."""
  volume: NftStatsStringMetrics

  """The volume partitioned by fillsource over the time frame"""
  volumeByFillsource: [NftFillsourceStatsStringMetrics]

  """
  The percentages of total volume partitioned by fillsource over the time frame
  """
  volumePercentByFillsource: [NftFillsourceStatsNumberMetrics]

  """The average sale price in the time frame."""
  average: NftStatsStringMetrics

  """The opening price for the time frame."""
  open: NftStatsStringMetrics

  """The closing price for the time frame."""
  close: NftStatsStringMetrics

  """The lowest sale price in the time frame."""
  lowestSale: NftStatsStringMetrics

  """The highest sale price in the time frame."""
  highestSale: NftStatsStringMetrics

  """The lowest listing price for the time frame."""
  listingFloor: NftStatsStringMetrics

  """The opening floor listing price for the time frame."""
  openListingFloor: NftStatsStringMetrics

  """The closing floor listing price for the time frame."""
  closeListingFloor: NftStatsStringMetrics

  """The highest listing price in the time frame."""
  highestListingFloor: NftStatsStringMetrics
}

"""Stat and change for a string based fillsource amount."""
type NftCollectionFillsourceNumberStat {
  """
  The marketplace that filled the NFT order volume. (ex. OPENSEA, BLUR, etc.)
  """
  fillsource: String!

  """The amount of the stat traded in the current time frame."""
  amount: Float!

  """
  The change in fillsource volume between the previous and current time frame.
  """
  change: Float
}

"""Stat and change for a string based fillsource amount."""
type NftCollectionFillsourceStringStat {
  """
  The marketplace that filled the NFT order volume. (ex. OPENSEA, BLUR, etc.)
  """
  fillsource: String!

  """The amount of the stat traded in the current time frame."""
  amount: String!

  """
  The change in fillsource volume between the previous and current time frame.
  """
  change: Float
}

"""Response returned by `filterNftCollections`."""
type NftCollectionFilterConnection {
  """The list of NFT collections matching the filter parameters."""
  results: [NftCollectionFilterResult]

  """The number of NFT collections returned."""
  count: Int

  """Where in the list the server started when returning items."""
  offset: Int
}

"""An NFT collection matching a set of filter parameters."""
type NftCollectionFilterResult {
  """The ID of the NFT collection (`address`:`networkId`)."""
  id: String

  """The contract address of the NFT collection."""
  address: String

  """
  The marketplace address or `all`. Can be used to get marketplace-specific metrics.
  """
  grouping: String

  """The network ID the NFT collection is deployed on."""
  networkId: Int

  """The name of the NFT collection."""
  name: String

  """The symbol of the NFT collection."""
  symbol: String

  """The unix timestamp for the last event."""
  lastEventTimestamp: Int

  """The token standard. Can be a variation of `ERC-721` or `ERC-1155`."""
  ercType: String

  """
  The image URL for the collection or one of the assets within the collection.
  """
  imageUrl: String

  """The total supply of the NFT collection."""
  totalSupply: String

  """
  The unix timestamp indicating the last time the data was updated. Updates daily.
  """
  timestamp: Int

  """Stats for the past hour."""
  stats1h: NftStatsWindowWithChange

  """Stats for the past 4 hours."""
  stats4h: NftStatsWindowWithChange

  """Stats for the past 12 hours."""
  stats12h: NftStatsWindowWithChange

  """Stats for the past 24 hours."""
  stats24h: NftStatsWindowWithChange
}

"""Input filters for `filterNftCollections`."""
input NftCollectionFilters {
  """The total supply of the NFT collection."""
  totalSupply: NumberFilter

  """The unix timestamp for the last event."""
  lastEventTimestamp: NumberFilter

  """The list of token standards to filter by."""
  ercType: [NftContractErcType]

  """The list of network IDs to filter by."""
  network: [Int]

  """Stats for the past hour."""
  stats1h: NftStatsWindowFilter

  """Stats for the past 4 hours."""
  stats4h: NftStatsWindowFilter

  """Stats for the past 12 hours."""
  stats12h: NftStatsWindowFilter

  """Stats for the past 24 hours."""
  stats24h: NftStatsWindowFilter
}

"""Response returned by `getNftCollectionMetadata`."""
type NftCollectionMetadataResponse {
  """The ID of the NFT collection (`address`:`networkId`)."""
  id: String!

  """Metadata for the NFT collection."""
  contract: NftContract!

  """A list of stats for the NFT collection across different time frames."""
  stats: [NftCollectionWindowStats]

  """The media for one of the assets within the NFT collection."""
  media: NftAssetMedia
}

"""Numerical stats for an NFT collection over a time frame."""
type NftCollectionNonCurrencyStats {
  """The number of mints over the time frame."""
  mints: NftStatsNumberMetrics

  """The number of sales over the time frame."""
  sales: NftStatsNumberMetrics

  """The number of tokens sold over the time frame."""
  tokensSold: NftStatsStringMetrics

  """The number of transfers over the time frame."""
  transfers: NftStatsNumberMetrics

  """The number of unique buyers over the time frame."""
  uniqueBuyers: NftStatsNumberMetrics

  """The number of unique sellers over the time frame."""
  uniqueSellers: NftStatsNumberMetrics

  """The number of unique wallets (buyers or sellers) over the time frame."""
  uniqueSalesWallets: NftStatsNumberMetrics

  """The number of unique minters over the time frame."""
  uniqueMinters: NftStatsNumberMetrics
}

"""
Price stats for an NFT collection over a time frame. Either in USD or the network's base token.
"""
type NftCollectionPriceStats {
  """The trade volume."""
  volume: String!

  """The lowest sale price."""
  floor: String!

  """The average sale price."""
  average: String!

  """The highest sale price."""
  ceiling: String!

  """The lowest listing price."""
  listingFloor: String

  """The change in volume between the previous and current time frame."""
  volumeChange: Float

  """The change in floor price between the previous and current time frame."""
  floorChange: Float

  """
  The change in floor listing price between the previous and current time frame.
  """
  listingFloorChange: Float

  """
  The change in average price between the previous and current time frame.
  """
  averageChange: Float

  """
  The change in ceiling price between the previous and current time frame.
  """
  ceilingChange: Float

  """The volume partitioned by fillsource over the time frame"""
  volumeByFillsource: [NftCollectionFillsourceStringStat]

  """
  The percentages of total volume partitioned by fillsource over the time frame
  """
  volumePercentByFillsource: [NftCollectionFillsourceNumberStat]
}

"""Input type of `NftCollectionRanking`."""
input NftCollectionRanking {
  """The attribute to rank NFT collections by."""
  attribute: NftCollectionRankingAttribute

  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank NFT collections."""
enum NftCollectionRankingAttribute {
  totalSupply
  lastEventTimestamp
  stats1hUsdVolumeCurrent
  stats1hUsdVolumePrevious
  stats1hUsdVolumeChange
  stats1hUsdVolumeByFillsourceOpenseaCurrent
  stats1hUsdVolumeByFillsourceOpenseaChange
  stats1hUsdVolumeByFillsourceOpenseaPrevious
  stats1hUsdVolumeByFillsourceOpenseaProCurrent
  stats1hUsdVolumeByFillsourceOpenseaProChange
  stats1hUsdVolumeByFillsourceOpenseaProPrevious
  stats1hUsdVolumeByFillsourceSeaportCurrent
  stats1hUsdVolumeByFillsourceSeaportChange
  stats1hUsdVolumeByFillsourceSeaportPrevious
  stats1hUsdVolumeByFillsourceX2Y2Current
  stats1hUsdVolumeByFillsourceX2Y2Change
  stats1hUsdVolumeByFillsourceX2Y2Previous
  stats1hUsdVolumeByFillsourceLooksrareCurrent
  stats1hUsdVolumeByFillsourceLooksrareChange
  stats1hUsdVolumeByFillsourceLooksrarePrevious
  stats1hUsdVolumeByFillsourceLooksrareV2Current
  stats1hUsdVolumeByFillsourceLooksrareV2Change
  stats1hUsdVolumeByFillsourceLooksrareV2Previous
  stats1hUsdVolumeByFillsourceBlurCurrent
  stats1hUsdVolumeByFillsourceBlurChange
  stats1hUsdVolumeByFillsourceBlurPrevious
  stats1hUsdVolumeByFillsourceBlurV2Current
  stats1hUsdVolumeByFillsourceBlurV2Change
  stats1hUsdVolumeByFillsourceBlurV2Previous
  stats1hUsdVolumeByFillsourceBlendCurrent
  stats1hUsdVolumeByFillsourceBlendChange
  stats1hUsdVolumeByFillsourceBlendPrevious
  stats1hUsdVolumeByFillsourceGemCurrent
  stats1hUsdVolumeByFillsourceGemChange
  stats1hUsdVolumeByFillsourceGemPrevious
  stats1hUsdVolumeByFillsourceSudoswapCurrent
  stats1hUsdVolumeByFillsourceSudoswapChange
  stats1hUsdVolumeByFillsourceSudoswapPrevious
  stats1hUsdVolumeByFillsourceSudoswapV2Current
  stats1hUsdVolumeByFillsourceSudoswapV2Change
  stats1hUsdVolumeByFillsourceSudoswapV2Previous
  stats1hUsdVolumeByFillsourceCryptopunksCurrent
  stats1hUsdVolumeByFillsourceCryptopunksChange
  stats1hUsdVolumeByFillsourceCryptopunksPrevious
  stats1hUsdAverageCurrent
  stats1hUsdAveragePrevious
  stats1hUsdAverageChange
  stats1hUsdOpenCurrent
  stats1hUsdOpenPrevious
  stats1hUsdOpenChange
  stats1hUsdCloseCurrent
  stats1hUsdClosePrevious
  stats1hUsdCloseChange
  stats1hUsdLowestSaleCurrent
  stats1hUsdLowestSalePrevious
  stats1hUsdLowestSaleChange
  stats1hUsdHighestSaleCurrent
  stats1hUsdHighestSalePrevious
  stats1hUsdHighestSaleChange
  stats1hUsdListingFloorCurrent
  stats1hUsdListingFloorPrevious
  stats1hUsdListingFloorChange
  stats1hUsdOpenListingFloorCurrent
  stats1hUsdOpenListingFloorPrevious
  stats1hUsdOpenListingFloorChange
  stats1hUsdCloseListingFloorCurrent
  stats1hUsdCloseListingFloorPrevious
  stats1hUsdCloseListingFloorChange
  stats1hUsdHighestListingFloorCurrent
  stats1hUsdHighestListingFloorPrevious
  stats1hUsdHighestListingFloorChange
  stats1hNetworkBaseTokenVolumeCurrent
  stats1hNetworkBaseTokenVolumePrevious
  stats1hNetworkBaseTokenVolumeChange
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaChange
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaProCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaProChange
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaProPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceSeaportCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceSeaportChange
  stats1hNetworkBaseTokenVolumeByFillsourceSeaportPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceX2Y2Current
  stats1hNetworkBaseTokenVolumeByFillsourceX2Y2Change
  stats1hNetworkBaseTokenVolumeByFillsourceX2Y2Previous
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrareCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrareChange
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrarePrevious
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrareV2Current
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrareV2Change
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrareV2Previous
  stats1hNetworkBaseTokenVolumeByFillsourceBlurCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceBlurChange
  stats1hNetworkBaseTokenVolumeByFillsourceBlurPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceBlurV2Current
  stats1hNetworkBaseTokenVolumeByFillsourceBlurV2Change
  stats1hNetworkBaseTokenVolumeByFillsourceBlurV2Previous
  stats1hNetworkBaseTokenVolumeByFillsourceBlendCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceBlendChange
  stats1hNetworkBaseTokenVolumeByFillsourceBlendPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceGemCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceGemChange
  stats1hNetworkBaseTokenVolumeByFillsourceGemPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapChange
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapV2Current
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapV2Change
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapV2Previous
  stats1hNetworkBaseTokenVolumeByFillsourceCryptopunksCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceCryptopunksChange
  stats1hNetworkBaseTokenVolumeByFillsourceCryptopunksPrevious
  stats1hNetworkBaseTokenAverageCurrent
  stats1hNetworkBaseTokenAveragePrevious
  stats1hNetworkBaseTokenAverageChange
  stats1hNetworkBaseTokenOpenCurrent
  stats1hNetworkBaseTokenOpenPrevious
  stats1hNetworkBaseTokenOpenChange
  stats1hNetworkBaseTokenCloseCurrent
  stats1hNetworkBaseTokenClosePrevious
  stats1hNetworkBaseTokenCloseChange
  stats1hNetworkBaseTokenLowestSaleCurrent
  stats1hNetworkBaseTokenLowestSalePrevious
  stats1hNetworkBaseTokenLowestSaleChange
  stats1hNetworkBaseTokenHighestSaleCurrent
  stats1hNetworkBaseTokenHighestSalePrevious
  stats1hNetworkBaseTokenHighestSaleChange
  stats1hNetworkBaseTokenListingFloorCurrent
  stats1hNetworkBaseTokenListingFloorPrevious
  stats1hNetworkBaseTokenListingFloorChange
  stats1hNetworkBaseTokenOpenListingFloorCurrent
  stats1hNetworkBaseTokenOpenListingFloorPrevious
  stats1hNetworkBaseTokenOpenListingFloorChange
  stats1hNetworkBaseTokenCloseListingFloorCurrent
  stats1hNetworkBaseTokenCloseListingFloorPrevious
  stats1hNetworkBaseTokenCloseListingFloorChange
  stats1hNetworkBaseTokenHighestListingFloorCurrent
  stats1hNetworkBaseTokenHighestListingFloorPrevious
  stats1hNetworkBaseTokenHighestListingFloorChange
  stats1hNonCurrencyMintsCurrent
  stats1hNonCurrencyMintsPrevious
  stats1hNonCurrencyMintsChange
  stats1hNonCurrencySalesCurrent
  stats1hNonCurrencySalesPrevious
  stats1hNonCurrencySalesChange
  stats1hNonCurrencyTokensSoldCurrent
  stats1hNonCurrencyTokensSoldPrevious
  stats1hNonCurrencyTokensSoldChange
  stats1hNonCurrencyTransfersCurrent
  stats1hNonCurrencyTransfersPrevious
  stats1hNonCurrencyTransfersChange
  stats1hNonCurrencyUniqueBuyersCurrent
  stats1hNonCurrencyUniqueBuyersPrevious
  stats1hNonCurrencyUniqueBuyersChange
  stats1hNonCurrencyUniqueSellersCurrent
  stats1hNonCurrencyUniqueSellersPrevious
  stats1hNonCurrencyUniqueSellersChange
  stats1hNonCurrencyUniqueSalesWalletsCurrent
  stats1hNonCurrencyUniqueSalesWalletsPrevious
  stats1hNonCurrencyUniqueSalesWalletsChange
  stats1hNonCurrencyUniqueMintersCurrent
  stats1hNonCurrencyUniqueMintersPrevious
  stats1hNonCurrencyUniqueMintersChange
  stats4hUsdVolumeCurrent
  stats4hUsdVolumePrevious
  stats4hUsdVolumeChange
  stats4hUsdVolumeByFillsourceOpenseaCurrent
  stats4hUsdVolumeByFillsourceOpenseaChange
  stats4hUsdVolumeByFillsourceOpenseaPrevious
  stats4hUsdVolumeByFillsourceOpenseaProCurrent
  stats4hUsdVolumeByFillsourceOpenseaProChange
  stats4hUsdVolumeByFillsourceOpenseaProPrevious
  stats4hUsdVolumeByFillsourceSeaportCurrent
  stats4hUsdVolumeByFillsourceSeaportChange
  stats4hUsdVolumeByFillsourceSeaportPrevious
  stats4hUsdVolumeByFillsourceX2Y2Current
  stats4hUsdVolumeByFillsourceX2Y2Change
  stats4hUsdVolumeByFillsourceX2Y2Previous
  stats4hUsdVolumeByFillsourceLooksrareCurrent
  stats4hUsdVolumeByFillsourceLooksrareChange
  stats4hUsdVolumeByFillsourceLooksrarePrevious
  stats4hUsdVolumeByFillsourceLooksrareV2Current
  stats4hUsdVolumeByFillsourceLooksrareV2Change
  stats4hUsdVolumeByFillsourceLooksrareV2Previous
  stats4hUsdVolumeByFillsourceBlurCurrent
  stats4hUsdVolumeByFillsourceBlurChange
  stats4hUsdVolumeByFillsourceBlurPrevious
  stats4hUsdVolumeByFillsourceBlurV2Current
  stats4hUsdVolumeByFillsourceBlurV2Change
  stats4hUsdVolumeByFillsourceBlurV2Previous
  stats4hUsdVolumeByFillsourceBlendCurrent
  stats4hUsdVolumeByFillsourceBlendChange
  stats4hUsdVolumeByFillsourceBlendPrevious
  stats4hUsdVolumeByFillsourceGemCurrent
  stats4hUsdVolumeByFillsourceGemChange
  stats4hUsdVolumeByFillsourceGemPrevious
  stats4hUsdVolumeByFillsourceSudoswapCurrent
  stats4hUsdVolumeByFillsourceSudoswapChange
  stats4hUsdVolumeByFillsourceSudoswapPrevious
  stats4hUsdVolumeByFillsourceSudoswapV2Current
  stats4hUsdVolumeByFillsourceSudoswapV2Change
  stats4hUsdVolumeByFillsourceSudoswapV2Previous
  stats4hUsdVolumeByFillsourceCryptopunksCurrent
  stats4hUsdVolumeByFillsourceCryptopunksChange
  stats4hUsdVolumeByFillsourceCryptopunksPrevious
  stats4hUsdAverageCurrent
  stats4hUsdAveragePrevious
  stats4hUsdAverageChange
  stats4hUsdOpenCurrent
  stats4hUsdOpenPrevious
  stats4hUsdOpenChange
  stats4hUsdCloseCurrent
  stats4hUsdClosePrevious
  stats4hUsdCloseChange
  stats4hUsdLowestSaleCurrent
  stats4hUsdLowestSalePrevious
  stats4hUsdLowestSaleChange
  stats4hUsdHighestSaleCurrent
  stats4hUsdHighestSalePrevious
  stats4hUsdHighestSaleChange
  stats4hUsdListingFloorCurrent
  stats4hUsdListingFloorPrevious
  stats4hUsdListingFloorChange
  stats4hUsdOpenListingFloorCurrent
  stats4hUsdOpenListingFloorPrevious
  stats4hUsdOpenListingFloorChange
  stats4hUsdCloseListingFloorCurrent
  stats4hUsdCloseListingFloorPrevious
  stats4hUsdCloseListingFloorChange
  stats4hUsdHighestListingFloorCurrent
  stats4hUsdHighestListingFloorPrevious
  stats4hUsdHighestListingFloorChange
  stats4hNetworkBaseTokenVolumeCurrent
  stats4hNetworkBaseTokenVolumePrevious
  stats4hNetworkBaseTokenVolumeChange
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaChange
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaProCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaProChange
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaProPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceSeaportCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceSeaportChange
  stats4hNetworkBaseTokenVolumeByFillsourceSeaportPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceX2Y2Current
  stats4hNetworkBaseTokenVolumeByFillsourceX2Y2Change
  stats4hNetworkBaseTokenVolumeByFillsourceX2Y2Previous
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrareCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrareChange
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrarePrevious
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrareV2Current
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrareV2Change
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrareV2Previous
  stats4hNetworkBaseTokenVolumeByFillsourceBlurCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceBlurChange
  stats4hNetworkBaseTokenVolumeByFillsourceBlurPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceBlurV2Current
  stats4hNetworkBaseTokenVolumeByFillsourceBlurV2Change
  stats4hNetworkBaseTokenVolumeByFillsourceBlurV2Previous
  stats4hNetworkBaseTokenVolumeByFillsourceBlendCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceBlendChange
  stats4hNetworkBaseTokenVolumeByFillsourceBlendPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceGemCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceGemChange
  stats4hNetworkBaseTokenVolumeByFillsourceGemPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapChange
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapV2Current
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapV2Change
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapV2Previous
  stats4hNetworkBaseTokenVolumeByFillsourceCryptopunksCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceCryptopunksChange
  stats4hNetworkBaseTokenVolumeByFillsourceCryptopunksPrevious
  stats4hNetworkBaseTokenAverageCurrent
  stats4hNetworkBaseTokenAveragePrevious
  stats4hNetworkBaseTokenAverageChange
  stats4hNetworkBaseTokenOpenCurrent
  stats4hNetworkBaseTokenOpenPrevious
  stats4hNetworkBaseTokenOpenChange
  stats4hNetworkBaseTokenCloseCurrent
  stats4hNetworkBaseTokenClosePrevious
  stats4hNetworkBaseTokenCloseChange
  stats4hNetworkBaseTokenLowestSaleCurrent
  stats4hNetworkBaseTokenLowestSalePrevious
  stats4hNetworkBaseTokenLowestSaleChange
  stats4hNetworkBaseTokenHighestSaleCurrent
  stats4hNetworkBaseTokenHighestSalePrevious
  stats4hNetworkBaseTokenHighestSaleChange
  stats4hNetworkBaseTokenListingFloorCurrent
  stats4hNetworkBaseTokenListingFloorPrevious
  stats4hNetworkBaseTokenListingFloorChange
  stats4hNetworkBaseTokenOpenListingFloorCurrent
  stats4hNetworkBaseTokenOpenListingFloorPrevious
  stats4hNetworkBaseTokenOpenListingFloorChange
  stats4hNetworkBaseTokenCloseListingFloorCurrent
  stats4hNetworkBaseTokenCloseListingFloorPrevious
  stats4hNetworkBaseTokenCloseListingFloorChange
  stats4hNetworkBaseTokenHighestListingFloorCurrent
  stats4hNetworkBaseTokenHighestListingFloorPrevious
  stats4hNetworkBaseTokenHighestListingFloorChange
  stats4hNonCurrencyMintsCurrent
  stats4hNonCurrencyMintsPrevious
  stats4hNonCurrencyMintsChange
  stats4hNonCurrencySalesCurrent
  stats4hNonCurrencySalesPrevious
  stats4hNonCurrencySalesChange
  stats4hNonCurrencyTokensSoldCurrent
  stats4hNonCurrencyTokensSoldPrevious
  stats4hNonCurrencyTokensSoldChange
  stats4hNonCurrencyTransfersCurrent
  stats4hNonCurrencyTransfersPrevious
  stats4hNonCurrencyTransfersChange
  stats4hNonCurrencyUniqueBuyersCurrent
  stats4hNonCurrencyUniqueBuyersPrevious
  stats4hNonCurrencyUniqueBuyersChange
  stats4hNonCurrencyUniqueSellersCurrent
  stats4hNonCurrencyUniqueSellersPrevious
  stats4hNonCurrencyUniqueSellersChange
  stats4hNonCurrencyUniqueSalesWalletsCurrent
  stats4hNonCurrencyUniqueSalesWalletsPrevious
  stats4hNonCurrencyUniqueSalesWalletsChange
  stats4hNonCurrencyUniqueMintersCurrent
  stats4hNonCurrencyUniqueMintersPrevious
  stats4hNonCurrencyUniqueMintersChange
  stats12hUsdVolumeCurrent
  stats12hUsdVolumePrevious
  stats12hUsdVolumeChange
  stats12hUsdVolumeByFillsourceOpenseaCurrent
  stats12hUsdVolumeByFillsourceOpenseaChange
  stats12hUsdVolumeByFillsourceOpenseaPrevious
  stats12hUsdVolumeByFillsourceOpenseaProCurrent
  stats12hUsdVolumeByFillsourceOpenseaProChange
  stats12hUsdVolumeByFillsourceOpenseaProPrevious
  stats12hUsdVolumeByFillsourceSeaportCurrent
  stats12hUsdVolumeByFillsourceSeaportChange
  stats12hUsdVolumeByFillsourceSeaportPrevious
  stats12hUsdVolumeByFillsourceX2Y2Current
  stats12hUsdVolumeByFillsourceX2Y2Change
  stats12hUsdVolumeByFillsourceX2Y2Previous
  stats12hUsdVolumeByFillsourceLooksrareCurrent
  stats12hUsdVolumeByFillsourceLooksrareChange
  stats12hUsdVolumeByFillsourceLooksrarePrevious
  stats12hUsdVolumeByFillsourceLooksrareV2Current
  stats12hUsdVolumeByFillsourceLooksrareV2Change
  stats12hUsdVolumeByFillsourceLooksrareV2Previous
  stats12hUsdVolumeByFillsourceBlurCurrent
  stats12hUsdVolumeByFillsourceBlurChange
  stats12hUsdVolumeByFillsourceBlurPrevious
  stats12hUsdVolumeByFillsourceBlurV2Current
  stats12hUsdVolumeByFillsourceBlurV2Change
  stats12hUsdVolumeByFillsourceBlurV2Previous
  stats12hUsdVolumeByFillsourceBlendCurrent
  stats12hUsdVolumeByFillsourceBlendChange
  stats12hUsdVolumeByFillsourceBlendPrevious
  stats12hUsdVolumeByFillsourceGemCurrent
  stats12hUsdVolumeByFillsourceGemChange
  stats12hUsdVolumeByFillsourceGemPrevious
  stats12hUsdVolumeByFillsourceSudoswapCurrent
  stats12hUsdVolumeByFillsourceSudoswapChange
  stats12hUsdVolumeByFillsourceSudoswapPrevious
  stats12hUsdVolumeByFillsourceSudoswapV2Current
  stats12hUsdVolumeByFillsourceSudoswapV2Change
  stats12hUsdVolumeByFillsourceSudoswapV2Previous
  stats12hUsdVolumeByFillsourceCryptopunksCurrent
  stats12hUsdVolumeByFillsourceCryptopunksChange
  stats12hUsdVolumeByFillsourceCryptopunksPrevious
  stats12hUsdAverageCurrent
  stats12hUsdAveragePrevious
  stats12hUsdAverageChange
  stats12hUsdOpenCurrent
  stats12hUsdOpenPrevious
  stats12hUsdOpenChange
  stats12hUsdCloseCurrent
  stats12hUsdClosePrevious
  stats12hUsdCloseChange
  stats12hUsdLowestSaleCurrent
  stats12hUsdLowestSalePrevious
  stats12hUsdLowestSaleChange
  stats12hUsdHighestSaleCurrent
  stats12hUsdHighestSalePrevious
  stats12hUsdHighestSaleChange
  stats12hUsdListingFloorCurrent
  stats12hUsdListingFloorPrevious
  stats12hUsdListingFloorChange
  stats12hUsdOpenListingFloorCurrent
  stats12hUsdOpenListingFloorPrevious
  stats12hUsdOpenListingFloorChange
  stats12hUsdCloseListingFloorCurrent
  stats12hUsdCloseListingFloorPrevious
  stats12hUsdCloseListingFloorChange
  stats12hUsdHighestListingFloorCurrent
  stats12hUsdHighestListingFloorPrevious
  stats12hUsdHighestListingFloorChange
  stats12hNetworkBaseTokenVolumeCurrent
  stats12hNetworkBaseTokenVolumePrevious
  stats12hNetworkBaseTokenVolumeChange
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaChange
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaProCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaProChange
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaProPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceSeaportCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceSeaportChange
  stats12hNetworkBaseTokenVolumeByFillsourceSeaportPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceX2Y2Current
  stats12hNetworkBaseTokenVolumeByFillsourceX2Y2Change
  stats12hNetworkBaseTokenVolumeByFillsourceX2Y2Previous
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrareCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrareChange
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrarePrevious
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrareV2Current
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrareV2Change
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrareV2Previous
  stats12hNetworkBaseTokenVolumeByFillsourceBlurCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceBlurChange
  stats12hNetworkBaseTokenVolumeByFillsourceBlurPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceBlurV2Current
  stats12hNetworkBaseTokenVolumeByFillsourceBlurV2Change
  stats12hNetworkBaseTokenVolumeByFillsourceBlurV2Previous
  stats12hNetworkBaseTokenVolumeByFillsourceBlendCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceBlendChange
  stats12hNetworkBaseTokenVolumeByFillsourceBlendPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceGemCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceGemChange
  stats12hNetworkBaseTokenVolumeByFillsourceGemPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapChange
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapV2Current
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapV2Change
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapV2Previous
  stats12hNetworkBaseTokenVolumeByFillsourceCryptopunksCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceCryptopunksChange
  stats12hNetworkBaseTokenVolumeByFillsourceCryptopunksPrevious
  stats12hNetworkBaseTokenAverageCurrent
  stats12hNetworkBaseTokenAveragePrevious
  stats12hNetworkBaseTokenAverageChange
  stats12hNetworkBaseTokenOpenCurrent
  stats12hNetworkBaseTokenOpenPrevious
  stats12hNetworkBaseTokenOpenChange
  stats12hNetworkBaseTokenCloseCurrent
  stats12hNetworkBaseTokenClosePrevious
  stats12hNetworkBaseTokenCloseChange
  stats12hNetworkBaseTokenLowestSaleCurrent
  stats12hNetworkBaseTokenLowestSalePrevious
  stats12hNetworkBaseTokenLowestSaleChange
  stats12hNetworkBaseTokenHighestSaleCurrent
  stats12hNetworkBaseTokenHighestSalePrevious
  stats12hNetworkBaseTokenHighestSaleChange
  stats12hNetworkBaseTokenListingFloorCurrent
  stats12hNetworkBaseTokenListingFloorPrevious
  stats12hNetworkBaseTokenListingFloorChange
  stats12hNetworkBaseTokenOpenListingFloorCurrent
  stats12hNetworkBaseTokenOpenListingFloorPrevious
  stats12hNetworkBaseTokenOpenListingFloorChange
  stats12hNetworkBaseTokenCloseListingFloorCurrent
  stats12hNetworkBaseTokenCloseListingFloorPrevious
  stats12hNetworkBaseTokenCloseListingFloorChange
  stats12hNetworkBaseTokenHighestListingFloorCurrent
  stats12hNetworkBaseTokenHighestListingFloorPrevious
  stats12hNetworkBaseTokenHighestListingFloorChange
  stats12hNonCurrencyMintsCurrent
  stats12hNonCurrencyMintsPrevious
  stats12hNonCurrencyMintsChange
  stats12hNonCurrencySalesCurrent
  stats12hNonCurrencySalesPrevious
  stats12hNonCurrencySalesChange
  stats12hNonCurrencyTokensSoldCurrent
  stats12hNonCurrencyTokensSoldPrevious
  stats12hNonCurrencyTokensSoldChange
  stats12hNonCurrencyTransfersCurrent
  stats12hNonCurrencyTransfersPrevious
  stats12hNonCurrencyTransfersChange
  stats12hNonCurrencyUniqueBuyersCurrent
  stats12hNonCurrencyUniqueBuyersPrevious
  stats12hNonCurrencyUniqueBuyersChange
  stats12hNonCurrencyUniqueSellersCurrent
  stats12hNonCurrencyUniqueSellersPrevious
  stats12hNonCurrencyUniqueSellersChange
  stats12hNonCurrencyUniqueSalesWalletsCurrent
  stats12hNonCurrencyUniqueSalesWalletsPrevious
  stats12hNonCurrencyUniqueSalesWalletsChange
  stats12hNonCurrencyUniqueMintersCurrent
  stats12hNonCurrencyUniqueMintersPrevious
  stats12hNonCurrencyUniqueMintersChange
  stats24hUsdVolumeCurrent
  stats24hUsdVolumePrevious
  stats24hUsdVolumeChange
  stats24hUsdVolumeByFillsourceOpenseaCurrent
  stats24hUsdVolumeByFillsourceOpenseaChange
  stats24hUsdVolumeByFillsourceOpenseaPrevious
  stats24hUsdVolumeByFillsourceOpenseaProCurrent
  stats24hUsdVolumeByFillsourceOpenseaProChange
  stats24hUsdVolumeByFillsourceOpenseaProPrevious
  stats24hUsdVolumeByFillsourceSeaportCurrent
  stats24hUsdVolumeByFillsourceSeaportChange
  stats24hUsdVolumeByFillsourceSeaportPrevious
  stats24hUsdVolumeByFillsourceX2Y2Current
  stats24hUsdVolumeByFillsourceX2Y2Change
  stats24hUsdVolumeByFillsourceX2Y2Previous
  stats24hUsdVolumeByFillsourceLooksrareCurrent
  stats24hUsdVolumeByFillsourceLooksrareChange
  stats24hUsdVolumeByFillsourceLooksrarePrevious
  stats24hUsdVolumeByFillsourceLooksrareV2Current
  stats24hUsdVolumeByFillsourceLooksrareV2Change
  stats24hUsdVolumeByFillsourceLooksrareV2Previous
  stats24hUsdVolumeByFillsourceBlurCurrent
  stats24hUsdVolumeByFillsourceBlurChange
  stats24hUsdVolumeByFillsourceBlurPrevious
  stats24hUsdVolumeByFillsourceBlurV2Current
  stats24hUsdVolumeByFillsourceBlurV2Change
  stats24hUsdVolumeByFillsourceBlurV2Previous
  stats24hUsdVolumeByFillsourceBlendCurrent
  stats24hUsdVolumeByFillsourceBlendChange
  stats24hUsdVolumeByFillsourceBlendPrevious
  stats24hUsdVolumeByFillsourceGemCurrent
  stats24hUsdVolumeByFillsourceGemChange
  stats24hUsdVolumeByFillsourceGemPrevious
  stats24hUsdVolumeByFillsourceSudoswapCurrent
  stats24hUsdVolumeByFillsourceSudoswapChange
  stats24hUsdVolumeByFillsourceSudoswapPrevious
  stats24hUsdVolumeByFillsourceSudoswapV2Current
  stats24hUsdVolumeByFillsourceSudoswapV2Change
  stats24hUsdVolumeByFillsourceSudoswapV2Previous
  stats24hUsdVolumeByFillsourceCryptopunksCurrent
  stats24hUsdVolumeByFillsourceCryptopunksChange
  stats24hUsdVolumeByFillsourceCryptopunksPrevious
  stats24hUsdAverageCurrent
  stats24hUsdAveragePrevious
  stats24hUsdAverageChange
  stats24hUsdOpenCurrent
  stats24hUsdOpenPrevious
  stats24hUsdOpenChange
  stats24hUsdCloseCurrent
  stats24hUsdClosePrevious
  stats24hUsdCloseChange
  stats24hUsdLowestSaleCurrent
  stats24hUsdLowestSalePrevious
  stats24hUsdLowestSaleChange
  stats24hUsdHighestSaleCurrent
  stats24hUsdHighestSalePrevious
  stats24hUsdHighestSaleChange
  stats24hUsdListingFloorCurrent
  stats24hUsdListingFloorPrevious
  stats24hUsdListingFloorChange
  stats24hUsdOpenListingFloorCurrent
  stats24hUsdOpenListingFloorPrevious
  stats24hUsdOpenListingFloorChange
  stats24hUsdCloseListingFloorCurrent
  stats24hUsdCloseListingFloorPrevious
  stats24hUsdCloseListingFloorChange
  stats24hUsdHighestListingFloorCurrent
  stats24hUsdHighestListingFloorPrevious
  stats24hUsdHighestListingFloorChange
  stats24hNetworkBaseTokenVolumeCurrent
  stats24hNetworkBaseTokenVolumePrevious
  stats24hNetworkBaseTokenVolumeChange
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaChange
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaProCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaProChange
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaProPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceSeaportCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceSeaportChange
  stats24hNetworkBaseTokenVolumeByFillsourceSeaportPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceX2Y2Current
  stats24hNetworkBaseTokenVolumeByFillsourceX2Y2Change
  stats24hNetworkBaseTokenVolumeByFillsourceX2Y2Previous
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrareCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrareChange
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrarePrevious
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrareV2Current
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrareV2Change
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrareV2Previous
  stats24hNetworkBaseTokenVolumeByFillsourceBlurCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceBlurChange
  stats24hNetworkBaseTokenVolumeByFillsourceBlurPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceBlurV2Current
  stats24hNetworkBaseTokenVolumeByFillsourceBlurV2Change
  stats24hNetworkBaseTokenVolumeByFillsourceBlurV2Previous
  stats24hNetworkBaseTokenVolumeByFillsourceBlendCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceBlendChange
  stats24hNetworkBaseTokenVolumeByFillsourceBlendPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceGemCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceGemChange
  stats24hNetworkBaseTokenVolumeByFillsourceGemPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapChange
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapV2Current
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapV2Change
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapV2Previous
  stats24hNetworkBaseTokenVolumeByFillsourceCryptopunksCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceCryptopunksChange
  stats24hNetworkBaseTokenVolumeByFillsourceCryptopunksPrevious
  stats24hNetworkBaseTokenAverageCurrent
  stats24hNetworkBaseTokenAveragePrevious
  stats24hNetworkBaseTokenAverageChange
  stats24hNetworkBaseTokenOpenCurrent
  stats24hNetworkBaseTokenOpenPrevious
  stats24hNetworkBaseTokenOpenChange
  stats24hNetworkBaseTokenCloseCurrent
  stats24hNetworkBaseTokenClosePrevious
  stats24hNetworkBaseTokenCloseChange
  stats24hNetworkBaseTokenLowestSaleCurrent
  stats24hNetworkBaseTokenLowestSalePrevious
  stats24hNetworkBaseTokenLowestSaleChange
  stats24hNetworkBaseTokenHighestSaleCurrent
  stats24hNetworkBaseTokenHighestSalePrevious
  stats24hNetworkBaseTokenHighestSaleChange
  stats24hNetworkBaseTokenListingFloorCurrent
  stats24hNetworkBaseTokenListingFloorPrevious
  stats24hNetworkBaseTokenListingFloorChange
  stats24hNetworkBaseTokenOpenListingFloorCurrent
  stats24hNetworkBaseTokenOpenListingFloorPrevious
  stats24hNetworkBaseTokenOpenListingFloorChange
  stats24hNetworkBaseTokenCloseListingFloorCurrent
  stats24hNetworkBaseTokenCloseListingFloorPrevious
  stats24hNetworkBaseTokenCloseListingFloorChange
  stats24hNetworkBaseTokenHighestListingFloorCurrent
  stats24hNetworkBaseTokenHighestListingFloorPrevious
  stats24hNetworkBaseTokenHighestListingFloorChange
  stats24hNonCurrencyMintsCurrent
  stats24hNonCurrencyMintsPrevious
  stats24hNonCurrencyMintsChange
  stats24hNonCurrencySalesCurrent
  stats24hNonCurrencySalesPrevious
  stats24hNonCurrencySalesChange
  stats24hNonCurrencyTokensSoldCurrent
  stats24hNonCurrencyTokensSoldPrevious
  stats24hNonCurrencyTokensSoldChange
  stats24hNonCurrencyTransfersCurrent
  stats24hNonCurrencyTransfersPrevious
  stats24hNonCurrencyTransfersChange
  stats24hNonCurrencyUniqueBuyersCurrent
  stats24hNonCurrencyUniqueBuyersPrevious
  stats24hNonCurrencyUniqueBuyersChange
  stats24hNonCurrencyUniqueSellersCurrent
  stats24hNonCurrencyUniqueSellersPrevious
  stats24hNonCurrencyUniqueSellersChange
  stats24hNonCurrencyUniqueSalesWalletsCurrent
  stats24hNonCurrencyUniqueSalesWalletsPrevious
  stats24hNonCurrencyUniqueSalesWalletsChange
  stats24hNonCurrencyUniqueMintersCurrent
  stats24hNonCurrencyUniqueMintersPrevious
  stats24hNonCurrencyUniqueMintersChange
}

"""The duration used to rank NFTs."""
enum NftCollectionsLeaderboardDuration {
  day30
  week1
  day1
  hour12
  hour4
  hour1
  min15
}

"""The attribute used to rank NFT collections."""
enum NftCollectionsLeaderboardMetric {
  volumeUsd
  volumeUsdGain
  sales
  salesGain
  tokensSold
  tokensSoldGain
  volumeBase
  volumeBaseGain
  mints
  mintsGain
  buyers
  buyersGain
  sellers
  sellersGain
}

"""Stats for an NFT collection for a time frame."""
type NftCollectionWindowStats {
  """The time frame used to calculate the stats."""
  window: String!

  """The price stats for the NFT collection in USD."""
  usdPriceStats: NftCollectionPriceStats!

  """The price stats for the NFT collection in the network's base token."""
  networkBaseTokenPriceStats: NftCollectionPriceStats!

  """The trade count over the `window`."""
  tradeCount: String!

  """The change in trade count between the previous and current `window`."""
  tradeCountChange: Float!
}

"""Metadata for an NFT collection."""
type NftContract {
  """The ID of the NFT collection (`address`:`networkId`)."""
  id: String!

  """The contract address of the NFT collection."""
  address: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The token standard. Can be a variation of `ERC-721` or `ERC-1155`."""
  ercType: String!

  """The name of the NFT collection."""
  name: String

  """The description of the NFT collection."""
  description: String

  """The symbol for the NFT collection."""
  symbol: String

  """The total supply of the NFT collection."""
  totalSupply: String

  """The URL for an image of the NFT collection."""
  image: String
}

"""Token standards."""
enum NftContractErcType {
  ERC721
  ERC721Metadata
  ERC721Enumerable
  ERC1155
  ERC1155Metadata
  Unsupported
}

"""Input type of `getNftContracts`."""
input NftContractInput {
  """The NFT contract address."""
  address: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!
}

"""An NFT collection transaction."""
type NftEvent {
  """The ID of the NFT event (`contractAddress`:`tokenId`:`networkId`)."""
  id: String!

  """The contract address of the NFT collection."""
  contractAddress: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The token ID of the NFT asset involved in the transaction."""
  tokenId: String!

  """The wallet address of the buyer."""
  maker: String!

  """The wallet address of the seller."""
  taker: String!
  tokenPrice: String! @deprecated(reason: "Some events may lack this value - use the nullable totalTradePrice. tokenPrice will return null values as an empty string.")
  totalPrice: String! @deprecated(reason: "Some events may lack this value - use the nullable totalTradePrice. totalPrice will return null values as an empty string.")

  """
  The total trade price for the transaction in the purchasing token. (The transaction can include more than 1 token).
  """
  totalTradePrice: String
  individualTokenPrice: String @deprecated(reason: "Some events may lack this value - use the nullable individualTradePrice. individualTokenPrice will return null values as an empty string.")
  individualPrice: String @deprecated(reason: "Some events may lack this value - use the nullable individualTradePrice. individualPrice will return null values as an empty string.")

  """The price of each individual NFT in the purchasing token."""
  individualTradePrice: String
  baseTokenAddress: String! @deprecated

  """The contract address of the purchasing token."""
  paymentTokenAddress: String!
  baseTokenPrice: String @deprecated

  """
  The total trade price for the transaction in USD. (The transaction can include more than 1 token).
  """
  totalPriceUsd: String
  individualBaseTokenPrice: String @deprecated

  """The price of each individual NFT in USD."""
  individualPriceUsd: String
  networkBaseTokenPrice: String @deprecated

  """
  The total trade price for the transaction in the network's base token. (The transaction can include more than 1 token).
  """
  totalPriceNetworkBaseToken: String
  individualNetworkBaseTokenPrice: String @deprecated

  """The price of each individual NFT in the network's base token."""
  individualPriceNetworkBaseToken: String

  """The event type of the transaction."""
  eventType: String!

  """The NFT marketplace address of the transaction."""
  exchangeAddress: String!

  """
  The sortKey for the event (`blockNumber`#`transactionIndex`#`logIndex` (+ #`marketplaceEventLogIndex` if applicable), zero padded). For example, `0000000016414564#00000224#00000413#00000414`.
  """
  sortKey: String!

  """The block number for the transaction."""
  blockNumber: Int!

  """The index of the transaction within the block."""
  transactionIndex: Int!

  """The index of the log in the block."""
  logIndex: Int!

  """The unique hash for the transaction."""
  transactionHash: String!

  """The unix timestamp for the transaction."""
  timestamp: Int!

  """The number of assets involved in the transaction."""
  numberOfTokens: String

  """
  The contract address of the marketplace aggregator that routed the transaction.
  """
  aggregatorAddress: String

  """The contract address of the NFT pool, if applicable."""
  poolAddress: String

  """The name of the marketplace that processed the transaction."""
  fillSource: String

  """
  The reason for the price error, if applicable. Can be `NO_TOKEN_DATA`, `NO_TOKEN_PRICE`, or `LOW_LIQUIDITY_PAIR`.
  """
  priceError: String

  """The tokens/NFTs that were offered to make this transaction occur."""
  tradeOffer: [NftEventTradeItem!]

  """The tokens/NFTs that were received in this transaction."""
  tradeReceived: [NftEventTradeItem!]

  """The direction of the order. One of 'BUY', 'SELL', or 'OFFER_ACCEPTED'."""
  orderDirection: NftEventOrderDirection
}

input NftEventDataInput {
  buyHash: String
  metadata: String
  price: String
  maker: String
  taker: String
  type: String!
  sellHash: String
}

type NftEventFillSourceCondition {
  oneOf: [WebhookNftEventFillSource!]!
}

input NftEventFillSourceConditionInput {
  oneOf: [WebhookNftEventFillSource!]!
}

input NftEventInput {
  id: String!
  contractAddress: String!
  networkId: Int!
  tokenId: String!
  maker: String!
  taker: String!
  tokenPrice: String!
  totalPrice: String!
  totalTradePrice: String
  individualTokenPrice: String
  individualPrice: String
  individualTradePrice: String
  baseTokenAddress: String!
  paymentTokenAddress: String!
  baseTokenPrice: String
  totalPriceUsd: String
  individualBaseTokenPrice: String
  individualPriceUsd: String
  networkBaseTokenPrice: String
  totalPriceNetworkBaseToken: String
  individualNetworkBaseTokenPrice: String
  individualPriceNetworkBaseToken: String
  eventType: String!
  data: NftEventDataInput!
  exchangeAddress: String!
  blockNumber: Int!
  transactionHash: String!
  transactionIndex: Int!
  logIndex: Int!
  sortKey: String!
  timestamp: Int!
  numberOfTokens: String
  aggregatorAddress: String
  poolAddress: String
  fillSource: String
  priceError: String
}

"""Details for an NFT offered or received as part of an nft trade."""
type NftEventNftTradeItem implements NftEventTradeItemBase {
  """The contract address for the NFT."""
  address: String!

  """The number of tokens transferred. (Always 1 for ERC721 NFTs)"""
  amount: String!

  """The recipient of the NFT."""
  recipient: String

  """The type of item involved in the trade. (Always NFT)"""
  type: NftEventTradeItemType!

  """The token ID of the exchanged NFT"""
  tokenId: String!
}

"""The direction of the nft sale event."""
enum NftEventOrderDirection {
  BUY
  SELL
  OFFER_ACCEPTED
}

"""Response returned by `getNftEvents`."""
type NftEventsConnection {
  """A list of transactions for an NFT collection."""
  items: [NftEvent]

  """A cursor for use in pagination."""
  cursor: String
}

"""Details for a token(s) offered or received as part of an nft trade."""
type NftEventTokenTradeItem implements NftEventTradeItemBase {
  """The contract address for the token."""
  address: String!

  """The number of tokens transferred."""
  amount: String!

  """The recipient of the tokens."""
  recipient: String

  """The type of item involved in the trade. (Always TOKEN)"""
  type: NftEventTradeItemType!

  """
  Whether this should be summed to calculate the price of the NFT received in the base event. Tokens that are payment fees or involved with other sales in the transaction are often represented in sales and would have a value of `false`.
  """
  isPrice: Boolean!

  """
  The total trade price for the transaction in the purchasing token. (The transaction can include more than 1 token).
  """
  totalTradePrice: String

  """The price of each individual NFT in the purchasing token."""
  individualTradePrice: String

  """
  The total trade price for the transaction in USD. (The transaction can include more than 1 token).
  """
  totalPriceUsd: String

  """The price of each individual NFT in USD."""
  individualPriceUsd: String

  """
  The total trade price for the transaction in the network's base token. (The transaction can include more than 1 token).
  """
  totalPriceNetworkBaseToken: String

  """The price of each individual NFT in the network's base token."""
  individualPriceNetworkBaseToken: String

  """
  The reason for the price error, if applicable. Can be `NO_TOKEN_DATA`, `NO_TOKEN_PRICE`, or `LOW_LIQUIDITY_PAIR`.
  """
  priceError: String
}

"""An item that was either offered or received as part of an NFT trade."""
union NftEventTradeItem = NftEventNftTradeItem | NftEventTokenTradeItem

"""
Fields that are common in all items offered or received as part of an nft trade.
"""
interface NftEventTradeItemBase {
  """The contract address for the item."""
  address: String!

  """The number of items transferred."""
  amount: String

  """The recipient of the items."""
  recipient: String

  """The type of item involved in the trade. (NFT or TOKEN)"""
  type: NftEventTradeItemType!
}

"""The type of item involved in the trade."""
enum NftEventTradeItemType {
  NFT
  TOKEN
}

type NftEventTypeCondition {
  eq: WebhookNftEventType!
}

input NftEventTypeConditionInput {
  eq: WebhookNftEventType!
}

type NftEventWebhookCondition {
  networkId: OneOfNumberCondition
  maker: StringEqualsCondition
  contractAddress: StringEqualsCondition
  exchangeAddress: StringEqualsCondition
  tokenId: StringEqualsCondition
  tokenAddress: StringEqualsCondition
  individualBaseTokenPrice: ComparisonOperator
  eventType: NftEventTypeCondition
  fillSource: NftEventFillSourceCondition
}

input NftEventWebhookConditionInput {
  networkId: OneOfNumberConditionInput
  maker: StringEqualsConditionInput
  contractAddress: StringEqualsConditionInput
  exchangeAddress: StringEqualsConditionInput
  tokenId: StringEqualsConditionInput
  eventType: NftEventTypeConditionInput
  fillSource: NftEventFillSourceConditionInput
}

"""NFT marketplaces."""
enum NftExchange {
  OPENSEA
  SEAPORT
  X2Y2
  SUDOSWAPV2
  LOOKSRARE
  LOOKSRAREV2
  TOFUNFT
  TREASURE
  ZEROEXV3
  ZEROEXV4
  QUIXOTIC
  JOEPEGS
  STRATOS
  PLAYDAPP
  BLUR
  CRYPTOPUNKS
  BITKEEP
  MINTED
  ALTO
  PROVENANT
  BLURV2
  BLEND
  SUDOSWAPAMMV2
}

"""Number metrics for NFT fillsource stats."""
type NftFillsourceStatsNumberMetrics {
  """
  Marketplace that filled the NFT order volume. (ex. OPENSEA, BLUR, etc.)
  """
  fillsource: String

  """The total value for the current window."""
  current: Float

  """The total value for the previous window."""
  previous: Float

  """The percent change between the `current` and `previous`."""
  change: Float
}

"""String metrics for NFT stats."""
type NftFillsourceStatsStringMetrics {
  """
  Marketplace that filled the NFT order volume. (ex. OPENSEA, BLUR, etc.)
  """
  fillsource: String

  """The total value for the current window."""
  current: String

  """The total value for the previous window."""
  previous: String

  """The percent change between the `current` and `previous`."""
  change: Float
}

"""Event data for updating the asset recipient of a pool."""
type NftPoolAssetRecipientUpdateEventData {
  """The type of NFT pool event, `ASSET_RECIPIENT_CHANGE`."""
  type: NftPoolEventType!

  """
  The updated wallet address that will receive the tokens or NFT sent to the pair during swaps.
  """
  newAssetRecipient: String!
}

"""Response returned by `filterNftPoolCollections`."""
type NftPoolCollectionFilterConnection {
  """The list of NFT collections matching the filter parameters."""
  results: [NftPoolCollectionFilterResult]

  """The number of NFT collections returned."""
  count: Int

  """Where in the list the server started when returning items."""
  page: Int
}

"""An NFT pool collection."""
type NftPoolCollectionFilterResult {
  """
  The ID of the NFT collection (`collectionAddress`:`exchangeAddress`:`networkId`).
  """
  id: String!

  """
  The unix timestamp indicating the last time the data was updated. Updates every 2 hours.
  """
  timestamp: Int

  """The name of the NFT collection."""
  name: String

  """The symbol for the NFT collection."""
  symbol: String

  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String

  """The contract address of the NFT collection."""
  collectionAddress: String

  """The network ID the NFT collection is deployed on."""
  networkId: Int

  """The token standard. Can be a variation of `ERC-721` or `ERC-1155`."""
  ercType: String

  """
  The image URL for the collection or one of the assets within the collection.
  """
  imageUrl: String

  """The number of NFTs in all of the collection's pools."""
  nftBalance: Int @deprecated(reason: "nftBalance is changing from Int to String - use nftBalanceV2 instead.")

  """The number of NFTs in all of the collection's pools."""
  nftBalanceV2: String

  """The total liquidity of the collection in the network's base token."""
  balanceNBT: String

  """
  The lowest price at which any of the collection's pools are willing to sell an NFT in the network's base token.
  """
  floorNBT: String

  """
  The highest price at which any of the collection's pools are willing to buy an NFT in the network's base token.
  """
  offerNBT: String

  """The total liquidity of the collection in USD."""
  balanceUSD: String

  """
  The lowest price at which any of the collection's pools are willing to sell an NFT in USD.
  """
  floorUSD: String

  """
  The highest price at which any of the collection's pools are willing to buy an NFT in USD.
  """
  offerUSD: String

  """The total supply of the collection."""
  totalSupply: Int @deprecated(reason: "totalSupply is changing from Int to String - use totalSupplyV2 instead.")
  totalSupplyV2: String

  """
  The number of NFTs sold in any of the collection's pools over the collection's lifetime.
  """
  nftsSoldAll: Int @deprecated(reason: "nftsSoldAll is changing from Int to String - use nftsSoldAllV2 instead.")

  """
  The number of NFTs sold in any of the collection's pools over the collection's lifetime.
  """
  nftsSoldAllV2: String

  """
  The number of NFTs bought in any of the collection's pools over the collection's lifetime.
  """
  nftsBoughtAll: Int @deprecated(reason: "nftsBoughtAll is changing from Int to String - use nftsBoughtAllV2 instead.")

  """
  The number of NFTs bought in any of the collection's pools over the collection's lifetime.
  """
  nftsBoughtAllV2: String

  """
  The number of NFTs bought or sold in any of the collection's pools over the collection's lifetime.
  """
  nftVolumeAll: Int @deprecated(reason: "nftVolumeAll is changing from Int to String - use nftVolumeAllV2 instead.")

  """
  The number of NFTs bought or sold in any of the collection's pools over the collection's lifetime.
  """
  nftVolumeAllV2: String

  """
  The total volume of the collection in the network's base token over the collection's lifetime.
  """
  volumeNBTAll: String

  """
  The total buy volume of the collection in the network's base token over the collection's lifetime.
  """
  revenueNBTAll: String

  """
  The total sell volume of the collection in the network's base token over the collection's lifetime.
  """
  expenseNBTAll: String

  """
  The highest sale price within the collection in the network's base token in the collection's lifetime.
  """
  highPriceNBTAll: String

  """
  The lowest sale price within the collection in the network's base token in the collection's lifetime.
  """
  lowPriceNBTAll: String

  """
  The sum of pool fees generated by the collection in the network's base token over the collection's lifetime.
  """
  poolFeesNBTAll: String

  """
  The sum of protocol fees generated by the collection in the network's base token over the collection's lifetime.
  """
  protocolFeesNBTAll: String

  """
  The total volume of the collection in USD over the collection's lifetime.
  """
  volumeUSDAll: String

  """
  The total buy volume of the collection in USD over the collection's lifetime.
  """
  revenueUSDAll: String

  """
  The total sell volume of the collection in USD over the collection's lifetime.
  """
  expenseUSDAll: String

  """
  The highest sale price within the collection in USD in the collection's lifetime.
  """
  highPriceUSDAll: String

  """
  The lowest sale price within the collection in USD in the collection's lifetime.
  """
  lowPriceUSDAll: String

  """
  The sum of pool fees generated by the collection in USD over the collection's lifetime.
  """
  poolFeesUSDAll: String

  """
  The sum of protocol fees generated by the collection in USD over the collection's lifetime.
  """
  protocolFeesUSDAll: String

  """
  The number of NFTs sold in any of the collection's pools over the past 24 hours.
  """
  nftsSold24: Int @deprecated(reason: "nftsSold24 is changing from Int to String - use nftsSold24V2 instead.")

  """
  The number of NFTs sold in any of the collection's pools over the past 24 hours.
  """
  nftsSold24V2: String

  """
  The number of NFTs bought in any of the collection's pools over the past 24 hours.
  """
  nftsBought24: Int @deprecated(reason: "nftsBought24 is changing from Int to String - use nftsBought24V2 instead.")

  """
  The number of NFTs bought in any of the collection's pools over the past 24 hours.
  """
  nftsBought24V2: String

  """
  The number of NFTs bought and sold in any of the collection's pools over the past 24 hours.
  """
  nftVolume24: Int @deprecated(reason: "nftVolume24 is changing from Int to String - use nftVolume24V2 instead.")

  """
  The number of NFTs bought and sold in any of the collection's pools over the past 24 hours.
  """
  nftVolume24V2: String

  """
  The total volume of the collection in the network's base token over the past 24 hours.
  """
  volumeNBT24: String

  """
  The total buy volume of the collection in the network's base token over the past 24 hours.
  """
  revenueNBT24: String

  """
  The total sell volume of the collection in the network's base token over the past 24 hours.
  """
  expenseNBT24: String

  """
  The highest sale price within the collection in the network's base token in the past 24 hours.
  """
  highPriceNBT24: String

  """
  The lowest sale price within the collection in the network's base token in the past 24 hours.
  """
  lowPriceNBT24: String

  """
  The sum of pool fees generated by the collection in the network's base token over the past 24 hours.
  """
  poolFeesNBT24: String

  """
  The sum of protocol fees generated by the collection in the network's base token over the past 24 hours.
  """
  protocolFeesNBT24: String

  """The total volume of the collection in USD over the past 24 hours."""
  volumeUSD24: String

  """The total buy volume of the collection in USD over the past 24 hours."""
  revenueUSD24: String

  """The total sell volume of the collection in USD over the past 24 hours."""
  expenseUSD24: String

  """
  The highest sale price within the collection in USD in the past 24 hours.
  """
  highPriceUSD24: String

  """
  The lowest sale price within the collection in USD in the past 24 hours.
  """
  lowPriceUSD24: String

  """
  The sum of pool fees generated by the collection in USD over the past 24 hours.
  """
  poolFeesUSD24: String

  """
  The sum of protocol fees generated by the collection in USD over the past 24 hours.
  """
  protocolFeesUSD24: String
}

"""Input type of `NftPoolCollectionFilters`."""
input NftPoolCollectionFilters {
  """The number of NFTs in all of the collection's pools."""
  nftBalance: NumberFilter

  """The total liquidity of the collection in the network's base token."""
  balanceNBT: NumberFilter

  """
  The lowest price at which any of the collection's pools are willing to sell an NFT in the network's base token.
  """
  floorNBT: NumberFilter

  """
  The highest price at which any of the collection's pools are willing to buy an NFT in the network's base token.
  """
  offerNBT: NumberFilter

  """The total liquidity of the collection in USD."""
  balanceUSD: NumberFilter

  """
  The lowest price at which any of the collection's pools are willing to sell an NFT in USD.
  """
  floorUSD: NumberFilter

  """
  The highest price at which any of the collection's pools are willing to buy an NFT in USD.
  """
  offerUSD: NumberFilter

  """The total supply of the collection."""
  totalSupply: NumberFilter

  """
  The number of NFTs sold in any of the collection's pools over the collection's lifetime.
  """
  nftsSoldAll: NumberFilter

  """
  The number of NFTs bought in any of the collection's pools over the collection's lifetime.
  """
  nftsBoughtAll: NumberFilter

  """
  The number of NFTs bought or sold in any of the collection's pools over the collection's lifetime.
  """
  nftVolumeAll: NumberFilter

  """
  The total volume of the collection in the network's base token over the collection's lifetime.
  """
  volumeNBTAll: NumberFilter

  """
  The total buy volume of the collection in the network's base token over the collection's lifetime.
  """
  revenueNBTAll: NumberFilter

  """
  The total sell volume of the collection in the network's base token over the collection's lifetime.
  """
  expenseNBTAll: NumberFilter

  """
  The highest sale price within the collection in the network's base token in the collection's lifetime.
  """
  highPriceNBTAll: NumberFilter

  """
  The lowest sale price within the collection in the network's base token in the collection's lifetime.
  """
  lowPriceNBTAll: NumberFilter

  """
  The sum of pool fees generated by the collection in the network's base token over the collection's lifetime.
  """
  poolFeesNBTAll: NumberFilter

  """
  The sum of protocol fees generated by the collection in the network's base token over the collection's lifetime.
  """
  protocolFeesNBTAll: NumberFilter

  """
  The total volume of the collection in USD over the collection's lifetime.
  """
  volumeUSDAll: NumberFilter

  """
  The total buy volume of the collection in USD over the collection's lifetime.
  """
  revenueUSDAll: NumberFilter

  """
  The total sell volume of the collection in USD over the collection's lifetime.
  """
  expenseUSDAll: NumberFilter

  """
  The highest sale price within the collection in USD in the collection's lifetime.
  """
  highPriceUSDAll: NumberFilter

  """
  The lowest sale price within the collection in USD in the collection's lifetime.
  """
  lowPriceUSDAll: NumberFilter

  """
  The sum of pool fees generated by the collection in USD over the collection's lifetime.
  """
  poolFeesUSDAll: NumberFilter

  """
  The sum of protocol fees generated by the collection in USD over the collection's lifetime.
  """
  protocolFeesUSDAll: NumberFilter

  """
  The number of NFTs sold in any of the collection's pools over the past 24 hours.
  """
  nftsSold24: NumberFilter

  """
  The number of NFTs bought in any of the collection's pools over the past 24 hours.
  """
  nftsBought24: NumberFilter

  """
  The number of NFTs bought in any of the collection's pools over the past 24 hours.
  """
  nftVolume24: NumberFilter

  """
  The total volume of the collection in the network's base token over the past 24 hours.
  """
  volumeNBT24: NumberFilter

  """
  The total buy volume of the collection in the network's base token over the past 24 hours.
  """
  revenueNBT24: NumberFilter

  """
  The total sell volume of the collection in the network's base token over the past 24 hours.
  """
  expenseNBT24: NumberFilter

  """
  The highest sale price within the collection in the network's base token in the past 24 hours.
  """
  highPriceNBT24: NumberFilter

  """
  The lowest sale price within the collection in the network's base token in the past 24 hours.
  """
  lowPriceNBT24: NumberFilter

  """
  The sum of pool fees generated by the collection in the network's base token over the past 24 hours.
  """
  poolFeesNBT24: NumberFilter

  """
  The sum of protocol fees generated by the collection in the network's base token over the past 24 hours.
  """
  protocolFeesNBT24: NumberFilter

  """The total volume of the collection in USD over the past 24 hours."""
  volumeUSD24: NumberFilter

  """The total buy volume of the collection in USD over the past 24 hours."""
  revenueUSD24: NumberFilter

  """The total sell volume of the collection in USD over the past 24 hours."""
  expenseUSD24: NumberFilter

  """
  The highest sale price within the collection in USD in the past 24 hours.
  """
  highPriceUSD24: NumberFilter

  """
  The lowest sale price within the collection in USD in the past 24 hours.
  """
  lowPriceUSD24: NumberFilter

  """
  The sum of pool fees generated by the collection in USD over the past 24 hours.
  """
  poolFeesUSD24: NumberFilter

  """
  The sum of protocol fees generated by the collection in USD over the past 24 hours.
  """
  protocolFeesUSD24: NumberFilter

  """The list of network IDs to filter by."""
  network: [Int]

  """The list of NFT AMM marketplace addresses to filter by."""
  exchange: [String]

  """
  The list of token standards to filter by. Can be a variation of `ERC-721` or `ERC-1155`.
  """
  ercType: [String]
}

"""Input type of `NftPoolCollectionRanking`."""
input NftPoolCollectionRanking {
  """The attribute to rank NFT collections by."""
  attribute: NftPoolCollectionRankingAttribute

  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank NFT collections."""
enum NftPoolCollectionRankingAttribute {
  balanceNBT
  balanceUSD
  expenseNBT24
  expenseNBTAll
  expenseUSD24
  expenseUSDAll
  floorNBT
  floorUSD
  highPriceNBT24
  highPriceNBTAll
  highPriceUSD24
  highPriceUSDAll
  lowPriceNBT24
  lowPriceNBTAll
  lowPriceUSD24
  lowPriceUSDAll
  nftBalance
  nftsBought24
  nftsBoughtAll
  nftsSold24
  nftsSoldAll
  nftVolume24
  nftVolumeAll
  offerNBT
  offerUSD
  poolFeesNBT24
  poolFeesNBTAll
  poolFeesUSD24
  poolFeesUSDAll
  protocolFeesNBT24
  protocolFeesNBTAll
  protocolFeesUSD24
  protocolFeesUSDAll
  revenueNBT24
  revenueNBTAll
  revenueUSD24
  revenueUSDAll
  totalSupply
  volumeNBT24
  volumeNBTAll
  volumeUSD24
  volumeUSDAll
}

"""An NFT collection in an NFT pool."""
type NftPoolCollectionResponse {
  """The ID of the NFT collection (`collectionAddress`:`networkId`)."""
  collectionId: String!

  """The contract address of the NFT collection."""
  collectionAddress: String!

  """The symbol of the NFT collection."""
  collectionSymbol: String!

  """The ID of the exchange (`exchangeAddress`:`networkId`)."""
  exchangeId: String!

  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String!

  """The name of the NFT collection."""
  name: String

  """An image associated with the NFT collection."""
  image: String

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """
  The lowest price at which any of the NFT collection's pools are willing to sell an NFT in the network's base token.
  """
  floorNBT: String

  """
  The highest price at which any of the NFT collection's pools are willing to buy an NFT in the network's base token.
  """
  offerNBT: String

  """The total liquidity of the collection in the network's base token."""
  balanceNBT: String!

  """The current number of NFTs in all the NFT collection's pools."""
  nftBalance: Int! @deprecated(reason: "nftBalance is changing from Int to String - use nftBalanceV2 instead.")

  """The current number of NFTs in all the NFT collection's pools."""
  nftBalanceV2: String!

  """
  The total volume of the collection in the network's base token over the collection's lifetime.
  """
  volumeAllTimeNBT: String

  """
  The total number of NFTs bought and sold over the collection's lifetime.
  """
  nftVolumeAllTime: Int @deprecated(reason: "nftVolumeAllTime is changing from Int to String - use nftVolumeAllTimeV2 instead.")

  """
  The total number of NFTs bought and sold over the collection's lifetime.
  """
  nftVolumeAllTimeV2: String

  """The media for one of the assets within the NFT collection."""
  media: NftAssetMedia @deprecated(reason: "Use `image` from `NftContract` instead.")
}

"""The NFT pool contract version."""
enum NftPoolContractVersion {
  SUDOSWAP_V1
  SUDOSWAP_V2
}

"""Event data for updating the delta of a pool."""
type NftPoolDeltaUpdateEventData {
  """The type of NFT pool event, `DELTA_UPDATE`."""
  type: NftPoolEventType!

  """The updated delta used in the bonding curve."""
  newDelta: String!
}

"""An NFT pool transaction."""
type NftPoolEvent {
  """
  The ID of the NFT pool (`poolAddress`:`networkId`). For example, `0xdbea289dcc10eed8431e78753414a3d81b8e7201:1`.
  """
  id: String!

  """The contract address of the NFT pool."""
  poolAddress: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The contract address of the NFT collection."""
  collectionAddress: String!

  """The ID of the NFT collection (`collectionAddress`:`networkId`)."""
  collectionId: String!

  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String!

  """
  The contract address of the liquidity token of the pool (usually WETH).
  """
  tokenAddress: String!

  """The block number for the transaction."""
  blockNumber: Int!

  """The index of the log in the block."""
  logIndex: Int!

  """The index of the transaction within the block."""
  transactionIndex: Int!

  """The hash of the block where the transaction occurred."""
  blockHash: String!

  """The unique hash for the transaction."""
  transactionHash: String!

  """The unix timestamp for the transaction."""
  timestamp: Int!

  """The wallet address that transacted."""
  maker: String!

  """The type of liquidity pool."""
  poolType: NftPoolType!

  """The event type of the transaction."""
  eventType: NftPoolEventType!

  """The event-specific data for the transaction."""
  data: NftPoolEventData!
}

"""Event-specific data for an NFT pool transaction."""
union NftPoolEventData = NewPoolEventData | SwapNftOutPoolEventData | SwapNftInPoolEventData | NftPoolNftDepositEventData | NftPoolNftWithdrawalEventData | NftPoolTokenDepositEventData | NftPoolTokenWithdrawalEventData | NftPoolSpotPriceUpdateEventData | NftPoolDeltaUpdateEventData | NftPoolFeeUpdateEventData | NftPoolAssetRecipientUpdateEventData | NewPoolEventDataV2 | SwapNftOutPoolEventDataV2 | SwapNftInPoolEventDataV2 | NftPoolNftDepositEventDataV2 | NftPoolNftWithdrawalEventDataV2 | NftPoolTokenDepositEventDataV2 | NftPoolTokenWithdrawalEventDataV2 | NftPoolSpotPriceUpdateEventDataV2 | NftPoolOwnershipTransferredEventDataV2

"""Metadata for an NFT transfer."""
type NftPoolEventNftTransfer {
  """The NFT token ID involved in the transfer."""
  nftTokenId: String!

  """The value of the NFT at the time of transfer."""
  amountT: String!
}

"""Metadata for an NFT transfer."""
type NftPoolEventNftTransferV2 {
  """The NFT token ID involved in the transfer."""
  nftTokenId: String!

  """The number of tokens involved in the transfer."""
  nftTokenQuantity: String!

  """The value of the token at the time of transfer."""
  amountT: String!
}

"""Response returned by `getNftPoolEvents`."""
type NftPoolEventsResponse {
  """A list of transactions for an NFT pool."""
  items: [NftPoolEvent]

  """A cursor for use in pagination."""
  cursor: String
}

"""The type of an NFT pool event."""
enum NftPoolEventType {
  NEW_POOL
  SWAP_NFT_IN_POOL
  SWAP_NFT_OUT_POOL
  NFT_DEPOSIT
  NFT_WITHDRAWAL
  TOKEN_DEPOSIT
  TOKEN_WITHDRAWAL
  SPOT_PRICE_UPDATE
  DELTA_UPDATE
  FEE_UPDATE
  ASSET_RECIPIENT_CHANGE
  NEW_POOL_V2
  SWAP_NFT_IN_POOL_V2
  SWAP_NFT_OUT_POOL_V2
  NFT_DEPOSIT_V2
  NFT_WITHDRAWAL_V2
  TOKEN_DEPOSIT_V2
  TOKEN_WITHDRAWAL_V2
  SPOT_PRICE_UPDATE_V2
  OWNERSHIP_TRANSFERRED
}

"""Event data for updating the fee of a pool."""
type NftPoolFeeUpdateEventData {
  """The type of NFT pool event, `FEE_UPDATE`."""
  type: NftPoolEventType!

  """The updated pool fee in the pool's liquidity token."""
  newFeeT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Response returned by `filterNftPools`."""
type NftPoolFilterConnection {
  """The list of NFT pools matching the filter parameters."""
  results: [NftPoolFilterResult]

  """The number of NFT pools returned."""
  count: Int

  """Where in the list the server started when returning items."""
  page: Int
}

"""An NFT pool matching a set of filter parameters."""
type NftPoolFilterResult {
  """The ID of the NFT pool (`poolAddress`:`networkId`)."""
  id: String!

  """The contract address of the NFT pool."""
  poolAddress: String!

  """
  The unix timestamp indicating the last time the data was updated. Updates every 2 hours.
  """
  timestamp: Int!

  """The contract address of the NFT collection."""
  collectionAddress: String!

  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String!

  """The name of the NFT collection."""
  collectionName: String!

  """The symbol of the NFT collection."""
  collectionSymbol: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The pool variant. Can be `ERC20` or `NATIVE`."""
  poolVariant: GraphQlNftPoolVariant!

  """
  The list of royalties for the pool. Only applicable for `SUDOSWAP_V2` pools.
  """
  royalties: [NftPoolRoyalty]

  """The property checker contract address for the pool."""
  propertyChecker: String

  """The NFT pool contract version. Can be `SUDOSWAP_V1` or `SUDOSWAP_V2`."""
  version: NftPoolContractVersion

  """The type of NFT in the pool."""
  poolNftType: PoolNftType

  """
  For ERC1155 pools, the list of NFT token IDs that are accepted by the pool.
  """
  acceptedNftTokenIds: [String]

  """The current number of NFTs in the pool."""
  nftBalance: Int @deprecated(reason: "nftBalance is changing from Int to String - use nftBalanceV2 instead.")

  """The current number of NFTs in the pool."""
  nftBalanceV2: String

  """The current pool liquidity in the network's base token."""
  balanceNBT: String

  """The current price at which the pool is willing to sell an NFT."""
  sellNBT: String

  """
  The current price at which the pool is willing to buy an NFT in the network's base token.
  """
  offerNBT: String

  """The current spot price for the pool in the network's base token."""
  spotNBT: String

  """The current value of the collection in the pool's liquidity token."""
  balanceT: String

  """
  The current price at which the pool is willing to sell an NFT in the network's base token.
  """
  sellT: String

  """
  The current price at which the pool is willing to buy an NFT in the pool's liquidity token.
  """
  offerT: String

  """The current spot price for the pool in the pool's liquidity token."""
  spotT: String

  """The current pool liquidity in USD."""
  balanceUSD: String

  """The current price at which the pool is willing to sell an NFT in USD."""
  sellUSD: String

  """The current price at which the pool is willing to buy an NFT in USD."""
  offerUSD: String

  """The total number of NFTs sold over the pool's lifetime."""
  nftsSoldAll: Int @deprecated(reason: "nftsSoldAll is changing from Int to String - use nftsSoldAllV2 instead.")

  """The total number of NFTs sold over the pool's lifetime."""
  nftsSoldAllV2: String

  """The total number of NFTs bought over the pool's lifetime."""
  nftsBoughtAll: Int @deprecated(reason: "nftsBoughtAll is changing from Int to String - use nftsBoughtAllV2 instead.")

  """The total number of NFTs bought over the pool's lifetime."""
  nftsBoughtAllV2: String

  """The total number of NFTs bought and sold over the pool's lifetime."""
  nftVolumeAll: Int @deprecated(reason: "nftVolumeAll is changing from Int to String - use nftVolumeAllV2 instead.")

  """The total number of NFTs bought and sold over the pool's lifetime."""
  nftVolumeAllV2: String

  """
  The total volume of the pool in the network's base token over the pool's lifetime.
  """
  volumeNBTAll: String

  """
  The total buy volume of the pool in the network's base token over the pool's lifetime.
  """
  revenueNBTAll: String

  """
  The total sell volume of the pool in the network's base token over the pool's lifetime.
  """
  expenseNBTAll: String

  """
  The sum of pool fees generated by the pool in the network's base token over the pool's lifetime.
  """
  poolFeesNBTAll: String

  """
  The sum of protocol fees generated by the pool in the network's base token over the pool's lifetime.
  """
  protocolFeesNBTAll: String

  """
  The total volume of the pool in the pool's liquidity token over the pool's lifetime.
  """
  volumeTAll: String

  """
  The total buy volume of the pool in the pool's liquidity token over the pool's lifetime.
  """
  revenueTAll: String

  """
  The total sell volume of the pool in the pool's liquidity token over the pool's lifetime.
  """
  expenseTAll: String

  """
  The sum of pool fees generated by the pool in the pool's liquidity token over the pool's lifetime.
  """
  poolFeesTAll: String

  """
  The sum of protocol fees generated by the pool in the pool's liquidity token over the pool's lifetime.
  """
  protocolFeesTAll: String

  """The total volume of the pool in USD over the pool's lifetime."""
  volumeUSDAll: String

  """The total buy volume of the pool in USD over the pool's lifetime."""
  revenueUSDAll: String

  """The total sell volume of the pool in USD over the pool's lifetime."""
  expenseUSDAll: String

  """
  The sum of pool fees generated by the pool in USD over the pool's lifetime.
  """
  poolFeesUSDAll: String

  """
  The sum of protocol fees generated by the pool in USD over the pool's lifetime.
  """
  protocolFeesUSDAll: String

  """The total number of NFTs sold by the pool over the past 24 hours."""
  nftsSold24: Int @deprecated(reason: "nftsSold24 is changing from Int to String - use nftsSold24V2 instead.")

  """The total number of NFTs sold by the pool over the past 24 hours."""
  nftsSold24V2: String

  """The total number of NFTs bought by the pool over the past 24 hours."""
  nftsBought24: Int @deprecated(reason: "nftsBought24 is changing from Int to String - use nftsBought24V2 instead.")

  """The total number of NFTs bought by the pool over the past 24 hours."""
  nftsBought24V2: String

  """The total number of NFTs bought and sold over the past 24 hours."""
  nftVolume24: Int @deprecated(reason: "nftVolume24 is changing from Int to String - use nftVolume24V2 instead.")

  """The total number of NFTs bought and sold over the past 24 hours."""
  nftVolume24V2: String

  """
  The total volume of the pool in the network's base token over the past 24 hours.
  """
  volumeNBT24: String

  """
  The total buy volume of the pool in the network's base token over the past 24 hours.
  """
  revenueNBT24: String

  """
  The total sell volume of the pool in the network's base token over the past 24 hours.
  """
  expenseNBT24: String

  """
  The sum of pool fees generated by the pool in the network's base token over the past 24 hours.
  """
  poolFeesNBT24: String

  """
  The sum of protocol fees generated by the pool in the network's base token over the past 24 hours.
  """
  protocolFeesNBT24: String

  """
  The total volume of the pool in the pool's liquidity token over the past 24 hours.
  """
  volumeT24: String

  """
  The total buy volume of the pool in the pool's liquidity token over the past 24 hours.
  """
  revenueT24: String

  """
  The total sell volume of the pool in the pool's liquidity token over the past 24 hours.
  """
  expenseT24: String

  """
  The sum of pool fees generated by the pool in the pool's liquidity token over the past 24 hours.
  """
  poolFeesT24: String

  """
  The sum of protocol fees generated by the pool in the pool's liquidity token over the past 24 hours.
  """
  protocolFeesT24: String

  """The total volume of the pool in USD over the past 24 hours."""
  volumeUSD24: String

  """The total buy volume of the pool in USD over the past 24 hours."""
  revenueUSD24: String

  """The total sell volume of the pool in USD over the past 24 hours."""
  expenseUSD24: String

  """
  The sum of pool fees generated by the pool in USD over the past 24 hours.
  """
  poolFeesUSD24: String

  """
  The sum of protocol fees generated by the pool in USD over the past 24 hours.
  """
  protocolFeesUSD24: String
}

"""Input type of `NftPoolFilters`."""
input NftPoolFilters {
  """The number of NFTs in the pool."""
  nftBalance: NftPoolNumberFilter

  """The pool liquidity in the network's base token."""
  balanceNBT: NftPoolNumberFilter

  """The current sell price of the pool in the network's base token."""
  sellNBT: NftPoolNumberFilter

  """
  The price at which the pool is willing to buy an NFT in the network's base token.
  """
  offerNBT: NftPoolNumberFilter

  """The pool liquidity in USD."""
  balanceUSD: NftPoolNumberFilter

  """The current sell price of the pool in USD."""
  sellUSD: NftPoolNumberFilter

  """The price at which the pool is willing to buy an NFT in USD."""
  offerUSD: NftPoolNumberFilter

  """The number of NFTs sold over the pool's lifetime."""
  nftsSoldAll: NftPoolNumberFilter

  """The number of NFTs bought over the pool's lifetime."""
  nftsBoughtAll: NftPoolNumberFilter

  """The number of NFTs bought or sold over the pool's lifetime."""
  nftVolumeAll: NftPoolNumberFilter

  """
  The total volume of the pool in the network's base token over the pool's lifetime.
  """
  volumeNBTAll: NftPoolNumberFilter

  """
  The total buy volume of the pool in the network's base token over the pool's lifetime.
  """
  revenueNBTAll: NftPoolNumberFilter

  """
  The total sell volume of the pool in the network's base token over the pool's lifetime.
  """
  expenseNBTAll: NftPoolNumberFilter

  """
  The sum of fees generated by the pool in the network's base token over the pool's lifetime.
  """
  poolFeesNBTAll: NftPoolNumberFilter

  """
  The sum of protocol fees generated by the pool in the network's base token over the pool's lifetime.
  """
  protocolFeesNBTAll: NftPoolNumberFilter

  """The total volume of the pool in USD over the pool's lifetime."""
  volumeUSDAll: NftPoolNumberFilter

  """The total buy volume of the pool in USD over the pool's lifetime."""
  revenueUSDAll: NftPoolNumberFilter

  """The total sell volume of the pool in USD over the pool's lifetime."""
  expenseUSDAll: NftPoolNumberFilter

  """The sum of fees generated by the pool in USD over the pool's lifetime."""
  poolFeesUSDAll: NftPoolNumberFilter

  """
  The sum of protocol fees generated by the pool in USD over the pool's lifetime.
  """
  protocolFeesUSDAll: NftPoolNumberFilter

  """The number of NFTs sold over the past 24 hours."""
  nftsSold24: NftPoolNumberFilter

  """The number of NFTs bought over the past 24 hours."""
  nftsBought24: NftPoolNumberFilter

  """The number of NFTs bought or sold over the past 24 hours."""
  nftVolume24: NftPoolNumberFilter

  """
  The total volume of the pool in the network's base token over the past 24 hours.
  """
  volumeNBT24: NftPoolNumberFilter

  """
  The total buy volume of the pool in the network's base token over the past 24 hours.
  """
  revenueNBT24: NftPoolNumberFilter

  """
  The total sell volume of the pool in the network's base token over the past 24 hours.
  """
  expenseNBT24: NftPoolNumberFilter

  """
  The sum of fees generated by the pool in the network's base token in the past 24 hours.
  """
  poolFeesNBT24: NftPoolNumberFilter

  """
  The sum of protocol fees generated by the pool in the network's base token over the past 24 hours.
  """
  protocolFeesNBT24: NftPoolNumberFilter

  """The total volume of the pool in USD over the past 24 hours."""
  volumeUSD24: NftPoolNumberFilter

  """The total buy volume of the pool in USD over the past 24 hours."""
  revenueUSD24: NftPoolNumberFilter

  """The total sell volume of the pool in USD over the past 24 hours."""
  expenseUSD24: NftPoolNumberFilter

  """The sum of fees generated by the pool in USD in the past 24 hours."""
  poolFeesUSD24: NftPoolNumberFilter

  """
  The sum of protocol fees generated by the pool in USD over the past 24 hours.
  """
  protocolFeesUSD24: NftPoolNumberFilter

  """The list of network IDs to filter by."""
  network: [Int]

  """The list of NFT AMM marketplace addresses to filter by."""
  exchangeAddress: [String]

  """The contract address of the NFT collection."""
  collectionAddress: [String]

  """
  For ERC1155 pools, the list of NFT token IDs that are accepted by the pool.
  """
  acceptedNftTokenIds: [String]

  """The wallet address of the pool owner."""
  ownerAddress: [String]
}

"""Event data for depositing an NFT into a pool."""
type NftPoolNftDepositEventData {
  """The type of NFT pool event, `NFT_DEPOSIT`."""
  type: NftPoolEventType!

  """The list of NFT token IDs deposited."""
  nftTokenIds: [String!]!

  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!
}

"""Event data for depositing an NFT into a pool."""
type NftPoolNftDepositEventDataV2 {
  """The type of NFT pool event, `NFT_DEPOSIT`."""
  type: NftPoolEventType!

  """The list of NFT token IDs deposited."""
  nftTokenIds: [String!]!

  """The amount of each NFT token deposited."""
  nftTokenAmounts: [String!]!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!
}

"""Event data for withdrawing an NFT from a pool."""
type NftPoolNftWithdrawalEventData {
  """The type of NFT pool event, `NFT_WITHDRAWAL`."""
  type: NftPoolEventType!

  """The NFT token IDs withdrawn."""
  nftTokenIds: [String!]!

  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!
}

"""Event data for withdrawing an NFT from a pool."""
type NftPoolNftWithdrawalEventDataV2 {
  """The type of NFT pool event, `NFT_WITHDRAWAL`."""
  type: NftPoolEventType!

  """The list of NFT token IDs withdrawn."""
  nftTokenIds: [String!]!

  """The amount of each NFT token withdrawn."""
  nftTokenAmounts: [String!]!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!
}

"""Input type of `NftPoolNumberFilter`."""
input NftPoolNumberFilter {
  """Greater than or equal to."""
  gte: String

  """Greater than."""
  gt: String

  """Less than or equal to."""
  lte: String

  """Less than."""
  lt: String
}

type NftPoolOwnershipTransferredEventDataV2 {
  """The type of NFT pool event, `OWNERSHIP_TRANSFERRED`."""
  type: NftPoolEventType!

  """The new owner of the pool."""
  newOwner: String!
}

"""Input type of `NftPoolRanking`."""
input NftPoolRanking {
  """The attribute to rank NFT pools by."""
  attribute: NftPoolRankingAttribute

  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank NFT pools."""
enum NftPoolRankingAttribute {
  balanceNBT
  balanceUSD
  expenseNBT24
  expenseNBTAll
  expenseUSD24
  expenseUSDAll
  nftBalance
  nftsBought24
  nftsBoughtAll
  nftsSold24
  nftsSoldAll
  nftVolume24
  nftVolumeAll
  offerNBT
  offerUSD
  poolFeesNBT24
  poolFeesNBTAll
  poolFeesUSD24
  poolFeesUSDAll
  protocolFeesNBT24
  protocolFeesNBTAll
  protocolFeesUSD24
  protocolFeesUSDAll
  revenueNBT24
  revenueNBTAll
  revenueUSD24
  revenueUSDAll
  sellNBT
  sellUSD
  volumeNBT24
  volumeNBTAll
  volumeUSD24
  volumeUSDAll
}

"""An NFT pool."""
type NftPoolResponse {
  """
  The ID of the NFT pool (`poolAddress`:`networkId`). For example, `0xdbea289dcc10eed8431e78753414a3d81b8e7201:1`.
  """
  poolId: String!

  """
  The contract address of the liquidity token of the pool (usually WETH).
  """
  tokenAddress: String!

  """The contract address of the NFT collection."""
  collectionAddress: String!

  """The contract name of the NFT collection."""
  collectionName: String!

  """The symbol of the NFT collection."""
  collectionSymbol: String

  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String!

  """The contract address of the NFT pool."""
  poolAddress: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The type of liquidity pool."""
  poolType: NftPoolType!

  """The pool variant. Can be `ERC20` or `NATIVE`."""
  poolVariant: GraphQlNftPoolVariant!

  """
  The bonding curve type that defines how the prices of NFTs change after each buy or sell within a pool.
  """
  bondingCurveType: BondingCurveType!

  """The contract address of the bonding curve."""
  bondingCurveAddress: String!

  """
  The wallet address that will receive the tokens or NFT sent to the pair during swaps.
  """
  assetRecipientAddress: String!

  """The current delta used in the bonding curve."""
  delta: String!

  """The wallet address of the pool owner."""
  owner: String!

  """The current fee for pool."""
  fee: String!
  poolFeesAllTimeT: String
  poolFeesAllTimeNBT: String

  """
  The current price at which the pool is willing to sell an NFT in the network's base token. Only applicable for `SELL` and `BUY_AND_SELL` pool types.
  """
  floorNBT: String

  """
  The current price at which the pool is willing to buy an NFT in the network's base token. Only applicable for `BUY` and `BUY_AND_SELL` pool types.
  """
  offerNBT: String

  """The spot price in the network's base token."""
  spotPriceNBT: String!

  """The current pool liquidity in the network's base token."""
  balanceNBT: String!

  """The current number of NFTs in the pool."""
  nftBalance: Int @deprecated(reason: "nftBalance is changing from Int to String - use nftBalanceV2 instead.")

  """The current number of NFTs in the pool."""
  nftBalanceV2: String!

  """
  The total volume of the pool in the network's base token over the pool's lifetime.
  """
  volumeAllTimeNBT: String!

  """
  The current price at which the pool is willing to sell an NFT in the pool's liquidity token. Only applicable for `SELL` and `BUY_AND_SELL` pool types.
  """
  floorT: String

  """
  The current price at which the pool is willing to buy an NFT in the pool's liquidity token. Only applicable for `BUY` and `BUY_AND_SELL` pool types.
  """
  offerT: String

  """
  The instantaneous price for selling 1 NFT to the pool in the pool's liquidity token.
  """
  spotPriceT: String!

  """The current pool liquidity in the pool's liquidity token."""
  balanceT: String!

  """
  The total volume of the pool in the pool's liquidity token over the pool's lifetime.
  """
  volumeAllTimeT: String!

  """The total number of NFTs bought and sold over the pool's lifetime."""
  nftVolumeAllTime: Int! @deprecated(reason: "nftVolumeAllTime is changing from Int to String - use nftVolumeAllTimeV2 instead.")

  """The total number of NFTs bought and sold over the pool's lifetime."""
  nftVolumeAllTimeV2: String!

  """The list of NFT assets in the pool."""
  nftAssets: [NftAsset]

  """The type of NFT in the pool."""
  poolNftType: PoolNftType

  """
  The list of royalties for the pool. Only applicable for `SUDOSWAP_V2` pools.
  """
  royalties: [NftPoolRoyalty]

  """The property checker contract address for the pool."""
  propertyChecker: String

  """The NFT pool contract version. Can be `SUDOSWAP_V1` or `SUDOSWAP_V2`."""
  version: NftPoolContractVersion

  """
  For ERC1155 pools, the list of NFT token IDs that are accepted by the pool.
  """
  acceptedNftTokenIds: [String]
}

"""The royalty for a SUDOSWAP_V2 pool."""
type NftPoolRoyalty {
  """The wallet address of recipient."""
  recipient: String

  """The royalty percent."""
  percent: String
}

"""Event data for updating the spot price of a pool."""
type NftPoolSpotPriceUpdateEventData {
  """The type of NFT pool event, `SPOT_PRICE_UPDATE`."""
  type: NftPoolEventType!

  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!

  """
  The updated price at which the pool is willing to sell an NFT in the pool's liquidity token.
  """
  newSellPriceT: String!

  """
  The updated price at which the pool is willing to buy an NFT in the pool's liquidity token.
  """
  newBuyPriceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for updating the spot price of a pool."""
type NftPoolSpotPriceUpdateEventDataV2 {
  """The type of NFT pool event, `SPOT_PRICE_UPDATE`."""
  type: NftPoolEventType!

  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!

  """
  The updated price at which the pool is willing to sell an NFT in the pool's liquidity token.
  """
  newSellPriceT: String!

  """
  The updated price at which the pool is willing to buy an NFT in the pool's liquidity token.
  """
  newBuyPriceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Stats for an NFT pool."""
type NftPoolStatsResponse {
  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The contract address of the NFT collection."""
  collectionAddress: String!

  """The unix timestamp for the start of the time frame."""
  startTime: Int!

  """The unix timestamp for the end of the time frame."""
  endTime: Int!

  """The contract address of the NFT pool."""
  poolAddress: String

  """The total number of NFTs bought and sold over the time frame."""
  nftVolumeV2: String

  """The total number of NFTs bought over the time frame."""
  nftsBoughtV2: String

  """The total number of NFTs sold over the time frame."""
  nftsSoldV2: String

  """The number of NFTs in the pool at the start of the time frame."""
  openNftBalanceV2: String

  """The number of NFTs in the pool at the end of the time frame."""
  closeNftBalanceV2: String

  """
  The total volume of the pool in the network's base token over the time frame.
  """
  volumeNBT: String

  """
  The total buy volume of the pool in the network's base token over the time frame.
  """
  revenueNBT: String

  """
  The total sell volume of the pool in the network's base token over the time frame.
  """
  expenseNBT: String

  """
  The sum of pool fees generated by the pool in the network's base token over the time frame.
  """
  poolFeesNBT: String

  """
  The sum of protocol fees generated by the pool in the network's base token over the time frame.
  """
  protocolFeesNBT: String

  """
  The lowest price at which the pool was willing to sell an NFT in the network's base token over the time frame.
  """
  lowFloorNBT: String

  """
  The highest price at which the pool was willing to sell an NFT in the network's base token over the time frame.
  """
  highFloorNBT: String

  """
  The lowest price at which the pool was willing to buy an NFT in the network's base token over the time frame.
  """
  lowOfferNBT: String

  """
  The highest price at which the pool was willing to buy an NFT in the network's base token over the time frame.
  """
  highOfferNBT: String

  """
  The pool liquidity in the network's base token at the start of the time frame.
  """
  openBalanceNBT: String

  """
  The pool liquidity in the network's base token at the end of the time frame.
  """
  closeBalanceNBT: String
}

"""Event data for depositing a token into a pool."""
type NftPoolTokenDepositEventData {
  """The type of NFT pool event, `TOKEN_DEPOSIT`."""
  type: NftPoolEventType!

  """The total value of token deposited in the pool's liquidity token."""
  amountT: String!

  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for depositing a token into a pool."""
type NftPoolTokenDepositEventDataV2 {
  """The type of NFT pool event, `TOKEN_DEPOSIT`."""
  type: NftPoolEventType!

  """The total value of token deposited in the pool's liquidity token."""
  amountT: String!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for withdrawing a token from a pool."""
type NftPoolTokenWithdrawalEventData {
  """The type of NFT pool event, `TOKEN_WITHDRAWAL`."""
  type: NftPoolEventType!

  """The total value of token withdrawn in the pool's liquidity token."""
  amountT: String!

  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for withdrawing a token from a pool."""
type NftPoolTokenWithdrawalEventDataV2 {
  """The type of NFT pool event, `TOKEN_WITHDRAWAL`."""
  type: NftPoolEventType!

  """The total value of token withdrawn in the pool's liquidity token."""
  amountT: String!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""The pool type selected by the pool creator."""
enum NftPoolType {
  BUY
  SELL
  BUY_AND_SELL
}

"""The level of NFTs to search."""
enum NftSearchable {
  Asset
  Collection
}

"""Response returned by `searchNfts`."""
type NftSearchResponse {
  """A list of NFT collections matching a given query string."""
  items: [NftSearchResponseCollection]

  """The number of additional results found."""
  hasMore: Int!
}

"""An NFT collection matching a given query string."""
type NftSearchResponseCollection {
  """The ID of the NFT collection (`address`:`networkId`)."""
  id: String!

  """The contract address of the NFT collection."""
  address: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The name of the NFT collection. For example, `Bored Ape Yacht Club`."""
  name: String

  """The symbol of the NFT collection. For example, `BAYC`."""
  symbol: String

  """
  The image URL for the collection or one of the assets within the collection.
  """
  imageUrl: String

  """The trade volume in USD over the `window`."""
  volume: String!

  """The change in volume between the previous and current `window`."""
  volumeChange: Float!

  """The trade count over the `window`."""
  tradeCount: String!

  """The change in trade count between the previous and current `window`."""
  tradeCountChange: Float!

  """The lowest sale price over the `window`."""
  floor: String!

  """The average sale price over the `window`."""
  average: String!

  """The highest sale price over the `window`."""
  ceiling: String!

  """The time frame used for calculating stats."""
  window: String!
}

"""Number metrics for NFT stats."""
type NftStatsNumberMetrics {
  """The total value for the current window."""
  current: Float

  """The total value for the previous window."""
  previous: Float

  """The percent change between the `current` and `previous`."""
  change: Float
}

"""String metrics for NFT stats."""
type NftStatsStringMetrics {
  """The total value for the current window."""
  current: String

  """The total value for the previous window."""
  previous: String

  """The percent change between the `current` and `previous`."""
  change: Float
}

"""NFT stats for a given time frame."""
input NftStatsWindowFilter {
  """The currency stats in USD, such as volume."""
  usd: statsCurrency

  """The currency stats in the network's base token, such as volume."""
  networkBaseToken: statsCurrency

  """The numerical stats, such as number of sales."""
  nonCurrency: statsNonCurrency
}

"""NFT stats over a time frame."""
type NftStatsWindowWithChange {
  """The unix timestamp for the start of the window."""
  startTime: Int

  """The unix timestamp for the end of the window."""
  endTime: Int

  """The currency stats in USD, such as volume."""
  usd: NftCollectionCurrencyStats

  """The currency stats in the network's base token, such as volume."""
  networkBaseToken: NftCollectionCurrencyStats

  """The numerical stats, such as number of sales."""
  nonCurrency: NftCollectionNonCurrencyStats
}

"""Input type of `NumberFilter`."""
input NumberFilter {
  """Greater than or equal to."""
  gte: Float

  """Greater than."""
  gt: Float

  """Less than or equal to."""
  lte: Float

  """Less than."""
  lt: Float
}

"""Response returned by `onBarsUpdated`."""
type OnBarsUpdatedResponse {
  """The contract address for the pair."""
  pairAddress: String!

  """The network ID the pair is deployed on."""
  networkId: Int!

  """The ID for the pair (`pairAddress`:`networkId`)."""
  pairId: String!

  """The unix timestamp for the new bar."""
  timestamp: Int!

  """The type of statistics used. Can be `Filtered` or `Unfiltered`."""
  statsType: TokenPairStatisticsType!

  """
  The sortKey for the bar (`blockNumber`#`transactionIndex`#`logIndex`, zero padded).
  For example, `0000000016414564#00000224#00000413`.
  """
  eventSortKey: String!

  """Price data broken down by resolution."""
  aggregates: ResolutionBarData!

  """The quote token within the pair."""
  quoteToken: QuoteToken
}

type OneOfNumberCondition {
  oneOf: [Int!]!
}

input OneOfNumberConditionInput {
  oneOf: [Int!]!
}

"""Metadata for a token pair."""
type Pair {
  """The contract address of the pair."""
  address: String!

  """The address for the exchange factory contract."""
  exchangeHash: String!

  """The exchange fee for swaps."""
  fee: Int

  """The ID for the pair (`address:networkId`)."""
  id: String!

  """The network ID the pair is deployed on."""
  networkId: Int!

  """
  The amount of required tick separation. Only applicable for pairs on UniswapV3.
  """
  tickSpacing: Int

  """The contract address of `token0`."""
  token0: String!

  """The contract address of `token1`."""
  token1: String!

  """The unix timestamp for the creation of the pair."""
  createdAt: Int
  token0Data: EnhancedToken
  token1Data: EnhancedToken

  """The pooled amounts of each token in the pair."""
  pooled: PooledTokenValues
}

"""Input type of `PairChartInput`."""
input PairChartInput {
  """Options that pertain to the image itself."""
  imageOptions: ChartImageOptions

  """Settings that pertain to the chart."""
  chartSettings: PairChartSettings!
}

"""Input options for the chart."""
input PairChartSettings {
  """The contract address of the pair."""
  pairAddress: String!

  """The network ID the pair is deployed on."""
  networkId: Int!

  """The unix timestamp for the start of the requested range."""
  from: Int

  """The unix timestamp for the end of the requested range."""
  to: Int

  """
  The token of interest within the token's top pair. Can be `token0` or `token1`.
  """
  quoteToken: QuoteToken

  """
  The time frame for each candle. Available options are `1`, `5`, `15`, `30`, `60`, `240`, `720`, `1D`, `7D`.
  """
  resolution: String

  """The color theme of the chart."""
  theme: ChartTheme
}

"""Response returned by `filterPairs`."""
type PairFilterConnection {
  """The list of pairs matching the filter parameters."""
  results: [PairFilterResult]

  """The number of pairs returned."""
  count: Int

  """Where in the list the server started when returning items."""
  offset: Int
}

"""Input type of `PairFilterMatchTokens`."""
input PairFilterMatchTokens {
  """The contract address of `token0` to filter by."""
  token0: String

  """The contract address of `token1` to filter by."""
  token1: String
}

"""A pair matching a set of filter parameters."""
type PairFilterResult {
  """The unix timestamp for the creation of the pair."""
  createdAt: Int

  """The unix timestamp for the last transaction to happen on the pair."""
  lastTransaction: Int

  """The number of buys in the past hour."""
  buyCount1: Int

  """The number of buys in the past 4 hours."""
  buyCount4: Int

  """The number of buys in the past 12 hours."""
  buyCount12: Int

  """The number of buys in the past 24 hours."""
  buyCount24: Int

  """Exchange metadata for the pair."""
  exchange: FilterExchange

  """The highest price in USD in the past hour."""
  highPrice1: String

  """The highest price in USD in the past 4 hours."""
  highPrice4: String

  """The highest price in USD in the past 12 hours."""
  highPrice12: String

  """The highest price in USD in the past 24 hours."""
  highPrice24: String

  """Amount of liquidity in the pair."""
  liquidity: String

  """
  The token with higher liquidity in the pair. Can be `token0` or `token1`.
  """
  liquidityToken: String

  """The token of interest. Can be `token0` or `token1`."""
  quoteToken: String

  """The lowest price in USD in the past hour."""
  lowPrice1: String

  """The lowest price in USD in the past 4 hours."""
  lowPrice4: String

  """The lowest price in USD in the past 12 hours."""
  lowPrice12: String

  """The lowest price in USD in the past 24 hours."""
  lowPrice24: String

  """The fully diluted market cap."""
  marketCap: String

  """Metadata for the pair."""
  pair: Pair

  """The token price in USD."""
  price: String

  """
  10^n, where n is the number of decimal places the price has. Max 16. Used for TradingView settings.
  """
  priceScale: String

  """The percent price change in the past hour. Decimal format."""
  priceChange1: String

  """The percent price change in the past 4 hours. Decimal format."""
  priceChange4: String

  """The percent price change in the past 12 hours. Decimal format."""
  priceChange12: String

  """The percent price change in the past 24 hours. Decimal format."""
  priceChange24: String

  """The number of sells in the past hour."""
  sellCount1: Int

  """The number of sells in the past 4 hours."""
  sellCount4: Int

  """The number of sells in the past 12 hours."""
  sellCount12: Int

  """The number of sells in the past 24 hours."""
  sellCount24: Int

  """Metadata for the first token in the pair."""
  token0: EnhancedToken

  """Metadata for the second token in the pair."""
  token1: EnhancedToken

  """The number of transactions in the past hour."""
  txnCount1: Int

  """The number of transactions in the past 4 hours."""
  txnCount4: Int

  """The number of transactions in the past 12 hours."""
  txnCount12: Int

  """The number of transactions in the past 24 hours."""
  txnCount24: Int

  """The unique number of buys in the past hour."""
  uniqueBuys1: Int

  """The unique number of buys in the past 4 hours."""
  uniqueBuys4: Int

  """The unique number of buys in the past 12 hours."""
  uniqueBuys12: Int

  """The unique number of buys in the past 24 hours."""
  uniqueBuys24: Int

  """The unique number of sells in the past hour."""
  uniqueSells1: Int

  """The unique number of sells in the past 4 hours."""
  uniqueSells4: Int

  """The unique number of sells in the past 12 hours."""
  uniqueSells12: Int

  """The unique number of sells in the past 24 hours."""
  uniqueSells24: Int

  """The unique number of transactions in the past hour."""
  uniqueTransactions1: Int

  """The unique number of transactions in the past 4 hours."""
  uniqueTransactions4: Int

  """The unique number of transactions in the past 12 hours."""
  uniqueTransactions12: Int

  """The unique number of transactions in the past 24 hours."""
  uniqueTransactions24: Int

  """The trade volume in USD in the past hour."""
  volumeUSD1: String

  """The trade volume in USD in the past 4 hours."""
  volumeUSD4: String

  """The trade volume in USD in the past 12 hours."""
  volumeUSD12: String

  """The trade volume in USD in the past 24 hours."""
  volumeUSD24: String
}

"""Input type of `PairFilters`."""
input PairFilters {
  """The unix timestamp for the creation of the pair."""
  createdAt: NumberFilter

  """The unix timestamp for the last transaction to happen on the pair."""
  lastTransaction: NumberFilter

  """The number of buys in the past hour."""
  buyCount1: NumberFilter

  """The number of buys in the past 12 hours."""
  buyCount12: NumberFilter

  """The number of buys in the past 24 hours."""
  buyCount24: NumberFilter

  """The number of buys in the past 4 hours."""
  buyCount4: NumberFilter

  """The list of exchange contract addresses to filter by."""
  exchangeAddress: [String]

  """The highest price in USD in the past hour."""
  highPrice1: NumberFilter

  """The highest price in USD in the past 12 hours."""
  highPrice12: NumberFilter

  """The highest price in USD in the past 24 hours."""
  highPrice24: NumberFilter

  """The highest price in USD in the past 4 hours."""
  highPrice4: NumberFilter

  """The amount of liquidity in the pair."""
  liquidity: NumberFilter

  """The lowest price in USD in the past hour."""
  lowPrice1: NumberFilter

  """The lowest price in USD in the past 12 hours."""
  lowPrice12: NumberFilter

  """The lowest price in USD in the past 24 hours."""
  lowPrice24: NumberFilter

  """The lowest price in USD in the past 4 hours."""
  lowPrice4: NumberFilter

  """The list of network IDs to filter by."""
  network: [Int]

  """The token price in USD."""
  price: NumberFilter

  """The percent price change in the past hour. Decimal format."""
  priceChange1: NumberFilter

  """The percent price change in the past 12 hours. Decimal format."""
  priceChange12: NumberFilter

  """The percent price change in the past 24 hours. Decimal format."""
  priceChange24: NumberFilter

  """The percent price change in the past 4 hours. Decimal format."""
  priceChange4: NumberFilter

  """The number of sells in the past hour."""
  sellCount1: NumberFilter

  """The number of sells in the past 12 hours."""
  sellCount12: NumberFilter

  """The number of sells in the past 24 hours."""
  sellCount24: NumberFilter

  """The number of sells in the past 4 hours."""
  sellCount4: NumberFilter

  """The list of token contract addresses to filter by."""
  tokenAddress: [String]

  """The number of transactions in the past hour."""
  txnCount1: NumberFilter

  """The number of transactions in the past 12 hours."""
  txnCount12: NumberFilter

  """The number of transactions in the past 24 hours."""
  txnCount24: NumberFilter

  """The number of transactions in the past 4 hours."""
  txnCount4: NumberFilter

  """The unique number of buys in the past hour."""
  uniqueBuys1: NumberFilter

  """The unique number of buys in the past 12 hours."""
  uniqueBuys12: NumberFilter

  """The unique number of buys in the past 24 hours."""
  uniqueBuys24: NumberFilter

  """The unique number of buys in the past 4 hours."""
  uniqueBuys4: NumberFilter

  """The unique number of sells in the past hour."""
  uniqueSells1: NumberFilter

  """The unique number of sells in the past 12 hours."""
  uniqueSells12: NumberFilter

  """The unique number of sells in the past 24 hours."""
  uniqueSells24: NumberFilter

  """The unique number of sells in the past 4 hours."""
  uniqueSells4: NumberFilter

  """The unique number of transactions in the past hour."""
  uniqueTransactions1: NumberFilter

  """The unique number of transactions in the past 12 hours."""
  uniqueTransactions12: NumberFilter

  """The unique number of transactions in the past 24 hours."""
  uniqueTransactions24: NumberFilter

  """The unique number of transactions in the past 4 hours."""
  uniqueTransactions4: NumberFilter

  """The trade volume in USD in the past hour."""
  volumeUSD1: NumberFilter

  """The trade volume in USD in the past 12 hours."""
  volumeUSD12: NumberFilter

  """The trade volume in USD in the past 24 hours."""
  volumeUSD24: NumberFilter

  """The trade volume in USD in the past 4 hours."""
  volumeUSD4: NumberFilter
}

"""Response returned by `onPairMetadataUpdated`."""
type PairMetadata {
  """The ID of the exchange (`exchangeAddress`:`networkId`)."""
  exchangeId: String

  """The exchange fee for swaps."""
  fee: Int

  """The ID for the pair (`pairAddress`:`networkId`)."""
  id: String!

  """The token of interest within the pair."""
  quoteToken: QuoteToken

  """The network ID that the pair is deployed on."""
  networkId: Int

  """The type of statistics used. Can be `Filtered` or `Unfiltered`."""
  statsType: TokenPairStatisticsType!

  """The amount of liquidity in the pair."""
  liquidity: String!

  """
  The token with higher liquidity in the pair. Can be `token0` or `token1`.
  """
  liquidityToken: String

  """
  The token with lower liquidity in the pair. Can be `token0` or `token1`.
  """
  nonLiquidityToken: String

  """The contract address for the pair."""
  pairAddress: String!

  """The token price in USD."""
  price: String!

  """The percent price change in the past hour."""
  priceChange1: Float

  """The percent price change in the past 4 hours."""
  priceChange4: Float

  """The percent price change in the past 12 hours."""
  priceChange12: Float

  """The percent price change in the past 24 hours."""
  priceChange24: Float

  """The percent price change in the past week."""
  priceChange1w: Float

  """
  The amount of required tick separation. Only applicable for pairs on UniswapV3.
  """
  tickSpacing: Int

  """Metadata for `token0`."""
  token0: PairMetadataToken!

  """Metadata for `token1`."""
  token1: PairMetadataToken!

  """The trade volume in USD in the past hour."""
  volume1: String

  """The trade volume in USD in the past 4 hours."""
  volume4: String

  """The trade volume in USD in the past 12 hours."""
  volume12: String

  """The trade volume in USD in the past 24 hours."""
  volume24: String

  """The trade volume in USD in the past week."""
  volume1w: String

  """The highest price in USD in the past hour."""
  highPrice1: String

  """The highest price in USD in the past 4 hours."""
  highPrice4: String

  """The highest price in USD in the past 12 hours."""
  highPrice12: String

  """The highest price in USD in the past 24 hours."""
  highPrice24: String

  """The highest price in USD in the past week."""
  highPrice1w: String

  """The lowest price in USD in the past hour."""
  lowPrice1: String

  """The lowest price in USD in the 12 hours."""
  lowPrice12: String

  """The lowest price in USD in the 24 hours."""
  lowPrice24: String

  """The lowest price in USD in the 4 hours."""
  lowPrice4: String

  """The lowest price in USD in the past week."""
  lowPrice1w: String
}

"""Metadata for a token within a pair."""
type PairMetadataToken {
  """The contract address of the token."""
  address: String!

  """
  The precision to which the token can be divided. For example, the smallest unit for USDC is 0.000001 (6 decimals).
  """
  decimals: Int

  """The token name. For example, `ApeCoin`."""
  name: String!

  """The network ID the token is deployed on."""
  networkId: Int!

  """The amount of this token in the pair."""
  pooled: String!

  """The token price in USD."""
  price: String!

  """The token symbol. For example, `APE`."""
  symbol: String!

  """A list of labels for the token."""
  labels: [ContractLabel]
}

"""Input type of `PairRanking`."""
input PairRanking {
  """The attribute to rank pairs by."""
  attribute: PairRankingAttribute

  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank tokens."""
enum PairRankingAttribute {
  createdAt
  lastTransaction
  buyCount1
  buyCount4
  buyCount12
  buyCount24
  highPrice1
  highPrice4
  highPrice12
  highPrice24
  liquidity
  lowPrice1
  lowPrice4
  lowPrice12
  lowPrice24
  marketCap
  price
  priceChange1
  priceChange4
  priceChange12
  priceChange24
  sellCount1
  sellCount4
  sellCount12
  sellCount24
  txnCount1
  txnCount4
  txnCount12
  txnCount24
  uniqueBuys1
  uniqueBuys4
  uniqueBuys12
  uniqueBuys24
  uniqueSells1
  uniqueSells4
  uniqueSells12
  uniqueSells24
  uniqueTransactions1
  uniqueTransactions4
  uniqueTransactions12
  uniqueTransactions24
  volumeUSD1
  volumeUSD4
  volumeUSD12
  volumeUSD24
}

"""A Parallel asset."""
type ParallelAsset {
  """The ID of the NFT asset (`address`:`tokenId`)."""
  id: String!

  """The contract address of the NFT collection."""
  address: String!

  """The token ID of the NFT asset."""
  tokenId: String!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The NFT asset media."""
  media: NftAssetMedia

  """The name of the NFT asset."""
  name: String

  """The description of the NFT asset."""
  description: String

  """The source image URI linked by smart contract metadata."""
  originalImage: String

  """
  The URI provided by the smart contract. Typically JSON that contains metadata.
  """
  uri: String

  """The attributes for the NFT asset."""
  attributes: [NftAssetAttribute!]

  """The game data for the NFT asset."""
  gameData: ParallelAssetGameData

  """Metadata for the NFT asset."""
  metadata: ParallelAssetMetadata
}

"""Response returned by `filterNftParallelAssets`."""
type ParallelAssetFilterConnection {
  """The list of Parallel assets matching the filter parameters."""
  results: [ParallelAssetFilterResult]

  """The number of Parallel assets returned."""
  count: Int

  """Where in the list the server started when returning items."""
  offset: Int
}

"""A Parallel asset matching a set of filter parameters."""
type ParallelAssetFilterResult {
  """The ID of the NFT asset (`address`:`tokenId`)."""
  id: String!

  """The contract address of the NFT collection."""
  address: String!

  """The token ID of the NFT asset."""
  tokenId: String!

  """The internal Parallel ID of the NFT asset."""
  parallelId: Int!

  """The network ID the NFT collection is deployed on."""
  networkId: Int!

  """The NFT asset media."""
  media: NftAssetMedia

  """The name of the NFT asset."""
  name: String

  """The description of the NFT asset."""
  description: String

  """The source image URI linked by smart contract metadata."""
  originalImage: String

  """
  The URI provided by the smart contract. Typically JSON that contains metadata.
  """
  uri: String

  """The unix timestamp for the last trade."""
  timestamp: Int

  """The last sale price in USD."""
  lastPriceUsd: String

  """The last sale price in the network's base token."""
  lastPriceNetworkBaseToken: String

  """The game data for the NFT asset."""
  gameData: ParallelAssetGameData

  """Metadata for the NFT asset."""
  metadata: ParallelAssetMetadata
}

"""Input type of `ParallelAssetFilters`."""
input ParallelAssetFilters {
  """The damage dealt when engaged in combat."""
  attack: NumberFilter

  """The energy used to play in-game."""
  cost: NumberFilter

  """The possible damage received before being destroyed."""
  health: NumberFilter

  """The total supply of this individual asset."""
  supply: NumberFilter

  """The last sale price in USD."""
  lastPriceUsd: NumberFilter

  """The last sale price in the network's base token."""
  lastPriceNetworkBaseToken: NumberFilter
}

"""Game data for a Parallel asset."""
type ParallelAssetGameData {
  """
  The rarity of the asset. Can be `Common`, `Uncommon`, `Rare`, `Legendary`, or `Prime`.
  """
  rarity: String

  """The Parallel the asset belongs to."""
  parallel: String

  """The energy used to play in-game."""
  cost: String

  """The damage dealt when engaged in combat."""
  attack: String

  """The possible damage received before being destroyed."""
  health: String

  """
  The card type. Can be `Effect`, `Relic`, `Unit`, `Upgrade` or `Paragon`.
  """
  cardType: String

  """The card subtype. Can be `Pirate`, `Vehicle` or `Clone`."""
  subtype: String

  """The description of the card's in-game abilities."""
  functionText: String

  """The description of the card's passive ability."""
  passiveAbility: String
}

"""The Parallel asset card type."""
enum ParallelAssetMatcherCardType {
  Effect
  Relic
  Unit
  Upgrade
  Paragon
}

"""The Parallel asset class."""
enum ParallelAssetMatcherClass {
  FE
  SE
  Asset
  ArtCard
  CardBack
  Masterpiece
  PL
}

"""The Parallel stream of evolution."""
enum ParallelAssetMatcherParallel {
  Augencore
  Marcolian
  Shroud
  Earthen
  Kathari
  UnknownOrigins
  Universal
}

"""The Parallel asset rarity."""
enum ParallelAssetMatcherRarity {
  Common
  Uncommon
  Rare
  Legendary
  Prime
}

"""Input type of `ParallelAssetMatchers`."""
input ParallelAssetMatchers {
  tokenId: [String]

  """The Parallel the asset belongs to."""
  parallel: [ParallelAssetMatcherParallel]

  """
  The card type. Can be `Effect`, `Relic`, `Unit`, `Upgrade` or `Paragon`.
  """
  cardType: [ParallelAssetMatcherCardType]

  """
  The card class. Can be `Art Card`, `Asset`, `Card Back`, `FE`, `Masterpiece`, `PL`, or `SE`.
  """
  class: [ParallelAssetMatcherClass]

  """The paraset the asset belongs to."""
  paraset: [String]

  """
  The list of rarities. Can be `Common`, `Uncommon`, `Rare`, `Legendary`, or `Prime`.
  """
  rarity: [ParallelAssetMatcherRarity]

  """The card subtype. Can be `Pirate`, `Vehicle` or `Clone`."""
  subtype: [ParallelAssetMatcherSubtype]

  """The expansion used for naming base and expansion sets."""
  expansion: [String]
}

"""The Parallel asset subtype."""
enum ParallelAssetMatcherSubtype {
  Pirate
  Vehicle
  Clone
}

type ParallelAssetMetadata {
  """
  The card class. Can be `Art Card`, `Asset`, `Card Back`, `FE`, `Masterpiece`, `PL`, or `SE`.
  """
  class: String

  """The total supply of this individual asset."""
  supply: String

  """
  The asset description, sourced off-chain. Usually equal to the asset's on-chain `description`.
  """
  flavourText: String

  """The expansion used for naming base and expansion sets."""
  expansion: String

  """The paraset the asset belongs to."""
  paraset: String

  """
  The ID used to match other cards with the same name but different class.
  """
  parallelId: String

  """The artist name."""
  artist: String
}

"""Input type of `ParallelAssetRanking`."""
input ParallelAssetRanking {
  """The attribute to rank Parallel assets by."""
  attribute: ParallelAssetRankingAttribute

  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""Attribute used to rank Parallel assets."""
enum ParallelAssetRankingAttribute {
  attack
  cost
  health
  supply
  lastPriceUsd
  lastPriceNetworkBaseToken
}

"""Response returned by `getParallelAssets`."""
type ParallelAssetsConnection {
  """A list of Parallel assets."""
  items: [ParallelAsset]

  """A cursor for use in pagination."""
  cursor: String
}

"""Tracked changes made to a Parallel card."""
type ParallelCardChange {
  """The token ID of the Parallel asset."""
  tokenId: String!

  """The unix timestamp for the card change."""
  timestamp: Int!

  """The Parallel card metadata before and after the card change."""
  diff: ParallelCardChangeDiff!
}

"""Parallel card metadata before and after a card change."""
type ParallelCardChangeDiff {
  """Metadata for a Parallel card before the card change."""
  old: ParallelCardChangeFields!

  """Metadata for a Parallel card after the card change."""
  new: ParallelCardChangeFields!
}

"""Metadata for a Parallel card."""
type ParallelCardChangeFields {
  """
  The ID used to match other cards with the same name but different class.
  """
  parallelId: String

  """
  The rarity of the asset. Can be `Common`, `Uncommon`, `Rare`, `Legendary`, or `Prime`.
  """
  rarity: String

  """
  The card class. Can be `Art Card`, `Asset`, `Card Back`, `FE`, `Masterpiece`, `PL`, or `SE`.
  """
  class: String

  """The total supply of this individual asset."""
  supply: String

  """The Parallel the asset belongs to."""
  parallel: String

  """The energy used to play in-game."""
  cost: String

  """The damage dealt when engaged in combat."""
  attack: String

  """The possible damage received before being destroyed."""
  health: String

  """
  The card type. Can be `Effect`, `Relic`, `Unit`, `Upgrade` or `Paragon`.
  """
  cardType: String

  """The card subtype. Can be `Pirate`, `Vehicle` or `Clone`."""
  subtype: String

  """The description of the card's in-game abilities."""
  functionText: String

  """The description of the card's passive ability."""
  passiveAbility: String

  """
  The asset description, sourced off-chain. Usually equal to the asset's on-chain `description`.
  """
  flavourText: String

  """The expansion used for naming base and expansion sets."""
  expansion: String

  """The paraset the asset belongs to."""
  paraset: String

  """The artist name."""
  artist: String
}

"""Input type of `ParallelCardChangeQueryTimestamp."""
input ParallelCardChangeQueryTimestampInput {
  """The unix timestamp for the start of the requested range."""
  from: Int

  """The unix timestamp for the end of the requested range."""
  to: Int
}

"""Response returned by `getParallelCardChanges`."""
type ParallelCardChangesConnection {
  """A cursor for use in pagination."""
  cursor: String

  """A list of tracked changes made to a Parallel card."""
  items: [ParallelCardChange]
}

enum Plan {
  ENTERPRISE
  DEFINED
  STANDARD
}

type Pnl {
  realized: Float!
  unrealized: Float!
}

input PnlInput {
  """The wallet address(es) in question"""
  walletAddresses: [String!]!

  """docs: hide"""
  balances: [BalanceInput!]

  """The tokenIds"""
  tokenIds: [String!]!

  """Cost basis calculation method, defaults to FIFO"""
  costBasisMethod: CostBasisMethod
}

type PooledTokenValues {
  token0: String
  token1: String
}

"""The type of NFT in the pool."""
enum PoolNftType {
  ERC721ETH
  ERC721ERC20
  ERC1155ETH
  ERC1155ERC20
}

"""Current or historical prices for a token."""
type Price {
  """The contract address of the token."""
  address: String!

  """The network ID the token is deployed on."""
  networkId: Int!

  """The token price in USD."""
  priceUsd: Float!

  """The unix timestamp for the price."""
  timestamp: Int!
}

type PriceEventWebhookCondition {
  tokenAddress: StringEqualsCondition!
  networkId: IntEqualsCondition!
  priceUsd: ComparisonOperator!
}

input PriceEventWebhookConditionInput {
  tokenAddress: StringEqualsConditionInput!
  networkId: IntEqualsConditionInput!
  priceUsd: ComparisonOperatorInput!
}

"""Response returned by `primeHolders`."""
type PrimeHolders {
  """A list of holders of PRIME. Each request returns 50 results."""
  items: [Balance!]!

  """The number of holders returned."""
  count: Int!

  """The cursor to use for pagination."""
  cursor: String
}

"""An Echelon Prime Pool."""
type PrimePool {
  """
  The ID of the contract-level Prime Pool (poolContractAddress:networkId). For example, `0x89bb49d06610b4b18e355504551809be5177f3d0:1`.
  """
  id: String

  """The contract address for the Prime Pool."""
  poolContractAddress: String

  """The network ID the Prime Pool is deployed on."""
  networkId: Int

  """The ID of the pool within the contract."""
  poolId: String

  """Values calculated by Defined using on-chain data."""
  calcData: PrimePoolCalcData

  """Values obtained directly from the chain."""
  chainData: PrimePoolChainData

  """When the pool was created by Defined."""
  createdAt: Int

  """The block number for when Defined discovered this pool."""
  discoveryBlockNumber: Int

  """The transaction hash of when Defined discovered this pool."""
  discoveryTransactionHash: String

  """The contract address for the tokens cached ib the pool."""
  nftContractAddress: String

  """The type of pool for this Prime Pool."""
  poolType: String

  """The Parallel tokenIds required to cache in the pool."""
  tokenIds: [String]

  """The # of cached sets in the pool."""
  totalSupply: String
}

"""A cached Prime pool asset."""
type PrimePoolAsset {
  """The Prime pool asset ID (poolContractAddress:poolId:networkId)"""
  id: String!

  """The owner wallet address of the cached Prime pool asset."""
  sortKey: String!

  """The number of cached Prime pool assets of this type by this owner."""
  amount: String!

  """The owner wallet address of the cached Prime pool asset."""
  from: String!

  """
  The owner wallet address of the cached Prime pool asset, and network ID (from:networkId).
  """
  fromHashKey: String!

  """
  The Prime pool ID and Prime pool contract address (poolId:poolContractAddress).
  """
  fromSortKey: String!

  """The network ID of the cached Prime pool asset."""
  networkId: Int!

  """THe contract address of the Prime pool."""
  poolContractAddress: String!

  """The Prime pool ID."""
  poolId: String!

  """
  The amount of ETH the user is not eligible for either from having already harvesting or from not caching in the past.
  """
  ethRewardDebt: String

  """
  The amount of PRIME the user is not eligible for either from having already harvesting or from not caching in the past.
  """
  primeRewardDebt: String
}

"""Response returned by `getPrimePoolAssets`."""
type PrimePoolAssetConnection {
  """The cursor to use for pagination."""
  cursor: String

  """The list of cached Prime pool assets returned by the query."""
  items: [PrimePoolAsset]
}

"""Event-specific data for a Prime pool Cache transaction."""
type PrimePoolCacheData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The amount of Prime pool asset(s) cached."""
  eventAmount: String!

  """
  The total supply of assets cached in this Prime pool, including the amount cached in this transaction.
  """
  totalSupply: String!

  """The owner wallet address of the cached Prime pool asset(s)."""
  user: String!

  """
  The total number of Prime pool asset(s) cached in this pool by this owner.
  """
  userCachedAmount: String!

  """
  The amount of PRIME the user is not eligible for either from having already harvesting or from not caching in the past.
  """
  userPrimeRewardDebt: String!

  """
  The amount of ETH the user is not eligible for either from having already harvesting or from not caching in the past.
  """
  userEthRewardDebt: String!
}

"""Event-specific data for a Prime pool CachingPaused transaction."""
type PrimePoolCachingPausedData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The state of caching paused set on the pool."""
  cachingPaused: Boolean!
}

type PrimePoolCalcData {
  """The amount of accumulated PRIME rewards in total for the pool."""
  poolAccumulatedPrime: String

  """The amount of accumulated PRIME rewards per share for the pool."""
  shareAccumulatedPrime: String

  """The amount of accumulated ETH rewards in total for the pool."""
  poolAccumulatedEth: String

  """The amount of accumulated ETH rewards per share for the pool."""
  shareAccumulatedEth: String

  """The amount of PRIME for the pool to pay out as caching rewards."""
  poolPrimeAmount: String

  """The amount of ETH for the pool to pay out as caching rewards."""
  poolEthAmount: String

  """The amount of PRIME paid out daily by the pool as caching rewards."""
  poolPrimePerDay: String

  """
  The amount of PRIME paid out per second by the pool as caching rewards.
  """
  poolPrimePerSecond: String

  """The amount of ETH paid out daily by the pool as caching rewards."""
  poolEthPerDay: String

  """The amount of ETH paid out per second by the pool as caching rewards."""
  poolEthPerSecond: String

  """
  The amount of PRIME paid out daily by the pool, per share of the pool's total cached supply.
  """
  sharePrimePerDay: String

  """
  The amount of PRIME paid out per second by the pool, per share of the pool's total cached supply.
  """
  sharePrimePerSecond: String

  """
  The amount of ETH paid out daily by the pool, per share of the pool's total cached supply.
  """
  shareEthPerDay: String

  """
  The amount of ETH paid out per second by the pool, per share of the pool's total cached supply.
  """
  shareEthPerSecond: String
}

"""Values obtained directly from the chain."""
type PrimePoolChainData {
  """Whether caching is paused for this pool."""
  cachingPaused: Boolean

  """How much ETH has been claimed for this pool."""
  ethClaimed: String

  """How much ETH reward has been accrued for this pool."""
  ethReward: String

  """The pool's allocation of the contract's per-second ETH rewards."""
  ethAllocPoint: String

  """
  Total share points of the contract's per-second ETH rewards to the pool.
  """
  ethTotalAllocPoint: String

  """Caching ETH rewards period start timestamp."""
  ethStartTimestamp: Int

  """Caching ETH rewards period end timestamp."""
  ethEndTimestamp: Int

  """Last timestamp at which ETH rewards were assigned."""
  ethLastRewardTimestamp: Int

  """Minimum number of timed cache seconds per ETH."""
  ethTimedCachePeriod: String

  """The pool's allocation of the contract's per second PRIME rewards."""
  primeAllocPoint: String

  """
  Total share points of the contract's per second PRIME rewards to the pool.
  """
  primeTotalAllocPoint: String

  """Caching rewards period start timestamp."""
  primeStartTimestamp: String

  """Caching rewards period end timestamp."""
  primeEndTimestamp: Int

  """Last timestamp at which PRIME rewards were assigned."""
  primeLastRewardTimestamp: Int
}

"""Event-specific data for a Prime pool ClaimEth transaction."""
type PrimePoolClaimEthData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The wallet address claiming ETH rewards."""
  user: String!

  """The amount of ETH claimed."""
  eventAmount: String!

  """The currency type of the event."""
  currency: PrimePoolCurrency!

  """
  The amount of ETH the user is not eligible for either from having already harvesting or from not caching in the past.
  """
  userEthRewardDebt: String!

  """The total amount of ETH claimed for a pool."""
  ethClaimed: String
}

"""Event-specific data for a Prime pool ClaimPrime transaction."""
type PrimePoolClaimPrimeData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The wallet address claiming PRIME rewards."""
  user: String!

  """The amount of PRIME claimed."""
  eventAmount: String!

  """The currency type of the event."""
  currency: PrimePoolCurrency!

  """The total amount of PRIME claimed for a pool."""
  userPrimeRewardDebt: String!
}

"""Response returned by `getPrimePools`."""
type PrimePoolConnection {
  """A cursor for use in pagination."""
  cursor: String

  """A list of prime pools."""
  items: [PrimePool]
}

"""Currency types for Prime pool events."""
enum PrimePoolCurrency {
  ETH
  PRIME
}

"""Event-specific data for a Prime pool EmergencyWithdraw transaction."""
type PrimePoolEmergencyWithdrawData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The wallet address emergency withdrawing from the pool."""
  user: String!

  """The amount of Prime pool asset(s) emergency withdrawn."""
  eventAmount: String!

  """The total supply of assets cached in this Prime pool."""
  totalSupply: String!

  """
  The updated total number of Prime pool asset(s) cached in this pool by this owner.
  """
  userCachedAmount: String!

  """
  The amount of PRIME the user is not eligible for either from having already harvesting or from not caching in the past.
  """
  userPrimeRewardDebt: String!

  """
  The amount of ETH the user is not eligible for either from having already harvesting or from not caching in the past.
  """
  userEthRewardDebt: String!
}

"""
Event-specific data for a Prime pool EndTimestampUpdatedEth transaction.
"""
type PrimePoolEndTimestampUpdatedEthData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The currency type of the event."""
  currency: PrimePoolCurrency!

  """The updated ETH reward start timestamp for the pool."""
  ethStartTimestamp: Int!

  """The updated ETH reward end timestamp for the pool."""
  ethEndTimestamp: Int!

  """The updated reward per second for the pool."""
  ethPerSecond: String!
}

"""
Event-specific data for a Prime pool EndTimestampUpdatedPrime transaction.
"""
type PrimePoolEndTimestampUpdatedPrimeData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The currency type of the event."""
  currency: PrimePoolCurrency!

  """The updated PRIME reward start timestamp for the pool."""
  primeStartTimestamp: Int!

  """The updated PRIME reward end timestamp for the pool."""
  primeEndTimestamp: Int!

  """The updated reward per second for the pool."""
  primePerSecond: String!
}

"""Event-specific data for a Prime pool LogUpdatePool transaction."""
type PrimePoolEthRewardsAddedData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The amount of ETH rewards added to the pool."""
  amount: String!

  """The total ETH rewards for the pool."""
  totalRewards: String!
}

"""Event-specific data for a Prime pool EthRewardsSet transaction."""
type PrimePoolEthRewardsSetData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The amount of ETH rewards set for the pool."""
  amount: String!

  """The total ETH rewards for the pool."""
  totalRewards: String!
}

"""A Prime pool event."""
type PrimePoolEvent {
  """The Prime pool event ID (poolContractAddress:poolId:networkId)"""
  id: String!

  """
  The sort key of the Prime pool event (blockNumber:transactionIndex:logIndex).
  """
  sortKey: String!

  """The blockHash of the Prime pool event."""
  blockHash: String!

  """The blockNumber of the Prime pool event."""
  blockNumber: Int!

  """The event data for the Prime pool event."""
  data: PrimePoolEventData!

  """The Prime pool event type."""
  eventType: PrimePoolEventType!

  """The Prime pool event's calling address."""
  from: String!

  """
  The Prime pool event's calling address, and network ID (from:networkId).
  """
  fromHashKey: String!

  """The logIndex of the Prime pool event."""
  logIndex: Int!

  """The network ID of the Prime pool event."""
  networkId: Int!

  """The Prime pool contract address."""
  poolContractAddress: String!

  """The Prime pool ID."""
  poolId: String!

  """The Prime pool type."""
  poolType: PrimePoolType!

  """The timestamp of the Prime pool event."""
  timestamp: Int!

  """The transactionHash of the Prime pool event."""
  transactionHash: String!

  """The transactionIndex of the Prime pool event."""
  transactionIndex: Int!
}

"""Response returned by `getPrimePoolEvents`."""
type PrimePoolEventConnection {
  """The cursor to use for pagination."""
  cursor: String

  """The list of Prime pool events returned by the query."""
  items: [PrimePoolEvent]
}

"""Event-specific data for a Prime pool transaction."""
union PrimePoolEventData = PrimePoolCacheData | PrimePoolCachingPausedData | PrimePoolClaimEthData | PrimePoolClaimPrimeData | PrimePoolEmergencyWithdrawData | PrimePoolEndTimestampUpdatedEthData | PrimePoolEndTimestampUpdatedPrimeData | PrimePoolEthRewardsAddedData | PrimePoolEthRewardsSetData | PrimePoolLogPoolAdditionData | PrimePoolLogPoolSetAllocPointData | PrimePoolLogSetPerSecondData | PrimePoolLogUpdatePoolData | PrimePoolRewardDecreaseData | PrimePoolRewardIncreaseData | PrimePoolTimeCachePeriodUpdateData | PrimePoolWithdrawData

"""A Prime pool event type."""
enum PrimePoolEventType {
  CACHE
  CACHING_PAUSED
  CLAIM
  EMERGENCY_WITHDRAW
  END_TIMESTAMP_UPDATED
  ETH_REWARDS_ADDED
  ETH_REWARDS_SET
  LOG_POOL_ADDITION
  LOG_POOL_SET_ALLOC_POINT
  LOG_SET_PER_SECOND
  LOG_UPDATE_POOL
  POOL_DISCOVERED
  REWARD_DECREASE
  REWARD_INCREASE
  TIME_CACHE_PERIOD_UPDATED
  WITHDRAW
}

"""Input Type of `PrimePoolQuery`"""
input PrimePoolInput {
  """The address of the pool contract."""
  address: String!

  """The network that the pool is deployed on."""
  networkId: Int!

  """Optional list of pool ids to fetch."""
  poolIds: [String]
}

"""
Event-specific data for a Prime pool LogPoolAddition (new Prime pool) transaction.
"""
type PrimePoolLogPoolAdditionData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The token ID's added to the new Prime pool."""
  tokenIds: [String!]!
}

"""Event-specific data for a Prime pool LogPoolSetAllocPoint transaction."""
type PrimePoolLogPoolSetAllocPointData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The currency type of the event."""
  currency: PrimePoolCurrency!

  """
  The updated alloc point for the pool (the pool's share of the contract's total rewards).
  """
  allocPoint: String!

  """
  The updated total alloc point for the pool (the sum of all pools' alloc points).
  """
  totalAllocPoint: String!
}

"""Event-specific data for a Prime pool LogSetPerSecond transaction."""
type PrimePoolLogSetPerSecondData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The currency type of the event."""
  currency: PrimePoolCurrency!

  """The updated reward per second for the pool."""
  amount: String!

  """The updated reward start timestamp for the pool."""
  startTimestamp: Int!

  """The updated reward end timestamp for the pool."""
  endTimestamp: Int!

  """The updated PRIME reward per second for the pool."""
  primeAmountPerSecond: String

  """The updated ETH reward per second for the pool."""
  ethAmountPerSecond: String
}

"""Event-specific data for a Prime pool LogUpdatePool transaction."""
type PrimePoolLogUpdatePoolData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The timestamp at which rewards were last assigned."""
  lastRewardTimestamp: Int!

  """
  The total amount of assets cached in the pool (emitted by the event, before the transaction).
  """
  supply: String!

  """
  The total amount of assets cached in the pool (queried from the pool after the transaction).
  """
  totalSupply: String!

  """The amount of accumulated rewards per share."""
  accPerShare: String!

  """The currency type of the event."""
  currency: PrimePoolCurrency!

  """The PRIME amount of the pool."""
  primeAmount: String

  """The ETH amount of the pool."""
  ethAmount: String
}

"""Event-specific data for a Prime pool RewardDecrease transaction."""
type PrimePoolRewardDecreaseData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The currency type of the event."""
  currency: PrimePoolCurrency!

  """The amount of rewards decreased."""
  eventAmount: String!

  """The updated total rewards for the pool."""
  updatedAmount: String!
}

"""Event-specific data for a Prime pool RewardIncrease transaction."""
type PrimePoolRewardIncreaseData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The currency type of the event."""
  currency: PrimePoolCurrency!

  """The amount of rewards increased."""
  eventAmount: String!

  """The updated total rewards for the pool."""
  updatedAmount: String!
}

"""
Event-specific data for a Prime pool TimeCachePeriodUpdate transaction.
"""
type PrimePoolTimeCachePeriodUpdateData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The currency type of the event."""
  currency: PrimePoolCurrency!

  """The minimum number of timed cache seconds per ETH reward."""
  timedCachePeriod: String!
}

"""The type of Prime pool caching contract."""
enum PrimePoolType {
  PRIME_REWARDS
  ETH_AND_PRIME_REWARDS
  TIMED_CACHE_ETH_AND_PRIME_REWARDS
}

"""Event-specific data for a Prime pool Withdraw transaction."""
type PrimePoolWithdrawData {
  """The Prime pool event type."""
  type: PrimePoolEventType!

  """The address of the wallet who withdrew."""
  user: String!

  """The amount of assets withdrawn."""
  eventAmount: String!

  """The updated total assets for the pool after the withdrawal."""
  totalSupply: String!

  """
  The amount of PRIME the user is not eligible for either from having already harvesting or from not caching in the past.
  """
  userPrimeRewardDebt: String!

  """
  The amount of ETH the user is not eligible for either from having already harvesting or from not caching in the past.
  """
  userEthRewardDebt: String!

  """
  The amount of cached asset the user has in the pool, following the withdrawal.
  """
  userCachedAmount: String!
}

type Query {
  """Returns a list of all networks supported on Defined."""
  getNetworks: [Network!]!

  """Returns the status of a list of networks supported on Defined."""
  getNetworkStatus(
    """The list of network IDs."""
    networkIds: [Int!]!
  ): [MetadataResponse!]
  getWebhooks(cursor: String, webhookId: String, bucketId: String, bucketSortkey: String, limit: Int): GetWebhooksResponse

  """Returns an NFT pool."""
  getNftPool(
    """The contract address of the NFT pool."""
    address: String!

    """The network ID the NFT collection is deployed on."""
    networkId: Int!
  ): NftPoolResponse

  """
  Returns transactions for an NFT collection across all NFT pools or within a given pool.
  """
  getNftPoolEvents(
    """The contract address of the NFT collection."""
    collectionAddress: String!

    """The network ID the NFT collection is deployed on."""
    networkId: Int!

    """The NFT pool address to filter by."""
    poolAddress: String

    """The event types to filter by."""
    eventTypes: [NftPoolEventType!]

    """The cursor to use for pagination."""
    cursor: String

    """The maximum number of NFT pool events to return."""
    limit: Int
  ): NftPoolEventsResponse

  """
  Returns an NFT pool collection with pool stats for a given AMM NFT marketplace.
  """
  getNftPoolCollection(
    """The contract address of the NFT collection."""
    collectionAddress: String!

    """The NFT AMM marketplace address to filter by."""
    exchangeAddress: String!

    """The network ID the NFT collection is deployed on."""
    networkId: Int!
  ): NftPoolCollectionResponse

  """
  Returns an NFT collection with pool stats for a given AMM NFT marketplace.
  """
  getNftPoolCollectionsByExchange(
    """The NFT AMM marketplace address to filter by."""
    exchangeAddress: String!

    """The network ID the NFT collection is deployed on."""
    networkId: Int!

    """The cursor to use for pagination."""
    cursor: String

    """The maximum number of NFT collections to return."""
    limit: Int
  ): GetNftPoolCollectionsResponse

  """Returns NFT pools for a given collection and AMM NFT marketplace."""
  getNftPoolsByCollectionAndExchange(
    """The contract address of the NFT collection."""
    collectionAddress: String!

    """The NFT AMM marketplace address to filter by."""
    exchangeAddress: String!

    """The network ID the NFT collection is deployed on."""
    networkId: Int!

    """The cursor to use for pagination."""
    cursor: String

    """The maximum number of NFT pools to return."""
    limit: Int
  ): GetNftPoolsResponse

  """Returns a list of NFT pools for a given owner."""
  getNftPoolsByOwner(
    """The contract address of the pool owner."""
    ownerAddress: String!

    """The network ID the NFT collection is deployed on."""
    networkId: Int!

    """The NFT AMM marketplace address to filter by."""
    exchangeAddress: String

    """The cursor to use for pagination."""
    cursor: String

    """The maximum number of NFT pools to return."""
    limit: Int
  ): GetNftPoolsResponse

  """Returns aggregated NFT pool/collection stats for a given time frame."""
  getNftPoolStats(
    """The contract address of the NFT collection."""
    collectionAddress: String!

    """The NFT AMM marketplace address to filter by."""
    exchangeAddress: String!

    """The network ID the NFT collection is deployed on."""
    networkId: Int!

    """The unix timestamp for the start of the requested range."""
    startTime: Int!

    """The unix timestamp for the end of the requested range."""
    endTime: Int!

    """The NFT pool address to filter by."""
    poolAddress: String
  ): NftPoolStatsResponse

  """Returns a list of NFT collection based on a variety of filters."""
  filterNftCollections(
    """A set of filters to apply."""
    filters: NftCollectionFilters

    """A list of ranking attributes to apply."""
    rankings: [NftCollectionRanking]

    """
    A phrase to search for. Can match a collection contract address or ID (`address`:`networkId`).
    """
    phrase: String

    """
    A list of collection contract addresses or IDs (`address`:`networkId`) to filter by.
    """
    collections: [String]

    """The maximum number of NFT collections to return."""
    limit: Int

    """
    Where in the list the server should start when returning items. Use `count`+`offset` from the previous query to request the next page of results.
    """
    offset: Int
  ): NftCollectionFilterConnection

  """Returns a list of NFT collections based on a variety of filters."""
  filterNftPoolCollections(
    """A set of filters to apply."""
    filters: NftPoolCollectionFilters

    """A phrase to search for. Can partially match an NFT collection name."""
    phrase: String

    """A list of ranking attributes to apply."""
    rankings: [NftPoolCollectionRanking]

    """The maximum number of NFT collections to return."""
    limit: Int

    """
    Where in the list the server should start when returning items. Use `count`+`page` from the previous query to request the next page of results.
    """
    offset: Int
  ): NftPoolCollectionFilterConnection

  """Returns a list of NFT collections matching a given query string."""
  searchNfts(
    """The maximum number of NFTs to return."""
    limit: Int

    """The list of network IDs to filter by."""
    networkFilter: [Int!]

    """
    The time frame to use for calculating stats. Can be `1h`, `4h`, `12h`, or `1d` (default).
    """
    window: String

    """
    The query string to search for. Can match an NFT collection contract address or partially match a collection's name or symbol.
    """
    search: String

    """
    The level of NFTs to include in the search. Can be `Asset` or `Collection`.
    """
    include: [NftSearchable!]

    """Whether to filter collections that could be linked to wash trading"""
    filterWashTrading: Boolean
  ): NftSearchResponse

  """Returns a list of NFT pools based on a variety of filters."""
  filterNftPools(
    """A set of filters to apply."""
    filters: NftPoolFilters

    """A list of ranking attributes to apply."""
    rankings: [NftPoolRanking]

    """"""
    phrase: String

    """The maximum number of NFT pools to return."""
    limit: Int

    """
    Where in the list the server should start when returning items. Use `count`+`page` from the previous query to request the next page of results.
    """
    offset: Int
  ): NftPoolFilterConnection

  """Returns stats for an NFT collection across different time frames."""
  getNftCollectionMetadata(
    """
    The ID of the NFT collection (`address`:`networkId`). For example, `0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d:1`.
    """
    collectionId: String @deprecated(reason: "Use address & networkId instead.")

    """The contract address of the NFT collection."""
    address: String

    """The network ID the NFT collection is deployed on."""
    networkId: Int
  ): NftCollectionMetadataResponse

  """Returns a list of NFT assets in a given collection."""
  getNftAssets(
    """The contract address of the NFT collection."""
    address: String!

    """The network ID the NFT collection is deployed on."""
    networkId: Int!

    """An optional list of token IDs to filter by."""
    tokenIds: [String]

    """The cursor to use for pagination."""
    cursor: String

    """The maximum number of NFT assets to return."""
    limit: Int
  ): NftAssetsConnection

  """Returns bucketed stats for a given NFT collection."""
  getDetailedNftStats(
    """The contract address of the NFT collection."""
    collectionAddress: String!

    """The network ID the NFT collection is deployed on."""
    networkId: Int!

    """
    The marketplace address to filter by. Can be used to get marketplace-specific metrics, otherwise uses all.
    """
    grouping: String

    """The unix timestamp for the stats. Defaults to current."""
    timestamp: Int

    """The list of durations to get detailed pair stats for."""
    durations: [DetailedNftStatsDuration]

    """
    The number of aggregated values to receive.<br> Note: Each duration has predetermined bucket sizes.<br> The first n-1 buckets are historical. The last bucket is a snapshot of current data.<br> duration `day1`: 6 buckets (4 hours each) plus 1 partial bucket<br> duration `hour12`: 12 buckets (1 hour each) plus 1 partial bucket<br> duration `hour4`: 8 buckets (30 min each) plus 1 partial bucket<br> duration `hour1`: 12 buckets (5 min each) plus 1 partial bucket<br> duration `min5`: 5 buckets (1 min each) plus 1 partial bucket<br> For example, requesting 11 buckets for a `min5` duration will return the last 10 minutes worth of data plus a snapshot for the current minute.
    """
    bucketCount: Int
  ): DetailedNftStats

  """Returns transactions for an NFT collection across any marketplace(s)."""
  getNftEvents(
    """The contract address of the NFT collection."""
    address: String

    """The NFT marketplace address to filter by."""
    exchangeAddress: String

    """The NFT pool address to filter by."""
    poolAddress: String

    """The network ID the NFT collection is deployed on."""
    networkId: Int!

    """The token ID to filter by."""
    tokenId: String

    """The cursor to use for pagination."""
    cursor: String

    """The time range to filter by."""
    timestamp: EventQueryTimestampInput

    """The maximum number of NFT events to return."""
    limit: Int

    """"""
    includeTransfers: Boolean
  ): NftEventsConnection

  """Returns a list of NFT collection metadata."""
  getNftContracts(
    """A list of NFT contract address and network IDs."""
    contracts: [NftContractInput]
  ): [EnhancedNftContract]

  """Returns transactions for an NFT collection across any marketplace(s)."""
  getParallelAssets(
    """An optional list of token IDs to filter by."""
    tokenIds: [String]

    """The cursor to use for pagination."""
    cursor: String

    """The maximum number of Parallel assets to return."""
    limit: Int
  ): ParallelAssetsConnection

  """Returns a list of Parallel assets based on a variety of filters."""
  filterNftParallelAssets(
    """A set of filters to apply."""
    filters: ParallelAssetFilters

    """
    A phrase to search for. Can match a Parallel asset ID (`address`:`tokenId`) or partially match a name.
    """
    phrase: String

    """A set of parameters to match."""
    match: ParallelAssetMatchers

    """A list of ranking attributes to apply."""
    rankings: [ParallelAssetRanking]

    """The maximum number of Parallel assets to return."""
    limit: Int

    """
    Where in the list the server should start when returning items. Use `count`+`offset` from the previous query to request the next page of results.
    """
    offset: Int
  ): ParallelAssetFilterConnection

  """Returns changes made to Parallel card metadata over time."""
  getParallelCardChanges(
    """The token ID for a Parallel asset."""
    tokenId: String

    """The time frame to request card changes."""
    timestamp: ParallelCardChangeQueryTimestampInput

    """The cursor to use for pagination."""
    cursor: String

    """The maximum number of Parallel card changes to return."""
    limit: Int
  ): ParallelCardChangesConnection

  """Returns a list of Prime pool cached assets."""
  getPrimePoolAssets(
    """The network ID the Prime pool is deployed on."""
    networkId: Int!

    """The contract address of the Prime pool."""
    poolContractAddress: String

    """The pool ID for the Prime pool, within the contract."""
    poolId: String

    """The owner wallet address to filter assets by."""
    walletAddress: String

    """The maximum number of Prime Pool assets to return."""
    limit: Int

    """The cursor to use for pagination."""
    cursor: String
  ): PrimePoolAssetConnection

  """Returns a list of Prime pool events."""
  getPrimePoolEvents(
    """The network ID the Prime pool is deployed on."""
    networkId: Int!

    """The contract address of the Prime pool."""
    poolContractAddress: String

    """The pool ID for the Prime pool, within the contract."""
    poolId: String

    """The calling wallet address to filter events by."""
    walletAddress: String

    """The event types to query for."""
    eventTypes: [PrimePoolEventType]

    """The maximum number of Prime Pool events to return."""
    limit: Int

    """The cursor to use for pagination."""
    cursor: String
  ): PrimePoolEventConnection

  """Returns a list of Prime pools."""
  getPrimePools(
    """The contract address for the prime pool."""
    address: String!

    """The network ID the prime pool is deployed on."""
    networkId: Int!

    """An optional list of pool IDs to filter by."""
    poolIds: [String]

    """The maximum number of Prime pools to return."""
    limit: Int

    """The cursor to use for pagination."""
    cursor: String
  ): PrimePoolConnection

  """Returns a list of tokens based on a variety of filters."""
  filterTokens(
    """A set of filters to apply."""
    filters: TokenFilters

    """docs: hide"""
    statsType: TokenPairStatisticsType

    """
    A phrase to search for. Can match a token contract address or partially match a token's name or symbol.
    """
    phrase: String

    """
    A list of token IDs (`address:networkId`). Can be left blank to discover new tokens.
    """
    tokens: [String]

    """A list of ranking attributes to apply."""
    rankings: [TokenRanking]

    """The maximum number of tokens to return."""
    limit: Int

    """
    Where in the list the server should start when returning items. Use `count`+`page` from the previous query to request the next page of results.
    """
    offset: Int
  ): TokenFilterConnection

  """Returns a list of pairs based on a variety of filters."""
  filterPairs(
    """A set of filters to apply."""
    filters: PairFilters

    """docs: hide"""
    statsType: TokenPairStatisticsType

    """
    A phrase to search for. Can match a token or pair contract address or ID (`address:networkId`), or partially match a token name or symbol.
    """
    phrase: String

    """
    A list of pair or token contract addresses or IDs (`address:networkId`) to filter by.
    """
    pairs: [String]

    """
    A set of token contract addresses that make up a pair. Can be used in place of a pair contract address.
    """
    matchTokens: PairFilterMatchTokens

    """A list of ranking attributes to apply."""
    rankings: [PairRanking]

    """The maximum number of pairs to return."""
    limit: Int

    """
    Where in the list the server should start when returning items. Use `count`+`offset` from the previous query to request the next page of results.
    """
    offset: Int
  ): PairFilterConnection

  """Returns a list of exchanges based on a variety of filters."""
  filterExchanges(
    """A set of filters to apply."""
    filters: ExchangeFilters

    """
    A phrase to search for. Can match an exchange address or ID (`address:networkId`), or partially match an exchange name.
    """
    phrase: String

    """A list of ranking attributes to apply."""
    rankings: [ExchangeRanking]

    """The maximum number of exchanges to return."""
    limit: Int

    """
    Where in the list the server should start when returning items. Use `count`+`offset` from the previous query to request the next page of results.
    """
    offset: Int
  ): ExchangeFilterConnection

  """Returns metadata for a given token."""
  getTokenInfo(
    """The contract address of the token."""
    address: String!

    """The network ID the token is deployed on."""
    networkId: Int!
  ): TokenInfo

  """
  Returns the total count of tokens on Defined. This value is updated approximately every 6 hours.
  """
  getTokenCount: String!

  """Returns metadata for a list of given tokens."""
  getTokensInfo(
    """
    A list of `GetTokensInfoInput`s. Accepts a maximum of 25 inputs (anything over will be truncated).
    """
    input: [GetTokensInfoInput!]!
  ): [TokenInfo]

  """Returns bucketed stats for a given token within a pair."""
  getDetailedStats(
    """The ID of the pair (`address:networkId`)."""
    pairId: String!

    """
    The token of interest used to calculate token-specific stats for the pair. Can be `token0` or `token1`.
    """
    tokenOfInterest: TokenOfInterest

    """The unix timestamp for the stats. Defaults to current."""
    timestamp: Int

    """The list of window sizes to get detailed stats for."""
    windowSizes: [DetailedStatsWindowSize]

    """
    The number of aggregated values to receive. Note: Each duration has predetermined bucket sizes.<br>  The first n-1 buckets are historical. The last bucket is a snapshot of current data.<br> duration `day1`: 6 buckets (4 hours each) plus 1 partial bucket<br> duration `hour12`: 12 buckets (1 hour each) plus 1 partial bucket<br> duration `hour4`: 8 buckets (30 min each) plus 1 partial bucket<br> duration `hour1`: 12 buckets (5 min each) plus 1 partial bucket<br> duration `min5`: 5 buckets (1 min each) plus 1 partial bucket<br> For example, requesting 11 buckets for a `min5` duration will return the last 10 minutes worth of data plus a snapshot for the current minute.
    """
    bucketCount: Int

    """docs: hide"""
    statsType: TokenPairStatisticsType
  ): DetailedStats @deprecated(reason: "Use `getDetailedPairStats` instead, it has more resolutions and better support")

  """Returns bucketed stats for a given token within a pair."""
  getDetailedPairStats(
    """The contract address of the pair."""
    pairAddress: String!

    """The network ID the pair is deployed on."""
    networkId: Int!

    """
    The token of interest used to calculate token-specific stats for the pair. Can be `token0` or `token1`.
    """
    tokenOfInterest: TokenOfInterest

    """The unix timestamp for the stats. Defaults to current."""
    timestamp: Int

    """The list of durations to get detailed pair stats for."""
    durations: [DetailedPairStatsDuration]

    """
    The number of aggregated values to receive. Note: Each duration has predetermined bucket sizes.<br>  The first n-1 buckets are historical. The last bucket is a snapshot of current data.<br> duration `day1`: 6 buckets (4 hours each) plus 1 partial bucket<br> duration `hour12`: 12 buckets (1 hour each) plus 1 partial bucket<br> duration `hour4`: 8 buckets (30 min each) plus 1 partial bucket<br> duration `hour1`: 12 buckets (5 min each) plus 1 partial bucket<br> duration `min5`: 5 buckets (1 min each) plus 1 partial bucket<br> For example, requesting 11 buckets for a `min5` duration will return the last 10 minutes worth of data plus a snapshot for the current minute.
    """
    bucketCount: Int

    """docs: hide"""
    statsType: TokenPairStatisticsType
  ): DetailedPairStats

  """Returns bucketed stats for a given token within a list of pairs."""
  getDetailedPairsStats(input: [GetDetailedPairsStatsInput!]!): [DetailedPairStats]

  """Returns a list of trending tokens across any given network(s)."""
  listTopTokens(
    """The maximum number of tokens to return. Max is `50`."""
    limit: Int

    """The list of network IDs to filter by."""
    networkFilter: [Int!]

    """
    The time frame for trending results. Can be `1`, `5`, `15`, `30`, `60`, `240`, `720`, or `1D`.
    """
    resolution: String
  ): [TokenWithMetadata!]

  """Returns metadata for a given pair."""
  getSymbol(
    """The ID of the pair (`address:networkId`)."""
    symbol: String!

    """
    The currency to use for the response. Can be `USD` (default) or `TOKEN`.
    """
    currencyCode: String
  ): SymbolResponse

  """Returns transactions for a pair."""
  getTokenEvents(
    """The maximum number of transactions to return."""
    limit: Int

    """The query filters to apply to the results."""
    query: EventsQueryInput!

    """The cursor to use for pagination."""
    cursor: String

    """
    The order to receive the token events. Can be `DESC` (default) or `ASC`.
    """
    direction: RankingDirection
  ): EventConnection

  """
  Returns real-time or historical prices for a list of tokens, fetched in batches.
  """
  getTokenPrices(
    """
    A list of `GetPriceInput`s. Accepts a maximum of 25 inputs (anything over will be truncated).
    """
    inputs: [GetPriceInput]
  ): [Price]

  """Returns bar chart data to track price changes over time."""
  getBars(
    """
    The ID of the pair or token (`pairAddress:networkId` or `tokenAddress:networkId`). If a token contract address is provided, the token's top pair is used. For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1` returns WETH's top pair on Ethereum.
    """
    symbol: String!

    """The unix timestamp for the start of the requested range."""
    from: Int!

    """The unix timestamp for the end of the requested range."""
    to: Int!

    """
    The time frame for each candle. Available options are `1`, `5`, `15`, `30`, `60`, `240`, `720`, `1D` and `7D`.
    """
    resolution: String!

    """
    The currency to use for the response. Can be `USD` (default) or `TOKEN`.
    """
    currencyCode: String

    """
    Whether to remove leading null values from the response. Only valid with `1D` resolution. To fetch a token's entire history, set the `from` value to `0` and set `removeLeadingNullValues` to `true. Default is `false`.
    """
    removeLeadingNullValues: Boolean

    """
    The token of interest within the token's top pair. Can be `token0` or `token1`.
    """
    quoteToken: QuoteToken

    """docs: hide"""
    statsType: TokenPairStatisticsType
  ): BarsResponse

  """Returns a list of tokens matching a given query string."""
  searchTokens(
    """The maximum number of tokens to return."""
    limit: Int

    """
    Whether to filter out low volume results from the response. Low volume is less than $500 USD. This setting has no effect when only low volume results are found. Default is `true`.
    """
    lowVolumeFilter: Boolean

    """The list of network IDs to filter by."""
    networkFilter: [Int!]

    """
    The time frame to use for token metadata. Can be `60`, `240`, `720`, or `1D`.
    """
    resolution: String

    """
    The query string to search for. Can match a token or pair contract address or partially match a token's name or symbol. Automatically filters out tokens marked as scams.
    """
    search: String!
  ): TokenSearchResponse

  """Returns a list of decentralized exchange metadata."""
  getExchanges: [Exchange!]!

  """Returns a URL for a pair chart."""
  chartUrls(
    """Input required to fetch a pair chart."""
    input: ChartInput!
  ): ChartUrlsResponse

  """Returns a list of event labels for a pair."""
  getEventLabels(
    """The ID of the pair (`address:networkId`)."""
    id: String!

    """The maximum number of event labels to return."""
    limit: Int

    """The cursor to use for pagination."""
    cursor: String

    """
    The order to receive the token event labels. Can be `DESC` (default) or `ASC`.
    """
    direction: RankingDirection
  ): EventLabelConnection

  """Find a single token by its address & network id."""
  token(
    """Input for a token ID."""
    input: TokenInput!
  ): EnhancedToken!

  """
  Find a list of tokens by their addresses & network id, with pagination.
  """
  tokens(
    """A list of token ID input."""
    ids: [TokenInput!]
  ): [EnhancedToken]!

  """Returns metadata for a pair of tokens."""
  pairMetadata(
    """The ID of the pair (`address:networkId`)."""
    pairId: String!

    """The token of interest within the pair. Can be `token0` or `token1`."""
    quoteToken: QuoteToken

    """docs: hide"""
    statsType: TokenPairStatisticsType
  ): PairMetadata!

  """Returns new tokens listed over the last three days."""
  getLatestPairs(
    """The maximum number of tokens to return."""
    limit: Int

    """The list of network IDs to filter by."""
    networkFilter: [Int!]

    """The list of exchanges to filter by."""
    exchangeFilter: [String!]

    """The minimum amount of liquidity to filter by."""
    minLiquidityFilter: Int

    """The cursor to use for pagination."""
    cursor: String
  ): LatestPairConnection

  """Returns a list of pairs containing a given token."""
  listPairsForToken(
    """The maximum number of pairs to return."""
    limit: Int

    """The network ID the token is deployed on."""
    networkId: Int!

    """The contract address of the token."""
    tokenAddress: String!
  ): [Pair]!

  """Returns a list of token metadata."""
  listFavoriteTokens(
    """The list of token IDs to filter by (`address:networkId`)."""
    keys: [String!]!

    """The list of network IDs to filter by."""
    networkFilter: [Int!]

    """
    The time frame for trending results. Can be `1`, `5`, `15`, `30`, `60`, `240`, `720`, or `1D`.
    """
    resolution: String
  ): [TokenWithMetadata!]

  """Returns a list of pair metadata for a token."""
  listPairsWithMetadataForToken(
    """The maximum number of pairs to return."""
    limit: Int

    """The network ID the token is deployed on."""
    networkId: Int!

    """The contract address of the token."""
    tokenAddress: String!
  ): ListPairsForTokenResponse!

  """Get the wallet profit and loss based on their dex trades"""
  getWalletPnl(input: PnlInput!): [WalletPnl]!

  """
  Returns a list of token simple chart data (sparklines) for the given tokens.
  """
  tokenSparklines(input: TokenSparklineInput!): [TokenSparkline!]!

  """Returns list of token balances that a wallet has"""
  balances(input: BalancesInput!): BalancesResponse!

  """
  Returns list of wallets that hold a given token, ordered by holdings descending. Also has the unique count of holders for that token
  """
  holders(input: HoldersInput!): HoldersResponse!

  """Returns a list of holders of the PRIME token on ethereum."""
  primeHolders(
    """
    Included in the results. Use the string as an argument to paginate through all the holders.
    """
    cursor: String
  ): PrimeHolders!

  """Fetch the balance of a wallet holding PRIME on ethereum"""
  primeBalance(walletAddress: String!): BalancesResponse!

  """Returns community gathered notes."""
  getCommunityNotes(input: CommunityNotesInput): CommunityNotesResponse!
}

enum QuoteCurrency {
  USD
  TOKEN
}

"""The token of interest within a pair."""
enum QuoteToken {
  token0
  token1
}

"""The order of ranking."""
enum RankingDirection {
  ASC
  DESC
}

enum RawCallTraceType {
  create
}

input RawCallTraceTypeConditionInput {
  eq: RawCallTraceType!
}

type RawCallTraceTypeCondtion {
  eq: RawCallTraceType!
}

type RawCallTraceWebhookCondition {
  traceType: RawCallTraceTypeCondtion!
  result: RawCallTraceWebhookConditionResult
  networkId: OneOfNumberCondition
}

input RawCallTraceWebhookConditionInput {
  traceType: RawCallTraceTypeConditionInput!
  result: RawCallTraceWebhookConditionResultInput
  networkId: OneOfNumberConditionInput
}

type RawCallTraceWebhookConditionResult {
  code: StringContainsCondition
}

input RawCallTraceWebhookConditionResultInput {
  code: StringContainsConditionInput
}

type RawTransactionWebhookCondition {
  networkId: OneOfNumberCondition
  to: StringEqualsCondition
  from: StringEqualsCondition
  toOrFrom: StringEqualsCondition
  input: StringContainsCondition
  ignoreTokenPairEvents: Boolean
  ignoreNftEvents: Boolean
}

input RawTransactionWebhookConditionInput {
  networkId: OneOfNumberConditionInput
  to: StringEqualsConditionInput
  from: StringEqualsConditionInput
  toOrFrom: StringEqualsConditionInput
  input: StringContainsConditionInput
  ignoreTokenPairEvents: Boolean
  ignoreNftEvents: Boolean
}

"""Price data for each supported resolution."""
type ResolutionBarData {
  """1 second resolution."""
  r1S: CurrencyBarData

  """5 second resolution."""
  r5S: CurrencyBarData

  """15 second resolution."""
  r15S: CurrencyBarData

  """1 minute resolution."""
  r1: CurrencyBarData

  """5 minute resolution."""
  r5: CurrencyBarData

  """15 minute resolution."""
  r15: CurrencyBarData

  """30 minute resolution."""
  r30: CurrencyBarData

  """60 minute resolution."""
  r60: CurrencyBarData

  """4 hour resolution."""
  r240: CurrencyBarData

  """12 hour resolution."""
  r720: CurrencyBarData

  """1 day resolution."""
  r1D: CurrencyBarData

  """1 week resolution."""
  r7D: CurrencyBarData
}

input ResolutionBarInput {
  r1S: CurrencyBarInput
  r5S: CurrencyBarInput
  r15S: CurrencyBarInput
  r1: CurrencyBarInput
  r5: CurrencyBarInput
  r15: CurrencyBarInput
  r30: CurrencyBarInput
  r60: CurrencyBarInput
  r240: CurrencyBarInput
  r720: CurrencyBarInput
  r1D: CurrencyBarInput
  r7D: CurrencyBarInput
}

type RetrySettings {
  maxTimeElapsed: Int
  minRetryDelay: Int
  maxRetryDelay: Int
  maxRetries: Int
}

input RetrySettingsInput {
  maxTimeElapsed: Int
  minRetryDelay: Int
  maxRetryDelay: Int
  maxRetries: Int
}

"""Metadata for a sandwich label"""
type SandwichedLabelData {
  """The amount of `token0` drained in the attack."""
  token0DrainedAmount: String

  """The amount of `token1` drained in the attack."""
  token1DrainedAmount: String
}

"""Metadata for a sandwich label."""
type SandwichLabelForEvent {
  """The label type, 'sandwiched'."""
  label: String!

  """The sandwich event label types."""
  sandwichType: SandwichLabelForEventType!

  """The amount of `token0` drained in the attack."""
  token0DrainedAmount: String!

  """The amount of `token1` drained in the attack."""
  token1DrainedAmount: String!
}

"""Sandwich event label types."""
enum SandwichLabelForEventType {
  sandwiched
  frontrun
  backrun
}

enum SimulateTokenContractResultStatusEnum {
  SUCCESS
  FAILURE
  PENDING
}

"""Community gathered social links of tokens/NFTs."""
type SocialLinks {
  bitcointalk: String
  blog: String
  coingecko: String
  coinmarketcap: String
  discord: String
  email: String
  facebook: String
  github: String
  instagram: String
  linkedin: String
  reddit: String
  slack: String
  telegram: String
  twitch: String
  twitter: String
  website: String
  wechat: String
  whitepaper: String
  youtube: String
}

enum SparklineAttribute {
  PRICE
}

type SparklineValue {
  timestamp: Int!
  value: Float!
}

"""Currency stats."""
input statsCurrency {
  """The volume over the time frame."""
  volume: StatsFilter

  """The volume by fillsource over the time frame."""
  volumeByFillsource: [FillsourceStatsFilter]

  """The volume percentage by fillsource over the time frame."""
  volumePercentByFillsource: [FillsourceStatsFilter]

  """The average sale price in the time frame."""
  average: StatsFilter

  """The opening price for the time frame."""
  open: StatsFilter

  """The closing price for the time frame."""
  close: StatsFilter

  """The lowest sale price in the time frame."""
  lowestSale: StatsFilter

  """The highest sale price in the time frame."""
  highestSale: StatsFilter

  """The lowest listing price for the time frame."""
  listingFloor: StatsFilter

  """The opening floor listing price for the time frame."""
  openListingFloor: StatsFilter

  """The closing floor listing price for the time frame."""
  closeListingFloor: StatsFilter

  """The highest listing price in the time frame."""
  highestListingFloor: StatsFilter
}

"""Filter for NFT stats."""
input StatsFilter {
  """The total value for the current window."""
  current: NumberFilter

  """The total value for the previous window."""
  previous: NumberFilter

  """The percent change between the `current` and `previous`."""
  change: NumberFilter
}

"""Numerical stats for an NFT collection over a time frame."""
input statsNonCurrency {
  """The number of mints over the time frame."""
  mints: StatsFilter

  """The number of sales over the time frame."""
  sales: StatsFilter

  """The number of tokens sold over the time frame."""
  tokensSold: StatsFilter

  """The number of transfers over the time frame."""
  transfers: StatsFilter

  """The number of unique buyers over the time frame."""
  uniqueBuyers: StatsFilter

  """The number of unique sellers over the time frame."""
  uniqueSellers: StatsFilter

  """The number of unique wallets (buyers or sellers) over the time frame."""
  uniqueSalesWallets: StatsFilter

  """The number of unique minters over the time frame."""
  uniqueMinters: StatsFilter
}

type StringContainsCondition {
  contains: [String!]
  notContains: [String!]
}

input StringContainsConditionInput {
  contains: [String!]
  notContains: [String!]
}

type StringEqualsCondition {
  eq: String!
}

input StringEqualsConditionInput {
  eq: String!
}

"""Input type of `StringFilter`."""
input StringFilter {
  """Greater than or equal to."""
  gte: String

  """Greater than."""
  gt: String

  """Less than or equal to."""
  lte: String

  """Less than."""
  lt: String
}

type Subscription {
  """Live-streamed bar chart data to track price changes over time."""
  onBarsUpdated(
    """The ID of the pair (`address`:`networkId`)."""
    pairId: String

    """The token of interest within the pair. Can be `token0` or `token1`."""
    quoteToken: QuoteToken

    """docs: hide"""
    statsType: TokenPairStatisticsType
  ): OnBarsUpdatedResponse

  """Live-streamed transactions for a token."""
  onEventsCreated(
    """The pair contract address."""
    address: String

    """The ID of the pair (`address`:`networkId`)."""
    id: String

    """The token of interest within the pair. Can be `token0` or `token1`."""
    quoteToken: QuoteToken
  ): AddEventsOutput

  """Live-streamed price updates for a token."""
  onPriceUpdated(
    """The token contract address."""
    address: String

    """The network ID the token is deployed on."""
    networkId: Int
  ): Price

  """Live-streamed transactions for an NFT collection."""
  onNftEventsCreated(
    """The contract address for the NFT collection."""
    address: String

    """The network ID the NFT collection is deployed on."""
    networkId: Int
  ): AddNftEventsOutput

  """Live-streamed transactions for an NFT asset."""
  onNftAssetsCreated(
    """The contract address for the NFT collection"""
    address: String

    """The network ID the NFT collection is deployed on."""
    networkId: Int

    """The token ID of the NFT asset."""
    tokenId: String
  ): NftAsset

  """Live-streamed stat updates for a given token within a pair."""
  onPairMetadataUpdated(
    """The ID of the pair (`address`:`networkId`)."""
    id: String

    """The token of interest within the pair. Can be `token0` or `token1`."""
    quoteToken: QuoteToken

    """docs: hide"""
    statsType: TokenPairStatisticsType
  ): PairMetadata

  """Live-streamed bucketed stats for a given token within a pair."""
  onDetailedStatsUpdated(
    """The ID of the pair (`address`:`networkId`)."""
    pairId: String

    """The token of interest within the pair. Can be `token0` or `token1`."""
    tokenOfInterest: TokenOfInterest

    """docs: hide"""
    statsType: TokenPairStatisticsType
  ): DetailedStats

  """Live-streamed updates for newly listed tokens."""
  onLatestPairUpdated: LatestPair

  """Live-streamed event labels for a token."""
  onEventLabelCreated(
    """The ID of the pair (`address`:`networkId`)."""
    id: String
  ): EventLabel

  """
  Live streamed nft pool events for a given pool address or collection address
  """
  onNftPoolEventsCreated(poolAddress: String, networkId: Int, collectionAddress: String, exchangeAddress: String): AddNftPoolEventsOutput
}

"""Event data for a token swap event."""
type SwapEventData {
  """
  The amount of `token0` involved in the swap. Only applicable for UniswapV3 events.
  """
  amount0: String

  """
  The amount of `token0` that was sold. Only applicable for UniswapV2 events.
  """
  amount0In: String

  """
  The amount of `token0` that was bought. Only applicable for UniswapV2 events.
  """
  amount0Out: String

  """
  The amount of `token1` involved in the swap. Only applicable for UniswapV3 events.
  """
  amount1: String

  """
  The amount of `token1` that was sold. Only applicable for UniswapV2 events.
  """
  amount1In: String

  """
  The amount of `token1` that was bought. Only applicable for UniswapV2 events.
  """
  amount1Out: String

  """
  The amount of `quoteToken` involved in the swap. For example, if `quoteToken` is USDC for a USDC/WETH pair, `amountNonLiquidityToken` would be the amount of USDC involved in the swap.
  """
  amountNonLiquidityToken: String

  """
  The price per `quoteToken` at the time of the swap in the network's base token. For example, if `quoteToken` is USDC for a USDC/WETH pair on ETH network, `priceBaseToken` would the price of USDC in ETH.
  """
  priceBaseToken: String

  """
  The total amount of `quoteToken` involved in the swap in the network's base token (`amountNonLiquidityToken` x `priceBaseToken`).
  """
  priceBaseTokenTotal: String

  """
  The price per `quoteToken` at the time of the swap in USD. For example, if `quoteToken` is USDC for a USDC/WETH pair on ETH network, `priceBaseToken` would the price of USDC in USD ($1.00).
  """
  priceUsd: String

  """
  The total amount of `quoteToken` involved in the swap in USD (`amountNonLiquidityToken` x `priceUsd`).
  """
  priceUsdTotal: String

  """
  The tick index that the swap occurred in. Only applicable for UniswapV3 events.
  """
  tick: String

  """The type of token event, `Swap`."""
  type: EventType!
}

input SwapEventDataInput {
  amount0: String
  amount0In: String
  amount0Out: String
  amount1: String
  amount1In: String
  amount1Out: String
  amountNonLiquidityToken: String
  priceBaseToken: String
  priceBaseTokenTotal: String
  priceUsd: String
  priceUsdTotal: String
  tick: String
  type: EventType!
}

input SwapEventInput {
  address: String!
  baseTokenPrice: String
  blockHash: String!
  blockNumber: Int!
  data: SwapEventDataInput
  id: String!
  liquidityToken: String
  logIndex: Int!
  maker: String
  networkId: Int!
  quoteToken: QuoteToken
  timestamp: Int!
  token0ValueBase: String
  token1ValueBase: String
  token0SwapValueUsd: String
  token1SwapValueUsd: String
  token0PoolValueUsd: String
  token1PoolValueUsd: String
  transactionHash: String!
  transactionIndex: Int!
  eventDisplayType: EventDisplayType
}

"""Event data for swapping an NFT into a pool."""
type SwapNftInPoolEventData {
  """The type of NFT pool event, `SWAP_NFT_IN_POOL`."""
  type: NftPoolEventType!

  """The ID of the token involved in the swap (`address`:`networkId`)."""
  tokenId: String!

  """The updated delta used in the bonding curve."""
  newDelta: String!

  """The fee for the pool in the pool's liquidity token."""
  poolFeeT: String!

  """The protocol fee in the pool's liquidity token."""
  protocolFeeT: String!

  """Metadata for each of the NFTs involved in the swap."""
  nftsTransfered: [NftPoolEventNftTransfer]

  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!

  """
  The updated price at which the pool is willing to sell an NFT in the pool's liquidity token.
  """
  newSellPriceT: String!

  """
  The updated price at which the pool is willing to buy an NFT in the pool's liquidity token.
  """
  newBuyPriceT: String!

  """
  The total value of all NFTs involved in the swap in the pool's liquidity token.
  """
  amountT: String!

  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for swapping an NFT into a pool."""
type SwapNftInPoolEventDataV2 {
  """The type of NFT pool event, `SWAP_NFT_IN_POOL`."""
  type: NftPoolEventType!

  """The ID of the token involved in the swap (`address`:`networkId`)."""
  tokenId: String!

  """The updated delta used in the bonding curve."""
  newDelta: String!

  """The fee for the pool in the pool's liquidity token."""
  poolFeeT: String!

  """The protocol fee in the pool's liquidity token."""
  protocolFeeT: String!

  """Metadata for each of the NFTs involved in the swap."""
  nftsTransfered: [NftPoolEventNftTransferV2]

  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!

  """
  The updated price at which the pool is willing to sell an NFT in the pool's liquidity token.
  """
  newSellPriceT: String!

  """
  The updated price at which the pool is willing to buy an NFT in the pool's liquidity token.
  """
  newBuyPriceT: String!

  """
  The total value of all NFTs involved in the swap in the pool's liquidity token.
  """
  amountT: String!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for swapping an NFT out of a pool."""
type SwapNftOutPoolEventData {
  """The type of NFT pool event, `SWAP_NFT_OUT_POOL`."""
  type: NftPoolEventType!

  """The ID of the token involved in the swap (`address`:`networkId`)."""
  tokenId: String!

  """The updated delta used in the bonding curve."""
  newDelta: String!

  """The fee for the pool in the pool's liquidity token."""
  poolFeeT: String!

  """The protocol fee in the pool's liquidity token."""
  protocolFeeT: String!

  """Metadata for each of the NFTs involved in the swap."""
  nftsTransfered: [NftPoolEventNftTransfer]

  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!

  """
  The updated price at which the pool is willing to sell an NFT in the pool's liquidity token.
  """
  newSellPriceT: String!

  """
  The updated price at which the pool is willing to buy an NFT in the pool's liquidity token.
  """
  newBuyPriceT: String!

  """
  The total value of all NFTs involved in the swap in the pool's liquidity token.
  """
  amountT: String!

  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for swapping an NFT out of a pool."""
type SwapNftOutPoolEventDataV2 {
  """The type of NFT pool event, `SWAP_NFT_OUT_POOL`."""
  type: NftPoolEventType!

  """The ID of the token involved in the swap (`address`:`networkId`)."""
  tokenId: String!

  """The updated delta used in the bonding curve."""
  newDelta: String!

  """The fee for the pool in the pool's liquidity token."""
  poolFeeT: String!

  """The protocol fee in the pool's liquidity token."""
  protocolFeeT: String!

  """Metadata for each of the NFTs involved in the swap."""
  nftsTransfered: [NftPoolEventNftTransferV2]

  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!

  """
  The updated price at which the pool is willing to sell an NFT in the pool's liquidity token.
  """
  newSellPriceT: String!

  """
  The updated price at which the pool is willing to buy an NFT in the pool's liquidity token.
  """
  newBuyPriceT: String!

  """
  The total value of all NFTs involved in the swap in the pool's liquidity token.
  """
  amountT: String!

  """
  The amount of token in the contract after the block has processed in the pool's liquidity token.
  """
  tokenBalanceT: String!

  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!

  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Response returned by `getSymbol`."""
type SymbolResponse {
  """The currencyCode argument passed in (`TOKEN` or `USD`)."""
  currency_code: String!

  """
  The trading pair. If currencyCode is TOKEN, the base token will be used, otherwise USD.
  """
  description: String!

  """The symbols of the pair."""
  name: String!

  """The base token symbol."""
  original_currency_code: String!

  """
  10^n, where n is the number of decimal places the price has. Max 16. Used for charting.
  """
  pricescale: Float!

  """The ID of the pair (`address:networkId`)."""
  ticker: String!

  """
  The list of time frames supported for the symbol in other charting endpoints, eg. getBars.
  """
  supported_resolutions: [String!]!
}

"""Response returned by `filterTokens`."""
type TokenFilterConnection {
  """The list of tokens matching the filter parameters."""
  results: [TokenFilterResult]

  """The number of tokens returned."""
  count: Int

  """Where in the list the server started when returning items."""
  page: Int
}

"""A token matching a set of filter parameters."""
type TokenFilterResult {
  """The unix timestamp for the creation of the token's first pair."""
  createdAt: Int

  """The unix timestamp for the token's last transaction."""
  lastTransaction: Int
  age: Int @deprecated(reason: "Age isn't supported - use createdAt instead")

  """The number of buys in the past hour."""
  buyCount1: Int

  """The number of buys in the past 12 hours."""
  buyCount12: Int

  """The number of buys in the past 24 hours."""
  buyCount24: Int

  """The number of buys in the past 4 hours."""
  buyCount4: Int

  """The percent price change in the past hour. Decimal format."""
  change1: String

  """The percent price change in the past 12 hours. Decimal format."""
  change12: String

  """The percent price change in the past 24 hours. Decimal format."""
  change24: String

  """The percent price change in the past 4 hours. Decimal format."""
  change4: String

  """The exchanges the token is listed on."""
  exchanges: [Exchange]
  fdv: String @deprecated(reason: "FDV isn't supported - use marketCap instead")

  """The highest price in USD in the past hour."""
  high1: String

  """The highest price in USD in the past 12 hours."""
  high12: String

  """The highest price in USD in the past 24 hours."""
  high24: String

  """The highest price in USD in the past 4 hours."""
  high4: String

  """Amount of liquidity in the token's top pair."""
  liquidity: String

  """The token of interest. Can be `token0` or `token1`."""
  quoteToken: String

  """The lowest price in USD in the past hour."""
  low1: String

  """The lowest price in USD in the past 12 hours."""
  low12: String

  """The lowest price in USD in the past 24 hours."""
  low24: String

  """The lowest price in USD in the past 4 hours."""
  low4: String

  """The market cap of circulating supply."""
  marketCap: String

  """Metadata for the token's top pair."""
  pair: Pair

  """The token price in USD."""
  priceUSD: String

  """The number of sells in the past hour."""
  sellCount1: Int

  """The number of sells in the past 12 hours."""
  sellCount12: Int

  """The number of sells in the past 24 hours."""
  sellCount24: Int

  """The number of sells in the past 4 hours."""
  sellCount4: Int

  """Metadata for the token."""
  token: EnhancedToken

  """The number of transactions in the past hour."""
  txnCount1: Int

  """The number of transactions in the past 12 hours."""
  txnCount12: Int

  """The number of transactions in the past 24 hours."""
  txnCount24: Int

  """The number of transactions in the past 4 hours."""
  txnCount4: Int

  """The unique number of buys in the past hour."""
  uniqueBuys1: Int

  """The unique number of buys in the past 12 hours."""
  uniqueBuys12: Int

  """The unique number of buys in the past 24 hours."""
  uniqueBuys24: Int

  """The unique number of buys in the past 4 hours."""
  uniqueBuys4: Int

  """The unique number of sells in the past hour."""
  uniqueSells1: Int

  """The unique number of sells in the past 12 hours."""
  uniqueSells12: Int

  """The unique number of sells in the past 24 hours."""
  uniqueSells24: Int

  """The unique number of sells in the past 4 hours."""
  uniqueSells4: Int

  """The unique number of transactions in the past hour."""
  uniqueTransactions1: Int

  """The unique number of transactions in the past 12 hours."""
  uniqueTransactions12: Int

  """The unique number of transactions in the past 24 hours."""
  uniqueTransactions24: Int

  """The unique number of transactions in the past 4 hours."""
  uniqueTransactions4: Int

  """The trade volume in USD in the past hour."""
  volume1: String

  """The trade volume in USD in the past 12 hours."""
  volume12: String

  """The trade volume in USD in the past 24 hours."""
  volume24: String

  """The trade volume in USD in the past 4 hours."""
  volume4: String

  """Whether the token has been flagged as a scam."""
  isScam: Boolean
}

"""Input type of `TokenFilters`."""
input TokenFilters {
  """The unix timestamp for the creation of the token's first pair."""
  createdAt: NumberFilter

  """The unix timestamp for the token's last transaction."""
  lastTransaction: NumberFilter
  age: NumberFilter @deprecated(reason: "Age isn't supported - use createdAt instead")

  """The number of buys in the past hour."""
  buyCount1: NumberFilter

  """The number of buys in the past 12 hours."""
  buyCount12: NumberFilter

  """The number of buys in the past 24 hours."""
  buyCount24: NumberFilter

  """The number of buys in the past 4 hours."""
  buyCount4: NumberFilter

  """The percent price change in the past hour. Decimal format."""
  change1: NumberFilter

  """The percent price change in the past 12 hours. Decimal format."""
  change12: NumberFilter

  """The percent price change in the past 24 hours. Decimal format."""
  change24: NumberFilter

  """The percent price change in the past 4 hours. Decimal format."""
  change4: NumberFilter
  fdv: NumberFilter @deprecated(reason: "FDV isn't supported - use marketCap instead")

  """The highest price in USD in the past hour."""
  high1: NumberFilter

  """The highest price in USD in the past 12 hours."""
  high12: NumberFilter

  """The highest price in USD in the past 24 hours."""
  high24: NumberFilter

  """The highest price in USD in the past 4 hours."""
  high4: NumberFilter

  """The amount of liquidity in the token's top pair."""
  liquidity: NumberFilter

  """The lowest price in USD in the past hour."""
  low1: NumberFilter

  """The lowest price in USD in the past 12 hours."""
  low12: NumberFilter

  """The lowest price in USD in the past 24 hours."""
  low24: NumberFilter

  """The lowest price in USD in the past 4 hours."""
  low4: NumberFilter

  """The market cap of circulating supply."""
  marketCap: NumberFilter

  """The network ID."""
  network: [Int]

  """The token price in USD."""
  priceUSD: NumberFilter

  """The number of sells in the past hour."""
  sellCount1: NumberFilter

  """The number of sells in the past 12 hours."""
  sellCount12: NumberFilter

  """The number of sells in the past 24 hours."""
  sellCount24: NumberFilter

  """The number of sells in the past 4 hours."""
  sellCount4: NumberFilter

  """The number of transactions in the past hour."""
  txnCount1: NumberFilter

  """The number of transactions in the past 12 hours."""
  txnCount12: NumberFilter

  """The number of transactions in the past 24 hours."""
  txnCount24: NumberFilter

  """The number of transactions in the past 4 hours."""
  txnCount4: NumberFilter

  """The unique number of buys in the past hour."""
  uniqueBuys1: NumberFilter

  """The unique number of buys in the past 12 hours."""
  uniqueBuys12: NumberFilter

  """The unique number of buys in the past 24 hours."""
  uniqueBuys24: NumberFilter

  """The unique number of buys in the past 4 hours."""
  uniqueBuys4: NumberFilter

  """The unique number of sells in the past hour."""
  uniqueSells1: NumberFilter

  """The unique number of sells in the past 12 hours."""
  uniqueSells12: NumberFilter

  """The unique number of sells in the past 24 hours."""
  uniqueSells24: NumberFilter

  """The unique number of sells in the past 4 hours."""
  uniqueSells4: NumberFilter

  """The unique number of transactions in the past hour."""
  uniqueTransactions1: NumberFilter

  """The unique number of transactions in the past 12 hours."""
  uniqueTransactions12: NumberFilter

  """The unique number of transactions in the past 24 hours."""
  uniqueTransactions24: NumberFilter

  """The unique number of transactions in the past 4 hours."""
  uniqueTransactions4: NumberFilter

  """The trade volume in USD in the past hour."""
  volume1: NumberFilter

  """The trade volume in USD in the past 12 hours."""
  volume12: NumberFilter

  """The trade volume in USD in the past 24 hours."""
  volume24: NumberFilter

  """The trade volume in USD in the past 4 hours."""
  volume4: NumberFilter

  """
  Whether to include tokens that have been flagged as scams. Default: false
  """
  includeScams: Boolean
}

"""Metadata for a token."""
type TokenInfo {
  """Uniquely identifies the token."""
  id: String!

  """The contract address of the token."""
  address: String!

  """The circulating supply of the token."""
  circulatingSupply: String

  """The token ID on CoinMarketCap."""
  cmcId: Int

  """Whether the token has been flagged as a scam."""
  isScam: Boolean

  """The token name. For example, `ApeCoin`."""
  name: String

  """The network ID the token is deployed on."""
  networkId: Int!

  """The token symbol. For example, `APE`."""
  symbol: String!

  """The total supply of the token."""
  totalSupply: String

  """The thumbnail token logo URL."""
  imageThumbUrl: String

  """The small token logo URL."""
  imageSmallUrl: String

  """The large token logo URL."""
  imageLargeUrl: String
}

"""Input type of `token` and `tokens`."""
input TokenInput {
  """The contract address of the token."""
  address: String!

  """The network ID the token is deployed on."""
  networkId: Int!
}

"""The token of interest within a pair. Can be `token0` or `token1`."""
enum TokenOfInterest {
  token0
  token1
}

enum TokenPairEventType {
  SWAP
  MINT
  BURN
  SYNC
  BUY
  SELL
  COLLECT
  COLLECT_PROTOCOL
}

type TokenPairEventTypeCondition {
  oneOf: [TokenPairEventType!]!
}

input TokenPairEventTypeConditionInput {
  oneOf: [TokenPairEventType!]!
}

type TokenPairEventWebhookCondition {
  tokenAddress: StringEqualsCondition
  networkId: OneOfNumberCondition
  swapValue: ComparisonOperator
  maker: StringEqualsCondition
  pairAddress: StringEqualsCondition
  exchangeAddress: StringEqualsCondition
  eventType: TokenPairEventTypeCondition
}

input TokenPairEventWebhookConditionInput {
  networkId: OneOfNumberConditionInput
  maker: StringEqualsConditionInput
  pairAddress: StringEqualsConditionInput
  exchangeAddress: StringEqualsConditionInput
  tokenAddress: StringEqualsConditionInput
  swapValue: ComparisonOperatorInput
  eventType: TokenPairEventTypeConditionInput
}

"""The type of statistics returned. Can be `FILTERED` or `UNFILTERED`"""
enum TokenPairStatisticsType {
  FILTERED
  UNFILTERED
}

"""Input type of `TokenRanking`."""
input TokenRanking {
  """The attribute to rank tokens by."""
  attribute: TokenRankingAttribute

  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank tokens."""
enum TokenRankingAttribute {
  createdAt
  lastTransaction
  age @deprecated(reason: "Use createdAt instead")
  buyCount1
  buyCount4
  buyCount12
  buyCount24
  change1
  change4
  change12
  change24
  high1
  high4
  high12
  high24
  liquidity
  low1
  low4
  low12
  low24
  marketCap
  priceUSD
  sellCount1
  sellCount4
  sellCount12
  sellCount24
  txnCount1
  txnCount4
  txnCount12
  txnCount24
  uniqueBuys1
  uniqueBuys4
  uniqueBuys12
  uniqueBuys24
  uniqueSells1
  uniqueSells4
  uniqueSells12
  uniqueSells24
  uniqueTransactions1
  uniqueTransactions4
  uniqueTransactions12
  uniqueTransactions24
  volume1
  volume4
  volume12
  volume24
}

"""Response returned by `searchTokens`."""
type TokenSearchResponse {
  """
  The number of additional high volume results found. Only used if `lowVolumeFilter` is set to `true`.
  """
  hasMore: Int

  """
  If `lowVolumeFilter` is set to `true`, the number of additional low volume results found.  <br>If `lowVolumeFilter` is set to `false`, the number of additional high and low volume results found.
  """
  hasMoreLowVolume: Int

  """A list of tokens."""
  tokens: [TokenWithMetadata!]
}

type TokenSparkline {
  """The token id"""
  id: String!

  """Which attribute the sparkline is charting. Defaults to `PRICE`"""
  attribute: SparklineAttribute

  """List of sparkline values to chart"""
  sparkline: [SparklineValue!]!
}

input TokenSparklineInput {
  """
  The contract address & networkId of the token, joined by a colon. ex: 0xbe042e9d09cb588331ff911c2b46fd833a3e5bd6:1
  """
  ids: [String!]!
}

"""A token with metadata."""
type TokenWithMetadata {
  """The contract address of the token."""
  address: String!

  """
  The precision to which the token can be divided. For example, the smallest unit for USDC is 0.000001 (6 decimals).
  """
  decimals: Int

  """The exchanges the token is listed on."""
  exchanges: [Exchange!]!

  """
  The ID of the token (`address:networkId`). For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1`.
  """
  id: String!

  """The total liquidity of the token's top pair in USD."""
  liquidity: String!

  """The name of the token."""
  name: String!

  """The network ID the token is deployed on."""
  networkId: Int!

  """The token price in USD."""
  price: Float!

  """The percent price change for the time frame requested. Decimal format."""
  priceChange: Float!

  """Whether the token has been flagged as a scam."""
  isScam: Boolean

  """The percent price change in the past hour. Decimal format."""
  priceChange1: Float

  """The percent price change in the past 12 hours. Decimal format."""
  priceChange12: Float

  """The percent price change in the past 24 hours. Decimal format."""
  priceChange24: Float

  """The percent price change in the past 4 hours. Decimal format."""
  priceChange4: Float

  """The token of interest. Can be `token0` or `token1`."""
  quoteToken: QuoteToken

  """The market cap of circulating supply."""
  marketCap: String

  """The number of transactions in the past hour."""
  txnCount1: Int

  """The number of transactions in the past 12 hours."""
  txnCount12: Int

  """The number of transactions in the past 24 hours."""
  txnCount24: Int

  """The number of transactions in the past 4 hours."""
  txnCount4: Int

  """The unique number of buys in the past hour."""
  uniqueBuys1: Int

  """The unique number of buys in the past 12 hours."""
  uniqueBuys12: Int

  """The unique number of buys in the past 24 hours."""
  uniqueBuys24: Int

  """The unique number of buys in the past 4 hours."""
  uniqueBuys4: Int

  """The unique number of sells in the past hour."""
  uniqueSells1: Int

  """The unique number of sells in the past 12 hours."""
  uniqueSells12: Int

  """The unique number of sells in the past 24 hours."""
  uniqueSells24: Int

  """The unique number of sells in the past 4 hours."""
  uniqueSells4: Int

  """The time frame for the results."""
  resolution: String!

  """The symbol for the token."""
  symbol: String!

  """The ID of the token's top pair (`pairAddress:networkId`)."""
  topPairId: String!

  """The volume over the time frame requested in USD."""
  volume: String!

  """The token logo URL."""
  imageThumbUrl: String

  """The token logo URL."""
  imageSmallUrl: String

  """The token logo URL."""
  imageLargeUrl: String

  """The unix timestamp for the creation of the token's first pair."""
  createdAt: Int

  """The unix timestamp for the token's last transaction."""
  lastTransaction: Int
}

input UpdateAggregateBatchInput {
  pairAddress: String!
  networkId: Int!
  pairId: String!
  timestamp: Int!
  eventSortKey: String!
  aggregates: ResolutionBarInput!
  statsType: TokenPairStatisticsType!
  quoteToken: QuoteToken
}

input UpdatePriceInput {
  address: String!
  networkId: Int!
  priceUsd: Float!
  timestamp: Int!
}

type WalletPnl {
  address: String!
  pnl: Pnl!
  tokens: [WalletTokenPnl!]!
}

type WalletTokenPnl {
  id: String!
  tokenAddress: String!
  pnl: Pnl!

  """The average buy price for the token"""
  averageEntry: Float

  """How much your investment has gained or lost in a percentage"""
  percentChange: Float
}

"""Metadata for a washtrade label."""
type WashtradeLabelForEvent {
  """The label type, 'washtrade'"""
  label: String!
}

type Webhook {
  id: String!
  webhookType: WebhookType!
  name: String!
  created: Int!
  alertRecurrence: AlertRecurrence!
  callbackUrl: String!
  status: String!
  groupId: String
  conditions: WebhookCondition!
  retrySettings: RetrySettings
  bucketId: String
  bucketSortkey: String
}

union WebhookCondition = PriceEventWebhookCondition | DecodedLogWebhookCondition | DecodedCallWebhookCondition | RawCallTraceWebhookCondition | TokenPairEventWebhookCondition | NftEventWebhookCondition | RawTransactionWebhookCondition

enum WebhookNftEventFillSource {
  GEM
  ENSVISION
  BLUR
  NFTNERDS
  OPENSEA
  RARIBLE
  FLIPXYZ
  ECHELON
  SOUNDXYZ
  COINBASE
  MAGICEDEN
  ELEMENT
  KODEX
  RESERVOIRTOOLS
  GENIE
}

enum WebhookNftEventType {
  MINT
  SALE
  TRANSFER
}

enum WebhookType {
  PRICE_EVENT
  DECODED_CALL
  DECODED_LOG
  RAW_CALL_TRACE
  NFT_EVENT
  TOKEN_PAIR_EVENT
  RAW_TRANSACTION
}

"""Price stats for a pair over a time frame."""
type WindowedDetailedCurrencyPairStats {
  """The volume over the time frame."""
  volume: DetailedPairStatsStringMetrics

  """The buy volume over the time frame."""
  buyVolume: DetailedPairStatsStringMetrics

  """The sell volume over the time frame."""
  sellVolume: DetailedPairStatsStringMetrics

  """The opening price for the time frame."""
  open: DetailedPairStatsStringMetrics

  """The highest price in USD in the time frame."""
  highest: DetailedPairStatsStringMetrics

  """The lowest price in USD in the time frame."""
  lowest: DetailedPairStatsStringMetrics

  """The closing price for the time frame."""
  close: DetailedPairStatsStringMetrics

  """The liquidity for the time frame."""
  liquidity: DetailedPairStatsStringMetrics
}

"""
Price stats for an NFT collection over a time frame. Either in USD or the network's base token.
"""
type WindowedDetailedNftCurrencyStats {
  """The volume over the time frame."""
  volume: DetailedNftStatsStringMetrics

  """The average sale price in the time frame."""
  average: DetailedNftStatsStringMetrics

  """The opening price for the time frame."""
  open: DetailedNftStatsStringMetrics

  """The highest sale price in the time frame."""
  highestSale: DetailedNftStatsStringMetrics

  """The lowest sale price in the time frame."""
  lowestSale: DetailedNftStatsStringMetrics

  """The closing price for the time frame."""
  close: DetailedNftStatsStringMetrics

  """The lowest listing price for the time frame."""
  listingFloor: DetailedNftStatsStringMetrics

  """The opening floor listing price for the time frame."""
  openListingFloor: DetailedNftStatsStringMetrics

  """The closing floor listing price for the time frame."""
  closeListingFloor: DetailedNftStatsStringMetrics

  """The highest listing price in the time frame."""
  highestListingFloor: DetailedNftStatsStringMetrics
}

"""Numerical stats for an NFT collection over a time frame."""
type WindowedDetailedNftNonCurrencyStats {
  """The number of mints over the time frame."""
  mints: DetailedNftStatsNumberMetrics

  """The number of sales over the time frame."""
  sales: DetailedNftStatsNumberMetrics

  """The number of transfers over the time frame."""
  transfers: DetailedNftStatsNumberMetrics

  """The number of tokens sold over the time frame."""
  tokensSold: DetailedNftStatsStringMetrics

  """The number of unique buyers over the time frame."""
  uniqueBuyers: DetailedNftStatsNumberMetrics

  """The number of unique sellers over the time frame."""
  uniqueSellers: DetailedNftStatsNumberMetrics

  """The number of unique wallets (buyers or sellers) over the time frame."""
  uniqueSalesWallets: DetailedNftStatsNumberMetrics

  """The number of unique minters over the time frame."""
  uniqueMinters: DetailedNftStatsNumberMetrics
}

"""Detailed NFT stats over a time frame."""
type WindowedDetailedNftStats {
  """The duration used to request detailed NFT stats."""
  duration: DetailedNftStatsDuration!

  """The unix timestamp for the start of the window."""
  start: Int!

  """The unix timestamp for the end of the window."""
  end: Int!

  """
  The list of start/end timestamps broken down for each bucket within the window.
  """
  timestamps: [DetailedNftStatsBucketTimestamp]!

  """The currency stats in USD, such as volume."""
  statsUsd: WindowedDetailedNftCurrencyStats!

  """The currency stats in the network's base token, such as volume."""
  statsNetworkBaseToken: WindowedDetailedNftCurrencyStats!

  """The numerical stats, such as number of buyers."""
  statsNonCurrency: WindowedDetailedNftNonCurrencyStats!
}

"""Numerical stats for a pair over a time frame."""
type WindowedDetailedNonCurrencyPairStats {
  """The transaction count over the time frame."""
  transactions: DetailedPairStatsNumberMetrics

  """The number of buys over the time frame."""
  buys: DetailedPairStatsNumberMetrics

  """The number of sells over the time frame."""
  sells: DetailedPairStatsNumberMetrics

  """The number of unique traders over the time frame."""
  traders: DetailedPairStatsNumberMetrics

  """The number of unique buyers over the time frame."""
  buyers: DetailedPairStatsNumberMetrics

  """The number of unique sellers over the time frame."""
  sellers: DetailedPairStatsNumberMetrics
}

"""Detailed pair stats over a time frame."""
type WindowedDetailedPairStats {
  """The duration used to request detailed pair stats."""
  duration: DetailedPairStatsDuration!

  """The unix timestamp for the start of the window."""
  start: Int!

  """The unix timestamp for the end of the window."""
  end: Int!

  """
  The list of start/end timestamps broken down for each bucket within the window.
  """
  timestamps: [DetailedPairStatsBucketTimestamp]!

  """The currency stats in USD, such as volume."""
  statsUsd: WindowedDetailedCurrencyPairStats!

  """The numerical stats, such as number of buyers."""
  statsNonCurrency: WindowedDetailedNonCurrencyPairStats!
}

"""Detailed token stats over a time frame."""
type WindowedDetailedStats {
  """The window size used to request detailed token stats."""
  windowSize: DetailedStatsWindowSize!

  """The unix timestamp for the start of the window."""
  timestamp: Int!

  """The unix timestamp for the end of the window."""
  endTimestamp: Int!

  """
  The list of start/end timestamps broken down for each bucket within the window.
  """
  buckets: [DetailedStatsBucketTimestamp]!

  """The number of transactions over the time frame."""
  transactions: DetailedStatsNumberMetrics!

  """The trade volume in USD over the time frame."""
  volume: DetailedStatsStringMetrics!

  """The number of buys over the time frame."""
  buys: DetailedStatsNumberMetrics!

  """The number of sells over the time frame."""
  sells: DetailedStatsNumberMetrics!

  """The number of unique buyers over the time frame."""
  buyers: DetailedStatsNumberMetrics!

  """The number of unique sellers over the time frame."""
  sellers: DetailedStatsNumberMetrics!

  """The number of unique traders over the time frame."""
  traders: DetailedStatsNumberMetrics

  """The buy volume in USD over the time frame."""
  buyVolume: DetailedStatsStringMetrics

  """The sell volume in USD over the time frame."""
  sellVolume: DetailedStatsStringMetrics
}