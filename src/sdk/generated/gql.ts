/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query FilterExchanges($filters: ExchangeFilters, $phrase: String, $rankings: [ExchangeRanking], $limit: Int, $offset: Int) {\n  filterExchanges(\n    filters: $filters\n    rankings: $rankings\n    limit: $limit\n    phrase: $phrase\n    offset: $offset\n  ) {\n    results {\n      exchange {\n        address\n        iconUrl\n        name\n        tradeUrl\n      }\n      dailyActiveUsers\n      monthlyActiveUsers\n      txnCount1\n      volumeNBT12\n      volumeUSD24\n    }\n  }\n}": types.FilterExchangesDocument,
    "query FilterTokens($filters: TokenFilters, $phrase: String, $tokens: [String], $rankings: [TokenRanking], $limit: Int, $offset: Int) {\n  filterTokens(\n    filters: $filters\n    phrase: $phrase\n    tokens: $tokens\n    rankings: $rankings\n    limit: $limit\n    offset: $offset\n  ) {\n    results {\n      buyCount1\n      buyCount4\n      buyCount12\n      buyCount24\n      change1\n      change4\n      change12\n      change24\n      createdAt\n      high1\n      high4\n      high12\n      high24\n      lastTransaction\n      liquidity\n      low1\n      low4\n      low12\n      low24\n      marketCap\n      priceUSD\n      quoteToken\n      sellCount1\n      sellCount4\n      sellCount12\n      sellCount24\n      txnCount1\n      txnCount4\n      txnCount12\n      txnCount24\n      uniqueBuys1\n      uniqueBuys4\n      uniqueBuys12\n      uniqueBuys24\n      uniqueSells1\n      uniqueSells4\n      uniqueSells12\n      uniqueSells24\n      uniqueTransactions1\n      uniqueTransactions4\n      uniqueTransactions12\n      uniqueTransactions24\n      volume1\n      volume4\n      volume12\n      volume24\n      pair {\n        token0\n        token1\n        pooled {\n          token0\n          token1\n        }\n      }\n      token {\n        address\n        decimals\n        name\n        networkId\n        symbol\n        info {\n          imageSmallUrl\n          circulatingSupply\n          totalSupply\n        }\n      }\n    }\n  }\n}": types.FilterTokensDocument,
    "query GetBars($symbol: String!, $from: Int!, $to: Int!, $resolution: String!, $currencyCode: String, $quoteToken: QuoteToken) {\n  getBars(\n    symbol: $symbol\n    from: $from\n    to: $to\n    resolution: $resolution\n    currencyCode: $currencyCode\n    quoteToken: $quoteToken\n  ) {\n    o\n    h\n    l\n    c\n    volume\n  }\n}": types.GetBarsDocument,
    "query GetNetworks {\n  getNetworks {\n    id\n    name\n  }\n}": types.GetNetworksDocument,
    "query PairEvents($query: EventsQueryInput!) {\n  pairEvents: getTokenEvents(query: $query) {\n    cursor\n    items {\n      address\n      baseTokenPrice\n      blockHash\n      blockNumber\n      eventDisplayType\n      eventType\n      id\n      liquidityToken\n      maker\n      networkId\n      quoteToken\n      token0PoolValueUsd\n      token0SwapValueUsd\n      timestamp\n      token0ValueBase\n      token1PoolValueUsd\n      token1SwapValueUsd\n      token1ValueBase\n      transactionHash\n      transactionIndex\n      logIndex\n    }\n  }\n}": types.PairEventsDocument,
    "query GetTokenPrice($inputs: [GetPriceInput]) {\n  getTokenPrices(inputs: $inputs) {\n    address\n    networkId\n    priceUsd\n  }\n}": types.GetTokenPriceDocument,
    "query GetSparklines($input: TokenSparklineInput!) {\n  tokenSparklines(input: $input) {\n    attribute\n    id\n    sparkline {\n      timestamp\n      value\n    }\n  }\n}": types.GetSparklinesDocument,
    "query GetSymbol($symbol: String!, $currencyCode: String) {\n  getSymbol(symbol: $symbol, currencyCode: $currencyCode) {\n    name\n    description\n    currency_code\n    supported_resolutions\n    pricescale\n    ticker\n    original_currency_code\n  }\n}": types.GetSymbolDocument,
    "query GetTokens($input: [TokenInput!]) {\n  tokens(ids: $input) {\n    address\n    decimals\n    id\n    name\n    networkId\n    symbol\n    totalSupply\n  }\n}": types.GetTokensDocument,
    "query ListTopTokens($limit: Int, $networkFilter: [Int!], $resolution: String) {\n  listTopTokens(\n    limit: $limit\n    networkFilter: $networkFilter\n    resolution: $resolution\n  ) {\n    address\n    decimals\n    exchanges {\n      address\n      id\n      name\n      iconUrl\n      networkId\n      tradeUrl\n    }\n    id\n    liquidity\n    name\n    networkId\n    price\n    resolution\n    symbol\n    topPairId\n    volume\n    uniqueBuys24\n    uniqueSells24\n    txnCount24\n    priceChange24\n  }\n}": types.ListTopTokensDocument,
    "subscription OnBarsUpdated($pairId: String, $quoteToken: QuoteToken) {\n  onBarsUpdated(pairId: $pairId, quoteToken: $quoteToken) {\n    eventSortKey\n    networkId\n    pairAddress\n    pairId\n    timestamp\n    quoteToken\n    aggregates {\n      r1 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r5 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r15 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r30 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r60 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r240 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r720 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r1D {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r7D {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n    }\n  }\n}": types.OnBarsUpdatedDocument,
    "subscription OnEventsCreated($id: String) {\n  onEventsCreated(id: $id) {\n    events {\n      address\n      baseTokenPrice\n      blockHash\n      blockNumber\n      eventDisplayType\n      eventType\n      logIndex\n      id\n      liquidityToken\n      maker\n      networkId\n      timestamp\n      token0SwapValueUsd\n      token0ValueBase\n      token1SwapValueUsd\n      token1ValueBase\n      transactionHash\n      transactionIndex\n      data {\n        ... on MintEventData {\n          amount0\n          amount1\n          amount0Shifted\n          amount1Shifted\n          tickLower\n          tickUpper\n          type\n        }\n        ... on BurnEventData {\n          amount0\n          amount1\n          amount0Shifted\n          amount1Shifted\n          tickLower\n          tickUpper\n          type\n        }\n        ... on SwapEventData {\n          amount0\n          amount0In\n          amount0Out\n          amount1\n          amount1In\n          amount1Out\n          amountNonLiquidityToken\n          priceBaseToken\n          priceBaseTokenTotal\n          priceUsd\n          priceUsdTotal\n          tick\n          type\n        }\n      }\n    }\n    address\n    id\n    networkId\n  }\n}": types.OnEventsCreatedDocument,
    "subscription OnPriceUpdated($address: String, $networkId: Int) {\n  onPriceUpdated(address: $address, networkId: $networkId) {\n    address\n    networkId\n    priceUsd\n  }\n}": types.OnPriceUpdatedDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FilterExchanges($filters: ExchangeFilters, $phrase: String, $rankings: [ExchangeRanking], $limit: Int, $offset: Int) {\n  filterExchanges(\n    filters: $filters\n    rankings: $rankings\n    limit: $limit\n    phrase: $phrase\n    offset: $offset\n  ) {\n    results {\n      exchange {\n        address\n        iconUrl\n        name\n        tradeUrl\n      }\n      dailyActiveUsers\n      monthlyActiveUsers\n      txnCount1\n      volumeNBT12\n      volumeUSD24\n    }\n  }\n}"): (typeof documents)["query FilterExchanges($filters: ExchangeFilters, $phrase: String, $rankings: [ExchangeRanking], $limit: Int, $offset: Int) {\n  filterExchanges(\n    filters: $filters\n    rankings: $rankings\n    limit: $limit\n    phrase: $phrase\n    offset: $offset\n  ) {\n    results {\n      exchange {\n        address\n        iconUrl\n        name\n        tradeUrl\n      }\n      dailyActiveUsers\n      monthlyActiveUsers\n      txnCount1\n      volumeNBT12\n      volumeUSD24\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FilterTokens($filters: TokenFilters, $phrase: String, $tokens: [String], $rankings: [TokenRanking], $limit: Int, $offset: Int) {\n  filterTokens(\n    filters: $filters\n    phrase: $phrase\n    tokens: $tokens\n    rankings: $rankings\n    limit: $limit\n    offset: $offset\n  ) {\n    results {\n      buyCount1\n      buyCount4\n      buyCount12\n      buyCount24\n      change1\n      change4\n      change12\n      change24\n      createdAt\n      high1\n      high4\n      high12\n      high24\n      lastTransaction\n      liquidity\n      low1\n      low4\n      low12\n      low24\n      marketCap\n      priceUSD\n      quoteToken\n      sellCount1\n      sellCount4\n      sellCount12\n      sellCount24\n      txnCount1\n      txnCount4\n      txnCount12\n      txnCount24\n      uniqueBuys1\n      uniqueBuys4\n      uniqueBuys12\n      uniqueBuys24\n      uniqueSells1\n      uniqueSells4\n      uniqueSells12\n      uniqueSells24\n      uniqueTransactions1\n      uniqueTransactions4\n      uniqueTransactions12\n      uniqueTransactions24\n      volume1\n      volume4\n      volume12\n      volume24\n      pair {\n        token0\n        token1\n        pooled {\n          token0\n          token1\n        }\n      }\n      token {\n        address\n        decimals\n        name\n        networkId\n        symbol\n        info {\n          imageSmallUrl\n          circulatingSupply\n          totalSupply\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query FilterTokens($filters: TokenFilters, $phrase: String, $tokens: [String], $rankings: [TokenRanking], $limit: Int, $offset: Int) {\n  filterTokens(\n    filters: $filters\n    phrase: $phrase\n    tokens: $tokens\n    rankings: $rankings\n    limit: $limit\n    offset: $offset\n  ) {\n    results {\n      buyCount1\n      buyCount4\n      buyCount12\n      buyCount24\n      change1\n      change4\n      change12\n      change24\n      createdAt\n      high1\n      high4\n      high12\n      high24\n      lastTransaction\n      liquidity\n      low1\n      low4\n      low12\n      low24\n      marketCap\n      priceUSD\n      quoteToken\n      sellCount1\n      sellCount4\n      sellCount12\n      sellCount24\n      txnCount1\n      txnCount4\n      txnCount12\n      txnCount24\n      uniqueBuys1\n      uniqueBuys4\n      uniqueBuys12\n      uniqueBuys24\n      uniqueSells1\n      uniqueSells4\n      uniqueSells12\n      uniqueSells24\n      uniqueTransactions1\n      uniqueTransactions4\n      uniqueTransactions12\n      uniqueTransactions24\n      volume1\n      volume4\n      volume12\n      volume24\n      pair {\n        token0\n        token1\n        pooled {\n          token0\n          token1\n        }\n      }\n      token {\n        address\n        decimals\n        name\n        networkId\n        symbol\n        info {\n          imageSmallUrl\n          circulatingSupply\n          totalSupply\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetBars($symbol: String!, $from: Int!, $to: Int!, $resolution: String!, $currencyCode: String, $quoteToken: QuoteToken) {\n  getBars(\n    symbol: $symbol\n    from: $from\n    to: $to\n    resolution: $resolution\n    currencyCode: $currencyCode\n    quoteToken: $quoteToken\n  ) {\n    o\n    h\n    l\n    c\n    volume\n  }\n}"): (typeof documents)["query GetBars($symbol: String!, $from: Int!, $to: Int!, $resolution: String!, $currencyCode: String, $quoteToken: QuoteToken) {\n  getBars(\n    symbol: $symbol\n    from: $from\n    to: $to\n    resolution: $resolution\n    currencyCode: $currencyCode\n    quoteToken: $quoteToken\n  ) {\n    o\n    h\n    l\n    c\n    volume\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNetworks {\n  getNetworks {\n    id\n    name\n  }\n}"): (typeof documents)["query GetNetworks {\n  getNetworks {\n    id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PairEvents($query: EventsQueryInput!) {\n  pairEvents: getTokenEvents(query: $query) {\n    cursor\n    items {\n      address\n      baseTokenPrice\n      blockHash\n      blockNumber\n      eventDisplayType\n      eventType\n      id\n      liquidityToken\n      maker\n      networkId\n      quoteToken\n      token0PoolValueUsd\n      token0SwapValueUsd\n      timestamp\n      token0ValueBase\n      token1PoolValueUsd\n      token1SwapValueUsd\n      token1ValueBase\n      transactionHash\n      transactionIndex\n      logIndex\n    }\n  }\n}"): (typeof documents)["query PairEvents($query: EventsQueryInput!) {\n  pairEvents: getTokenEvents(query: $query) {\n    cursor\n    items {\n      address\n      baseTokenPrice\n      blockHash\n      blockNumber\n      eventDisplayType\n      eventType\n      id\n      liquidityToken\n      maker\n      networkId\n      quoteToken\n      token0PoolValueUsd\n      token0SwapValueUsd\n      timestamp\n      token0ValueBase\n      token1PoolValueUsd\n      token1SwapValueUsd\n      token1ValueBase\n      transactionHash\n      transactionIndex\n      logIndex\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetTokenPrice($inputs: [GetPriceInput]) {\n  getTokenPrices(inputs: $inputs) {\n    address\n    networkId\n    priceUsd\n  }\n}"): (typeof documents)["query GetTokenPrice($inputs: [GetPriceInput]) {\n  getTokenPrices(inputs: $inputs) {\n    address\n    networkId\n    priceUsd\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetSparklines($input: TokenSparklineInput!) {\n  tokenSparklines(input: $input) {\n    attribute\n    id\n    sparkline {\n      timestamp\n      value\n    }\n  }\n}"): (typeof documents)["query GetSparklines($input: TokenSparklineInput!) {\n  tokenSparklines(input: $input) {\n    attribute\n    id\n    sparkline {\n      timestamp\n      value\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetSymbol($symbol: String!, $currencyCode: String) {\n  getSymbol(symbol: $symbol, currencyCode: $currencyCode) {\n    name\n    description\n    currency_code\n    supported_resolutions\n    pricescale\n    ticker\n    original_currency_code\n  }\n}"): (typeof documents)["query GetSymbol($symbol: String!, $currencyCode: String) {\n  getSymbol(symbol: $symbol, currencyCode: $currencyCode) {\n    name\n    description\n    currency_code\n    supported_resolutions\n    pricescale\n    ticker\n    original_currency_code\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetTokens($input: [TokenInput!]) {\n  tokens(ids: $input) {\n    address\n    decimals\n    id\n    name\n    networkId\n    symbol\n    totalSupply\n  }\n}"): (typeof documents)["query GetTokens($input: [TokenInput!]) {\n  tokens(ids: $input) {\n    address\n    decimals\n    id\n    name\n    networkId\n    symbol\n    totalSupply\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListTopTokens($limit: Int, $networkFilter: [Int!], $resolution: String) {\n  listTopTokens(\n    limit: $limit\n    networkFilter: $networkFilter\n    resolution: $resolution\n  ) {\n    address\n    decimals\n    exchanges {\n      address\n      id\n      name\n      iconUrl\n      networkId\n      tradeUrl\n    }\n    id\n    liquidity\n    name\n    networkId\n    price\n    resolution\n    symbol\n    topPairId\n    volume\n    uniqueBuys24\n    uniqueSells24\n    txnCount24\n    priceChange24\n  }\n}"): (typeof documents)["query ListTopTokens($limit: Int, $networkFilter: [Int!], $resolution: String) {\n  listTopTokens(\n    limit: $limit\n    networkFilter: $networkFilter\n    resolution: $resolution\n  ) {\n    address\n    decimals\n    exchanges {\n      address\n      id\n      name\n      iconUrl\n      networkId\n      tradeUrl\n    }\n    id\n    liquidity\n    name\n    networkId\n    price\n    resolution\n    symbol\n    topPairId\n    volume\n    uniqueBuys24\n    uniqueSells24\n    txnCount24\n    priceChange24\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription OnBarsUpdated($pairId: String, $quoteToken: QuoteToken) {\n  onBarsUpdated(pairId: $pairId, quoteToken: $quoteToken) {\n    eventSortKey\n    networkId\n    pairAddress\n    pairId\n    timestamp\n    quoteToken\n    aggregates {\n      r1 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r5 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r15 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r30 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r60 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r240 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r720 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r1D {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r7D {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n    }\n  }\n}"): (typeof documents)["subscription OnBarsUpdated($pairId: String, $quoteToken: QuoteToken) {\n  onBarsUpdated(pairId: $pairId, quoteToken: $quoteToken) {\n    eventSortKey\n    networkId\n    pairAddress\n    pairId\n    timestamp\n    quoteToken\n    aggregates {\n      r1 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r5 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r15 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r30 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r60 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r240 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r720 {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r1D {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n      r7D {\n        t\n        usd {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n        token {\n          t\n          o\n          h\n          l\n          c\n          volume\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription OnEventsCreated($id: String) {\n  onEventsCreated(id: $id) {\n    events {\n      address\n      baseTokenPrice\n      blockHash\n      blockNumber\n      eventDisplayType\n      eventType\n      logIndex\n      id\n      liquidityToken\n      maker\n      networkId\n      timestamp\n      token0SwapValueUsd\n      token0ValueBase\n      token1SwapValueUsd\n      token1ValueBase\n      transactionHash\n      transactionIndex\n      data {\n        ... on MintEventData {\n          amount0\n          amount1\n          amount0Shifted\n          amount1Shifted\n          tickLower\n          tickUpper\n          type\n        }\n        ... on BurnEventData {\n          amount0\n          amount1\n          amount0Shifted\n          amount1Shifted\n          tickLower\n          tickUpper\n          type\n        }\n        ... on SwapEventData {\n          amount0\n          amount0In\n          amount0Out\n          amount1\n          amount1In\n          amount1Out\n          amountNonLiquidityToken\n          priceBaseToken\n          priceBaseTokenTotal\n          priceUsd\n          priceUsdTotal\n          tick\n          type\n        }\n      }\n    }\n    address\n    id\n    networkId\n  }\n}"): (typeof documents)["subscription OnEventsCreated($id: String) {\n  onEventsCreated(id: $id) {\n    events {\n      address\n      baseTokenPrice\n      blockHash\n      blockNumber\n      eventDisplayType\n      eventType\n      logIndex\n      id\n      liquidityToken\n      maker\n      networkId\n      timestamp\n      token0SwapValueUsd\n      token0ValueBase\n      token1SwapValueUsd\n      token1ValueBase\n      transactionHash\n      transactionIndex\n      data {\n        ... on MintEventData {\n          amount0\n          amount1\n          amount0Shifted\n          amount1Shifted\n          tickLower\n          tickUpper\n          type\n        }\n        ... on BurnEventData {\n          amount0\n          amount1\n          amount0Shifted\n          amount1Shifted\n          tickLower\n          tickUpper\n          type\n        }\n        ... on SwapEventData {\n          amount0\n          amount0In\n          amount0Out\n          amount1\n          amount1In\n          amount1Out\n          amountNonLiquidityToken\n          priceBaseToken\n          priceBaseTokenTotal\n          priceUsd\n          priceUsdTotal\n          tick\n          type\n        }\n      }\n    }\n    address\n    id\n    networkId\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription OnPriceUpdated($address: String, $networkId: Int) {\n  onPriceUpdated(address: $address, networkId: $networkId) {\n    address\n    networkId\n    priceUsd\n  }\n}"): (typeof documents)["subscription OnPriceUpdated($address: String, $networkId: Int) {\n  onPriceUpdated(address: $address, networkId: $networkId) {\n    address\n    networkId\n    priceUsd\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;