mutation CreateWebhooks($input: CreateWebhooksInput!) {
  createWebhooks(input: $input) {
    priceWebhooks {
      id
      webhookType
      name
      created
      alertRecurrence
      callbackUrl
      status
      groupId
      conditions {
        ... on PriceEventWebhookCondition {
          tokenAddressPriceEventWebhookCondition: tokenAddress {
            eq
          }
          networkIdPriceEventWebhookCondition: networkId {
            eq
          }
          priceUsd {
            gt
            gte
            lt
            lte
            eq
          }
        }
        ... on DecodedLogWebhookCondition {
          decodingId {
            eq
          }
          eventName {
            eq
          }
          address {
            eq
          }
          event
        }
        ... on DecodedCallWebhookCondition {
          decodingId {
            eq
          }
          methodName {
            eq
          }
          address {
            eq
          }
          from {
            eq
          }
          to {
            eq
          }
          methodId {
            eq
          }
          inputDecodedCallWebhookCondition: input
          output
        }
        ... on RawCallTraceWebhookCondition {
          traceType {
            eq
          }
          result {
            code {
              contains
              notContains
            }
          }
          networkId {
            oneOf
          }
        }
        ... on TokenPairEventWebhookCondition {
          tokenAddress {
            eq
          }
          networkId {
            oneOf
          }
          swapValue {
            gt
            gte
            lt
            lte
            eq
          }
          maker {
            eq
          }
          pairAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          eventType {
            oneOf
          }
        }
        ... on NftEventWebhookCondition {
          networkId {
            oneOf
          }
          maker {
            eq
          }
          contractAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          tokenId {
            eq
          }
          tokenAddress {
            eq
          }
          individualBaseTokenPrice {
            gt
            gte
            lt
            lte
            eq
          }
          eventType {
            eq
          }
          fillSource {
            oneOf
          }
        }
        ... on RawTransactionWebhookCondition {
          networkId {
            oneOf
          }
          to {
            eq
          }
          from {
            eq
          }
          toOrFrom {
            eq
          }
          input {
            contains
            notContains
          }
          ignoreTokenPairEvents
          ignoreNftEvents
        }
      }
      retrySettings {
        maxTimeElapsed
        minRetryDelay
        maxRetryDelay
        maxRetries
      }
      bucketId
      bucketSortkey
    }
    decodedLogWebhooks {
      id
      webhookType
      name
      created
      alertRecurrence
      callbackUrl
      status
      groupId
      bucketId
      bucketSortkey
      conditions {
        ... on PriceEventWebhookCondition {
          tokenAddressPriceEventWebhookCondition: tokenAddress {
            eq
          }
          networkIdPriceEventWebhookCondition: networkId {
            eq
          }
          priceUsd {
            gt
            gte
            lt
            lte
            eq
          }
        }
        ... on DecodedLogWebhookCondition {
          decodingId {
            eq
          }
          eventName {
            eq
          }
          address {
            eq
          }
          event
        }
        ... on DecodedCallWebhookCondition {
          decodingId {
            eq
          }
          methodName {
            eq
          }
          address {
            eq
          }
          from {
            eq
          }
          to {
            eq
          }
          methodId {
            eq
          }
          inputDecodedCallWebhookCondition: input
          output
        }
        ... on RawCallTraceWebhookCondition {
          traceType {
            eq
          }
          result {
            code {
              contains
              notContains
            }
          }
          networkId {
            oneOf
          }
        }
        ... on TokenPairEventWebhookCondition {
          tokenAddress {
            eq
          }
          networkId {
            oneOf
          }
          swapValue {
            gt
            gte
            lt
            lte
            eq
          }
          maker {
            eq
          }
          pairAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          eventType {
            oneOf
          }
        }
        ... on NftEventWebhookCondition {
          networkId {
            oneOf
          }
          maker {
            eq
          }
          contractAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          tokenId {
            eq
          }
          tokenAddress {
            eq
          }
          individualBaseTokenPrice {
            gt
            gte
            lt
            lte
            eq
          }
          eventType {
            eq
          }
          fillSource {
            oneOf
          }
        }
        ... on RawTransactionWebhookCondition {
          networkId {
            oneOf
          }
          to {
            eq
          }
          from {
            eq
          }
          toOrFrom {
            eq
          }
          input {
            contains
            notContains
          }
          ignoreTokenPairEvents
          ignoreNftEvents
        }
      }
      retrySettings {
        maxTimeElapsed
        minRetryDelay
        maxRetryDelay
        maxRetries
      }
    }
    decodedCallWebhooks {
      id
      webhookType
      name
      created
      alertRecurrence
      callbackUrl
      status
      groupId
      bucketId
      bucketSortkey
      conditions {
        ... on PriceEventWebhookCondition {
          tokenAddressPriceEventWebhookCondition: tokenAddress {
            eq
          }
          networkIdPriceEventWebhookCondition: networkId {
            eq
          }
          priceUsd {
            gt
            gte
            lt
            lte
            eq
          }
        }
        ... on DecodedLogWebhookCondition {
          decodingId {
            eq
          }
          eventName {
            eq
          }
          address {
            eq
          }
          event
        }
        ... on DecodedCallWebhookCondition {
          decodingId {
            eq
          }
          methodName {
            eq
          }
          address {
            eq
          }
          from {
            eq
          }
          to {
            eq
          }
          methodId {
            eq
          }
          inputDecodedCallWebhookCondition: input
          output
        }
        ... on RawCallTraceWebhookCondition {
          traceType {
            eq
          }
          result {
            code {
              contains
              notContains
            }
          }
          networkId {
            oneOf
          }
        }
        ... on TokenPairEventWebhookCondition {
          tokenAddress {
            eq
          }
          networkId {
            oneOf
          }
          swapValue {
            gt
            gte
            lt
            lte
            eq
          }
          maker {
            eq
          }
          pairAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          eventType {
            oneOf
          }
        }
        ... on NftEventWebhookCondition {
          networkId {
            oneOf
          }
          maker {
            eq
          }
          contractAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          tokenId {
            eq
          }
          tokenAddress {
            eq
          }
          individualBaseTokenPrice {
            gt
            gte
            lt
            lte
            eq
          }
          eventType {
            eq
          }
          fillSource {
            oneOf
          }
        }
        ... on RawTransactionWebhookCondition {
          networkId {
            oneOf
          }
          to {
            eq
          }
          from {
            eq
          }
          toOrFrom {
            eq
          }
          input {
            contains
            notContains
          }
          ignoreTokenPairEvents
          ignoreNftEvents
        }
      }
      retrySettings {
        maxTimeElapsed
        minRetryDelay
        maxRetryDelay
        maxRetries
      }
    }
    rawCallTraceWebhooks {
      id
      webhookType
      name
      created
      alertRecurrence
      callbackUrl
      status
      groupId
      bucketId
      bucketSortkey
      conditions {
        ... on PriceEventWebhookCondition {
          tokenAddressPriceEventWebhookCondition: tokenAddress {
            eq
          }
          networkIdPriceEventWebhookCondition: networkId {
            eq
          }
          priceUsd {
            gt
            gte
            lt
            lte
            eq
          }
        }
        ... on DecodedLogWebhookCondition {
          decodingId {
            eq
          }
          eventName {
            eq
          }
          address {
            eq
          }
          event
        }
        ... on DecodedCallWebhookCondition {
          decodingId {
            eq
          }
          methodName {
            eq
          }
          address {
            eq
          }
          from {
            eq
          }
          to {
            eq
          }
          methodId {
            eq
          }
          inputDecodedCallWebhookCondition: input
          output
        }
        ... on RawCallTraceWebhookCondition {
          traceType {
            eq
          }
          result {
            code {
              contains
              notContains
            }
          }
          networkId {
            oneOf
          }
        }
        ... on TokenPairEventWebhookCondition {
          tokenAddress {
            eq
          }
          networkId {
            oneOf
          }
          swapValue {
            gt
            gte
            lt
            lte
            eq
          }
          maker {
            eq
          }
          pairAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          eventType {
            oneOf
          }
        }
        ... on NftEventWebhookCondition {
          networkId {
            oneOf
          }
          maker {
            eq
          }
          contractAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          tokenId {
            eq
          }
          tokenAddress {
            eq
          }
          individualBaseTokenPrice {
            gt
            gte
            lt
            lte
            eq
          }
          eventType {
            eq
          }
          fillSource {
            oneOf
          }
        }
        ... on RawTransactionWebhookCondition {
          networkId {
            oneOf
          }
          to {
            eq
          }
          from {
            eq
          }
          toOrFrom {
            eq
          }
          input {
            contains
            notContains
          }
          ignoreTokenPairEvents
          ignoreNftEvents
        }
      }
      retrySettings {
        maxTimeElapsed
        minRetryDelay
        maxRetryDelay
        maxRetries
      }
    }
    tokenPairEventWebhooks {
      id
      webhookType
      name
      created
      alertRecurrence
      callbackUrl
      status
      groupId
      bucketId
      bucketSortkey
      conditions {
        ... on PriceEventWebhookCondition {
          tokenAddressPriceEventWebhookCondition: tokenAddress {
            eq
          }
          networkIdPriceEventWebhookCondition: networkId {
            eq
          }
          priceUsd {
            gt
            gte
            lt
            lte
            eq
          }
        }
        ... on DecodedLogWebhookCondition {
          decodingId {
            eq
          }
          eventName {
            eq
          }
          address {
            eq
          }
          event
        }
        ... on DecodedCallWebhookCondition {
          decodingId {
            eq
          }
          methodName {
            eq
          }
          address {
            eq
          }
          from {
            eq
          }
          to {
            eq
          }
          methodId {
            eq
          }
          inputDecodedCallWebhookCondition: input
          output
        }
        ... on RawCallTraceWebhookCondition {
          traceType {
            eq
          }
          result {
            code {
              contains
              notContains
            }
          }
          networkId {
            oneOf
          }
        }
        ... on TokenPairEventWebhookCondition {
          tokenAddress {
            eq
          }
          networkId {
            oneOf
          }
          swapValue {
            gt
            gte
            lt
            lte
            eq
          }
          maker {
            eq
          }
          pairAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          eventType {
            oneOf
          }
        }
        ... on NftEventWebhookCondition {
          networkId {
            oneOf
          }
          maker {
            eq
          }
          contractAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          tokenId {
            eq
          }
          tokenAddress {
            eq
          }
          individualBaseTokenPrice {
            gt
            gte
            lt
            lte
            eq
          }
          eventType {
            eq
          }
          fillSource {
            oneOf
          }
        }
        ... on RawTransactionWebhookCondition {
          networkId {
            oneOf
          }
          to {
            eq
          }
          from {
            eq
          }
          toOrFrom {
            eq
          }
          input {
            contains
            notContains
          }
          ignoreTokenPairEvents
          ignoreNftEvents
        }
      }
      retrySettings {
        maxTimeElapsed
        minRetryDelay
        maxRetryDelay
        maxRetries
      }
    }
    nftEventWebhooks {
      id
      webhookType
      name
      created
      alertRecurrence
      callbackUrl
      status
      groupId
      bucketId
      bucketSortkey
      retrySettings {
        maxTimeElapsed
        minRetryDelay
        maxRetryDelay
        maxRetries
      }
      conditions {
        ... on PriceEventWebhookCondition {
          tokenAddressPriceEventWebhookCondition: tokenAddress {
            eq
          }
          networkIdPriceEventWebhookCondition: networkId {
            eq
          }
          priceUsd {
            gt
            gte
            lt
            lte
            eq
          }
        }
        ... on DecodedLogWebhookCondition {
          decodingId {
            eq
          }
          eventName {
            eq
          }
          address {
            eq
          }
          event
        }
        ... on DecodedCallWebhookCondition {
          decodingId {
            eq
          }
          methodName {
            eq
          }
          address {
            eq
          }
          from {
            eq
          }
          to {
            eq
          }
          methodId {
            eq
          }
          inputDecodedCallWebhookCondition: input
          output
        }
        ... on RawCallTraceWebhookCondition {
          traceType {
            eq
          }
          result {
            code {
              contains
              notContains
            }
          }
          networkId {
            oneOf
          }
        }
        ... on TokenPairEventWebhookCondition {
          tokenAddress {
            eq
          }
          networkId {
            oneOf
          }
          swapValue {
            gt
            gte
            lt
            lte
            eq
          }
          maker {
            eq
          }
          pairAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          eventType {
            oneOf
          }
        }
        ... on NftEventWebhookCondition {
          networkId {
            oneOf
          }
          maker {
            eq
          }
          contractAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          tokenId {
            eq
          }
          tokenAddress {
            eq
          }
          individualBaseTokenPrice {
            gt
            gte
            lt
            lte
            eq
          }
          eventType {
            eq
          }
          fillSource {
            oneOf
          }
        }
        ... on RawTransactionWebhookCondition {
          networkId {
            oneOf
          }
          to {
            eq
          }
          from {
            eq
          }
          toOrFrom {
            eq
          }
          input {
            contains
            notContains
          }
          ignoreTokenPairEvents
          ignoreNftEvents
        }
      }
    }
    rawTransactionWebhooks {
      id
      webhookType
      name
      created
      alertRecurrence
      callbackUrl
      status
      groupId
      bucketId
      bucketSortkey
      conditions {
        ... on PriceEventWebhookCondition {
          tokenAddressPriceEventWebhookCondition: tokenAddress {
            eq
          }
          networkIdPriceEventWebhookCondition: networkId {
            eq
          }
          priceUsd {
            gt
            gte
            lt
            lte
            eq
          }
        }
        ... on DecodedLogWebhookCondition {
          decodingId {
            eq
          }
          eventName {
            eq
          }
          address {
            eq
          }
          event
        }
        ... on DecodedCallWebhookCondition {
          decodingId {
            eq
          }
          methodName {
            eq
          }
          address {
            eq
          }
          from {
            eq
          }
          to {
            eq
          }
          methodId {
            eq
          }
          inputDecodedCallWebhookCondition: input
          output
        }
        ... on RawCallTraceWebhookCondition {
          traceType {
            eq
          }
          result {
            code {
              contains
              notContains
            }
          }
          networkId {
            oneOf
          }
        }
        ... on TokenPairEventWebhookCondition {
          tokenAddress {
            eq
          }
          networkId {
            oneOf
          }
          swapValue {
            gt
            gte
            lt
            lte
            eq
          }
          maker {
            eq
          }
          pairAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          eventType {
            oneOf
          }
        }
        ... on NftEventWebhookCondition {
          networkId {
            oneOf
          }
          maker {
            eq
          }
          contractAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          tokenId {
            eq
          }
          tokenAddress {
            eq
          }
          individualBaseTokenPrice {
            gt
            gte
            lt
            lte
            eq
          }
          eventType {
            eq
          }
          fillSource {
            oneOf
          }
        }
        ... on RawTransactionWebhookCondition {
          networkId {
            oneOf
          }
          to {
            eq
          }
          from {
            eq
          }
          toOrFrom {
            eq
          }
          input {
            contains
            notContains
          }
          ignoreTokenPairEvents
          ignoreNftEvents
        }
      }
      retrySettings {
        maxTimeElapsed
        minRetryDelay
        maxRetryDelay
        maxRetries
      }
    }
  }
}
